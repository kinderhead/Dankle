//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Daniel/source/repos/Dankle/DankleC/C.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DankleC {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Auto=1, Break=2, Case=3, Char=4, Const=5, Continue=6, Default=7, Do=8, 
		Double=9, Else=10, Enum=11, Extern=12, Float=13, For=14, Goto=15, If=16, 
		Inline=17, Int=18, Long=19, Register=20, Restrict=21, Return=22, Short=23, 
		Signed=24, Sizeof=25, Static=26, Struct=27, Switch=28, Typedef=29, Union=30, 
		Unsigned=31, Void=32, Volatile=33, While=34, Alignas=35, Alignof=36, Atomic=37, 
		Bool=38, Complex=39, Generic=40, Imaginary=41, Noreturn=42, StaticAssert=43, 
		ThreadLocal=44, LeftParen=45, RightParen=46, LeftBracket=47, RightBracket=48, 
		LeftBrace=49, RightBrace=50, Less=51, LessEqual=52, Greater=53, GreaterEqual=54, 
		LeftShift=55, RightShift=56, Plus=57, PlusPlus=58, Minus=59, MinusMinus=60, 
		Star=61, Div=62, Mod=63, And=64, Or=65, AndAnd=66, OrOr=67, Caret=68, 
		Not=69, Tilde=70, Question=71, Colon=72, Semi=73, Comma=74, Assign=75, 
		StarAssign=76, DivAssign=77, ModAssign=78, PlusAssign=79, MinusAssign=80, 
		LeftShiftAssign=81, RightShiftAssign=82, AndAssign=83, XorAssign=84, OrAssign=85, 
		Equal=86, NotEqual=87, Arrow=88, Dot=89, Ellipsis=90, Hashtag=91, Identifier=92, 
		Constant=93, DigitSequence=94, StringLiteral=95, AsmBlock=96, Whitespace=97, 
		Newline=98, BlockComment=99, LineComment=100;
	public const int
		RULE_root = 0, RULE_function = 1, RULE_scope = 2, RULE_statement = 3, 
		RULE_semiStatement = 4, RULE_assignmentStatement = 5, RULE_returnStatement = 6, 
		RULE_expression = 7, RULE_constantExpression = 8, RULE_variableExpression = 9, 
		RULE_type = 10, RULE_userType = 11, RULE_builtinType = 12, RULE_integerType = 13, 
		RULE_unsignedChar = 14, RULE_signedChar = 15, RULE_unsignedShort = 16, 
		RULE_signedShort = 17, RULE_unsignedInt = 18, RULE_signedInt = 19, RULE_unsignedLong = 20, 
		RULE_signedLong = 21, RULE_unsignedLongLong = 22, RULE_signedLongLong = 23, 
		RULE_float = 24, RULE_double = 25, RULE_longDouble = 26, RULE_lineMarker = 27;
	public static readonly string[] ruleNames = {
		"root", "function", "scope", "statement", "semiStatement", "assignmentStatement", 
		"returnStatement", "expression", "constantExpression", "variableExpression", 
		"type", "userType", "builtinType", "integerType", "unsignedChar", "signedChar", 
		"unsignedShort", "signedShort", "unsignedInt", "signedInt", "unsignedLong", 
		"signedLong", "unsignedLongLong", "signedLongLong", "float", "double", 
		"longDouble", "lineMarker"
	};

	private static readonly string[] _LiteralNames = {
		null, "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", 
		"'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", 
		"'for'", "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", 
		"'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", 
		"'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", 
		"'volatile'", "'while'", "'_Alignas'", "'_Alignof'", "'_Atomic'", "'_Bool'", 
		"'_Complex'", "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
		"'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
		"'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", "':'", 
		"';'", "','", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'", 
		"'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Auto", "Break", "Case", "Char", "Const", "Continue", "Default", 
		"Do", "Double", "Else", "Enum", "Extern", "Float", "For", "Goto", "If", 
		"Inline", "Int", "Long", "Register", "Restrict", "Return", "Short", "Signed", 
		"Sizeof", "Static", "Struct", "Switch", "Typedef", "Union", "Unsigned", 
		"Void", "Volatile", "While", "Alignas", "Alignof", "Atomic", "Bool", "Complex", 
		"Generic", "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", "LeftParen", 
		"RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
		"Less", "LessEqual", "Greater", "GreaterEqual", "LeftShift", "RightShift", 
		"Plus", "PlusPlus", "Minus", "MinusMinus", "Star", "Div", "Mod", "And", 
		"Or", "AndAnd", "OrOr", "Caret", "Not", "Tilde", "Question", "Colon", 
		"Semi", "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign", "PlusAssign", 
		"MinusAssign", "LeftShiftAssign", "RightShiftAssign", "AndAssign", "XorAssign", 
		"OrAssign", "Equal", "NotEqual", "Arrow", "Dot", "Ellipsis", "Hashtag", 
		"Identifier", "Constant", "DigitSequence", "StringLiteral", "AsmBlock", 
		"Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "C.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineMarkerContext[] lineMarker() {
			return GetRuleContexts<LineMarkerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineMarkerContext lineMarker(int i) {
			return GetRuleContext<LineMarkerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281346318896L) != 0) || _la==Hashtag || _la==Identifier) {
				{
				State = 58;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Hashtag:
					{
					State = 56;
					lineMarker();
					}
					break;
				case Char:
				case Const:
				case Double:
				case Float:
				case Int:
				case Long:
				case Short:
				case Signed:
				case Unsigned:
				case Void:
				case Bool:
				case Identifier:
					{
					State = 57;
					function();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 63;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			type();
			State = 66;
			Match(Identifier);
			State = 67;
			Match(LeftParen);
			State = 68;
			Match(RightParen);
			State = 69;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 4, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(LeftBrace);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281350513200L) != 0) || _la==Identifier) {
				{
				{
				State = 72;
				statement();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SemiStatementContext semiStatement() {
			return GetRuleContext<SemiStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			semiStatement();
			State = 81;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		public SemiStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semiStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemiStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemiStatementContext semiStatement() {
		SemiStatementContext _localctx = new SemiStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_semiStatement);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Return:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				returnStatement();
				}
				break;
			case Char:
			case Const:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Bool:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				assignmentStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			type();
			State = 88;
			Match(Identifier);
			State = 89;
			Match(Assign);
			State = 90;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(Return);
			State = 93;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_expression);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Constant:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				constantExpression();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				variableExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CParser.StringLiteral, 0); }
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_constantExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_la = TokenStream.LA(1);
			if ( !(_la==Constant || _la==StringLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public VariableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpressionContext variableExpression() {
		VariableExpressionContext _localctx = new VariableExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IToken @const;
		public IToken pconst;
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinTypeContext builtinType() {
			return GetRuleContext<BuiltinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Const() { return GetTokens(CParser.Const); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const(int i) {
			return GetToken(CParser.Const, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 103;
				_localctx.@const = Match(Const);
				}
			}

			State = 108;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 106;
				userType();
				}
				break;
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Bool:
				{
				State = 107;
				builtinType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star) {
				{
				State = 110;
				Match(Star);
				}
			}

			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 113;
				_localctx.pconst = Match(Const);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public UserTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserTypeContext userType() {
		UserTypeContext _localctx = new UserTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_userType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(CParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(CParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public BuiltinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinTypeContext builtinType() {
		BuiltinTypeContext _localctx = new BuiltinTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_builtinType);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				Match(Void);
				}
				break;
			case Bool:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				Match(Bool);
				}
				break;
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
				EnterOuterAlt(_localctx, 3);
				{
				State = 120;
				integerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedCharContext unsignedChar() {
			return GetRuleContext<UnsignedCharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedCharContext signedChar() {
			return GetRuleContext<SignedCharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedShortContext unsignedShort() {
			return GetRuleContext<UnsignedShortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedShortContext signedShort() {
			return GetRuleContext<SignedShortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedIntContext unsignedInt() {
			return GetRuleContext<UnsignedIntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedIntContext signedInt() {
			return GetRuleContext<SignedIntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedLongContext unsignedLong() {
			return GetRuleContext<UnsignedLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLongContext signedLong() {
			return GetRuleContext<SignedLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedLongLongContext unsignedLongLong() {
			return GetRuleContext<UnsignedLongLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLongLongContext signedLongLong() {
			return GetRuleContext<SignedLongLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleContext @double() {
			return GetRuleContext<DoubleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongDoubleContext longDouble() {
			return GetRuleContext<LongDoubleContext>(0);
		}
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_integerType);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123;
				unsignedChar();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				signedChar();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125;
				unsignedShort();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 126;
				signedShort();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 127;
				unsignedInt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 128;
				signedInt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 129;
				unsignedLong();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 130;
				signedLong();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 131;
				unsignedLongLong();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 132;
				signedLongLong();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 133;
				@float();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 134;
				@double();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 135;
				longDouble();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedCharContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		public UnsignedCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedChar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedCharContext unsignedChar() {
		UnsignedCharContext _localctx = new UnsignedCharContext(Context, State);
		EnterRule(_localctx, 28, RULE_unsignedChar);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Char:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				Match(Char);
				}
				break;
			case Unsigned:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				Match(Unsigned);
				State = 140;
				Match(Char);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedCharContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CParser.Char, 0); }
		public SignedCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedChar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedCharContext signedChar() {
		SignedCharContext _localctx = new SignedCharContext(Context, State);
		EnterRule(_localctx, 30, RULE_signedChar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(Signed);
			State = 144;
			Match(Char);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedShortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedShortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedShort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedShort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedShortContext unsignedShort() {
		UnsignedShortContext _localctx = new UnsignedShortContext(Context, State);
		EnterRule(_localctx, 32, RULE_unsignedShort);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				Match(Unsigned);
				State = 147;
				Match(Short);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				Match(Unsigned);
				State = 149;
				Match(Short);
				State = 150;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedShortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedShortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedShort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedShort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedShortContext signedShort() {
		SignedShortContext _localctx = new SignedShortContext(Context, State);
		EnterRule(_localctx, 34, RULE_signedShort);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153;
				Match(Short);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154;
				Match(Short);
				State = 155;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 156;
				Match(Signed);
				State = 157;
				Match(Short);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 158;
				Match(Signed);
				State = 159;
				Match(Short);
				State = 160;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedIntContext unsignedInt() {
		UnsignedIntContext _localctx = new UnsignedIntContext(Context, State);
		EnterRule(_localctx, 36, RULE_unsignedInt);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				Match(Unsigned);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				Match(Unsigned);
				State = 165;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedIntContext signedInt() {
		SignedIntContext _localctx = new SignedIntContext(Context, State);
		EnterRule(_localctx, 38, RULE_signedInt);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				Match(Int);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				Match(Signed);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 170;
				Match(Signed);
				State = 171;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedLongContext unsignedLong() {
		UnsignedLongContext _localctx = new UnsignedLongContext(Context, State);
		EnterRule(_localctx, 40, RULE_unsignedLong);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				Match(Unsigned);
				State = 175;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				Match(Unsigned);
				State = 177;
				Match(Long);
				State = 178;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedLongContext signedLong() {
		SignedLongContext _localctx = new SignedLongContext(Context, State);
		EnterRule(_localctx, 42, RULE_signedLong);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				Match(Long);
				State = 183;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184;
				Match(Signed);
				State = 185;
				Match(Long);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 186;
				Match(Signed);
				State = 187;
				Match(Long);
				State = 188;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedLongLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Long() { return GetTokens(CParser.Long); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long(int i) {
			return GetToken(CParser.Long, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedLongLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedLongLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedLongLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedLongLongContext unsignedLongLong() {
		UnsignedLongLongContext _localctx = new UnsignedLongLongContext(Context, State);
		EnterRule(_localctx, 44, RULE_unsignedLongLong);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191;
				Match(Unsigned);
				State = 192;
				Match(Long);
				State = 193;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				Match(Unsigned);
				State = 195;
				Match(Long);
				State = 196;
				Match(Long);
				State = 197;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLongLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Long() { return GetTokens(CParser.Long); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long(int i) {
			return GetToken(CParser.Long, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedLongLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLongLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedLongLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedLongLongContext signedLongLong() {
		SignedLongLongContext _localctx = new SignedLongLongContext(Context, State);
		EnterRule(_localctx, 46, RULE_signedLongLong);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				Match(Long);
				State = 201;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				Match(Long);
				State = 203;
				Match(Long);
				State = 204;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 205;
				Match(Signed);
				State = 206;
				Match(Long);
				State = 207;
				Match(Long);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 208;
				Match(Signed);
				State = 209;
				Match(Long);
				State = 210;
				Match(Long);
				State = 211;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(CParser.Float, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 48, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(Float);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CParser.Double, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 50, RULE_double);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(Double);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongDoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CParser.Double, 0); }
		public LongDoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longDouble; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongDouble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongDoubleContext longDouble() {
		LongDoubleContext _localctx = new LongDoubleContext(Context, State);
		EnterRule(_localctx, 52, RULE_longDouble);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(Long);
			State = 219;
			Match(Double);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineMarkerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Constant() { return GetTokens(CParser.Constant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant(int i) {
			return GetToken(CParser.Constant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CParser.StringLiteral, 0); }
		public LineMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineMarker; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineMarkerContext lineMarker() {
		LineMarkerContext _localctx = new LineMarkerContext(Context, State);
		EnterRule(_localctx, 54, RULE_lineMarker);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(Hashtag);
			State = 222;
			Match(Constant);
			State = 223;
			Match(StringLiteral);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Constant) {
				{
				{
				State = 224;
				Match(Constant);
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,100,231,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,0,5,
		0,59,8,0,10,0,12,0,62,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,5,2,
		74,8,2,10,2,12,2,77,9,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,3,4,86,8,4,1,5,1,5,
		1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,3,7,98,8,7,1,8,1,8,1,9,1,9,1,10,3,10,105,
		8,10,1,10,1,10,3,10,109,8,10,1,10,3,10,112,8,10,1,10,3,10,115,8,10,1,11,
		1,11,1,12,1,12,1,12,3,12,122,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,3,13,137,8,13,1,14,1,14,1,14,3,14,142,8,14,
		1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,3,16,152,8,16,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,3,17,162,8,17,1,18,1,18,1,18,3,18,167,8,18,1,19,
		1,19,1,19,1,19,3,19,173,8,19,1,20,1,20,1,20,1,20,1,20,3,20,180,8,20,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,190,8,21,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,3,22,199,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,3,23,213,8,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,
		1,27,1,27,1,27,5,27,226,8,27,10,27,12,27,229,9,27,1,27,0,0,28,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		0,1,2,0,93,93,95,95,242,0,60,1,0,0,0,2,65,1,0,0,0,4,71,1,0,0,0,6,80,1,
		0,0,0,8,85,1,0,0,0,10,87,1,0,0,0,12,92,1,0,0,0,14,97,1,0,0,0,16,99,1,0,
		0,0,18,101,1,0,0,0,20,104,1,0,0,0,22,116,1,0,0,0,24,121,1,0,0,0,26,136,
		1,0,0,0,28,141,1,0,0,0,30,143,1,0,0,0,32,151,1,0,0,0,34,161,1,0,0,0,36,
		166,1,0,0,0,38,172,1,0,0,0,40,179,1,0,0,0,42,189,1,0,0,0,44,198,1,0,0,
		0,46,212,1,0,0,0,48,214,1,0,0,0,50,216,1,0,0,0,52,218,1,0,0,0,54,221,1,
		0,0,0,56,59,3,54,27,0,57,59,3,2,1,0,58,56,1,0,0,0,58,57,1,0,0,0,59,62,
		1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,60,1,0,0,0,63,64,
		5,0,0,1,64,1,1,0,0,0,65,66,3,20,10,0,66,67,5,92,0,0,67,68,5,45,0,0,68,
		69,5,46,0,0,69,70,3,4,2,0,70,3,1,0,0,0,71,75,5,49,0,0,72,74,3,6,3,0,73,
		72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,
		75,1,0,0,0,78,79,5,50,0,0,79,5,1,0,0,0,80,81,3,8,4,0,81,82,5,73,0,0,82,
		7,1,0,0,0,83,86,3,12,6,0,84,86,3,10,5,0,85,83,1,0,0,0,85,84,1,0,0,0,86,
		9,1,0,0,0,87,88,3,20,10,0,88,89,5,92,0,0,89,90,5,75,0,0,90,91,3,14,7,0,
		91,11,1,0,0,0,92,93,5,22,0,0,93,94,3,14,7,0,94,13,1,0,0,0,95,98,3,16,8,
		0,96,98,3,18,9,0,97,95,1,0,0,0,97,96,1,0,0,0,98,15,1,0,0,0,99,100,7,0,
		0,0,100,17,1,0,0,0,101,102,5,92,0,0,102,19,1,0,0,0,103,105,5,5,0,0,104,
		103,1,0,0,0,104,105,1,0,0,0,105,108,1,0,0,0,106,109,3,22,11,0,107,109,
		3,24,12,0,108,106,1,0,0,0,108,107,1,0,0,0,109,111,1,0,0,0,110,112,5,61,
		0,0,111,110,1,0,0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,115,5,5,0,0,114,
		113,1,0,0,0,114,115,1,0,0,0,115,21,1,0,0,0,116,117,5,92,0,0,117,23,1,0,
		0,0,118,122,5,32,0,0,119,122,5,38,0,0,120,122,3,26,13,0,121,118,1,0,0,
		0,121,119,1,0,0,0,121,120,1,0,0,0,122,25,1,0,0,0,123,137,3,28,14,0,124,
		137,3,30,15,0,125,137,3,32,16,0,126,137,3,34,17,0,127,137,3,36,18,0,128,
		137,3,38,19,0,129,137,3,40,20,0,130,137,3,42,21,0,131,137,3,44,22,0,132,
		137,3,46,23,0,133,137,3,48,24,0,134,137,3,50,25,0,135,137,3,52,26,0,136,
		123,1,0,0,0,136,124,1,0,0,0,136,125,1,0,0,0,136,126,1,0,0,0,136,127,1,
		0,0,0,136,128,1,0,0,0,136,129,1,0,0,0,136,130,1,0,0,0,136,131,1,0,0,0,
		136,132,1,0,0,0,136,133,1,0,0,0,136,134,1,0,0,0,136,135,1,0,0,0,137,27,
		1,0,0,0,138,142,5,4,0,0,139,140,5,31,0,0,140,142,5,4,0,0,141,138,1,0,0,
		0,141,139,1,0,0,0,142,29,1,0,0,0,143,144,5,24,0,0,144,145,5,4,0,0,145,
		31,1,0,0,0,146,147,5,31,0,0,147,152,5,23,0,0,148,149,5,31,0,0,149,150,
		5,23,0,0,150,152,5,18,0,0,151,146,1,0,0,0,151,148,1,0,0,0,152,33,1,0,0,
		0,153,162,5,23,0,0,154,155,5,23,0,0,155,162,5,18,0,0,156,157,5,24,0,0,
		157,162,5,23,0,0,158,159,5,24,0,0,159,160,5,23,0,0,160,162,5,18,0,0,161,
		153,1,0,0,0,161,154,1,0,0,0,161,156,1,0,0,0,161,158,1,0,0,0,162,35,1,0,
		0,0,163,167,5,31,0,0,164,165,5,31,0,0,165,167,5,18,0,0,166,163,1,0,0,0,
		166,164,1,0,0,0,167,37,1,0,0,0,168,173,5,18,0,0,169,173,5,24,0,0,170,171,
		5,24,0,0,171,173,5,18,0,0,172,168,1,0,0,0,172,169,1,0,0,0,172,170,1,0,
		0,0,173,39,1,0,0,0,174,175,5,31,0,0,175,180,5,19,0,0,176,177,5,31,0,0,
		177,178,5,19,0,0,178,180,5,18,0,0,179,174,1,0,0,0,179,176,1,0,0,0,180,
		41,1,0,0,0,181,190,5,19,0,0,182,183,5,19,0,0,183,190,5,18,0,0,184,185,
		5,24,0,0,185,190,5,19,0,0,186,187,5,24,0,0,187,188,5,19,0,0,188,190,5,
		18,0,0,189,181,1,0,0,0,189,182,1,0,0,0,189,184,1,0,0,0,189,186,1,0,0,0,
		190,43,1,0,0,0,191,192,5,31,0,0,192,193,5,19,0,0,193,199,5,19,0,0,194,
		195,5,31,0,0,195,196,5,19,0,0,196,197,5,19,0,0,197,199,5,18,0,0,198,191,
		1,0,0,0,198,194,1,0,0,0,199,45,1,0,0,0,200,201,5,19,0,0,201,213,5,19,0,
		0,202,203,5,19,0,0,203,204,5,19,0,0,204,213,5,18,0,0,205,206,5,24,0,0,
		206,207,5,19,0,0,207,213,5,19,0,0,208,209,5,24,0,0,209,210,5,19,0,0,210,
		211,5,19,0,0,211,213,5,18,0,0,212,200,1,0,0,0,212,202,1,0,0,0,212,205,
		1,0,0,0,212,208,1,0,0,0,213,47,1,0,0,0,214,215,5,13,0,0,215,49,1,0,0,0,
		216,217,5,9,0,0,217,51,1,0,0,0,218,219,5,19,0,0,219,220,5,9,0,0,220,53,
		1,0,0,0,221,222,5,91,0,0,222,223,5,93,0,0,223,227,5,95,0,0,224,226,5,93,
		0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,
		55,1,0,0,0,229,227,1,0,0,0,21,58,60,75,85,97,104,108,111,114,121,136,141,
		151,161,166,172,179,189,198,212,227
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DankleC
