//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/daniel/Documents/CSharp/Dankle/DankleC/C.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DankleC {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Auto=1, Break=2, Case=3, Char=4, Const=5, Continue=6, Default=7, Do=8, 
		Double=9, Else=10, Enum=11, Extern=12, Float=13, For=14, Goto=15, If=16, 
		Inline=17, Int=18, Long=19, Register=20, Restrict=21, Return=22, Short=23, 
		Signed=24, Sizeof=25, Static=26, Struct=27, Switch=28, Typedef=29, Union=30, 
		Unsigned=31, Void=32, Volatile=33, While=34, Alignas=35, Alignof=36, Atomic=37, 
		Bool=38, Complex=39, Generic=40, Imaginary=41, Noreturn=42, StaticAssert=43, 
		ThreadLocal=44, LeftParen=45, RightParen=46, LeftBracket=47, RightBracket=48, 
		LeftBrace=49, RightBrace=50, Less=51, LessEqual=52, Greater=53, GreaterEqual=54, 
		LeftShift=55, RightShift=56, Plus=57, PlusPlus=58, Minus=59, MinusMinus=60, 
		Star=61, Div=62, Mod=63, And=64, Or=65, AndAnd=66, OrOr=67, Caret=68, 
		Not=69, Tilde=70, Question=71, Colon=72, Semi=73, Comma=74, Assign=75, 
		StarAssign=76, DivAssign=77, ModAssign=78, PlusAssign=79, MinusAssign=80, 
		LeftShiftAssign=81, RightShiftAssign=82, AndAssign=83, XorAssign=84, OrAssign=85, 
		Equal=86, NotEqual=87, Arrow=88, Dot=89, Ellipsis=90, Hashtag=91, Identifier=92, 
		Constant=93, DigitSequence=94, StringLiteral=95, AsmBlock=96, Whitespace=97, 
		Newline=98, BlockComment=99, LineComment=100;
	public const int
		RULE_root = 0, RULE_function = 1, RULE_scope = 2, RULE_statement = 3, 
		RULE_semiStatement = 4, RULE_initAssignmentStatement = 5, RULE_assignmentStatement = 6, 
		RULE_declareStatement = 7, RULE_assignmentExpression = 8, RULE_relationalExpression = 9, 
		RULE_equalityExpression = 10, RULE_indexExpression = 11, RULE_returnStatement = 12, 
		RULE_lvalue = 13, RULE_expression = 14, RULE_castExpression = 15, RULE_unaryExpression = 16, 
		RULE_postfixExpression = 17, RULE_primaryExpression = 18, RULE_constantExpression = 19, 
		RULE_additiveExpression = 20, RULE_multiplicativeExpression = 21, RULE_variableExpression = 22, 
		RULE_type = 23, RULE_userType = 24, RULE_builtinType = 25, RULE_integerType = 26, 
		RULE_unsignedChar = 27, RULE_signedChar = 28, RULE_unsignedShort = 29, 
		RULE_signedShort = 30, RULE_unsignedInt = 31, RULE_signedInt = 32, RULE_unsignedLong = 33, 
		RULE_signedLong = 34, RULE_unsignedLongLong = 35, RULE_signedLongLong = 36, 
		RULE_float = 37, RULE_double = 38, RULE_longDouble = 39, RULE_lineMarker = 40;
	public static readonly string[] ruleNames = {
		"root", "function", "scope", "statement", "semiStatement", "initAssignmentStatement", 
		"assignmentStatement", "declareStatement", "assignmentExpression", "relationalExpression", 
		"equalityExpression", "indexExpression", "returnStatement", "lvalue", 
		"expression", "castExpression", "unaryExpression", "postfixExpression", 
		"primaryExpression", "constantExpression", "additiveExpression", "multiplicativeExpression", 
		"variableExpression", "type", "userType", "builtinType", "integerType", 
		"unsignedChar", "signedChar", "unsignedShort", "signedShort", "unsignedInt", 
		"signedInt", "unsignedLong", "signedLong", "unsignedLongLong", "signedLongLong", 
		"float", "double", "longDouble", "lineMarker"
	};

	private static readonly string[] _LiteralNames = {
		null, "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", 
		"'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", 
		"'for'", "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", 
		"'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", 
		"'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", 
		"'volatile'", "'while'", "'_Alignas'", "'_Alignof'", "'_Atomic'", "'_Bool'", 
		"'_Complex'", "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
		"'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
		"'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", "':'", 
		"';'", "','", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'", 
		"'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Auto", "Break", "Case", "Char", "Const", "Continue", "Default", 
		"Do", "Double", "Else", "Enum", "Extern", "Float", "For", "Goto", "If", 
		"Inline", "Int", "Long", "Register", "Restrict", "Return", "Short", "Signed", 
		"Sizeof", "Static", "Struct", "Switch", "Typedef", "Union", "Unsigned", 
		"Void", "Volatile", "While", "Alignas", "Alignof", "Atomic", "Bool", "Complex", 
		"Generic", "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", "LeftParen", 
		"RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
		"Less", "LessEqual", "Greater", "GreaterEqual", "LeftShift", "RightShift", 
		"Plus", "PlusPlus", "Minus", "MinusMinus", "Star", "Div", "Mod", "And", 
		"Or", "AndAnd", "OrOr", "Caret", "Not", "Tilde", "Question", "Colon", 
		"Semi", "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign", "PlusAssign", 
		"MinusAssign", "LeftShiftAssign", "RightShiftAssign", "AndAssign", "XorAssign", 
		"OrAssign", "Equal", "NotEqual", "Arrow", "Dot", "Ellipsis", "Hashtag", 
		"Identifier", "Constant", "DigitSequence", "StringLiteral", "AsmBlock", 
		"Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "C.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineMarkerContext[] lineMarker() {
			return GetRuleContexts<LineMarkerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineMarkerContext lineMarker(int i) {
			return GetRuleContext<LineMarkerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 281346318896L) != 0) || _la==Hashtag || _la==Identifier) {
				{
				State = 84;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Hashtag:
					{
					State = 82;
					lineMarker();
					}
					break;
				case Char:
				case Const:
				case Double:
				case Float:
				case Int:
				case Long:
				case Short:
				case Signed:
				case Unsigned:
				case Void:
				case Bool:
				case Identifier:
					{
					State = 83;
					function();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 89;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			type();
			State = 92;
			Match(Identifier);
			State = 93;
			Match(LeftParen);
			State = 94;
			Match(RightParen);
			State = 95;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 4, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(LeftBrace);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2305878474936295984L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2952790017L) != 0)) {
				{
				{
				State = 98;
				statement();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SemiStatementContext semiStatement() {
			return GetRuleContext<SemiStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			semiStatement();
			State = 107;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitAssignmentStatementContext initAssignmentStatement() {
			return GetRuleContext<InitAssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareStatementContext declareStatement() {
			return GetRuleContext<DeclareStatementContext>(0);
		}
		public SemiStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semiStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemiStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemiStatementContext semiStatement() {
		SemiStatementContext _localctx = new SemiStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_semiStatement);
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				returnStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				initAssignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 111;
				assignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 112;
				declareStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitAssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitAssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initAssignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitAssignmentStatementContext initAssignmentStatement() {
		InitAssignmentStatementContext _localctx = new InitAssignmentStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_initAssignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			type();
			State = 116;
			Match(Identifier);
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				{
				{
				State = 117;
				Match(LeftBracket);
				State = 118;
				Match(Constant);
				State = 119;
				Match(RightBracket);
				}
				}
				break;
			case Assign:
				{
				{
				State = 120;
				Match(Assign);
				State = 121;
				expression();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			lvalue();
			State = 125;
			Match(Assign);
			State = 126;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public DeclareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStatementContext declareStatement() {
		DeclareStatementContext _localctx = new DeclareStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_declareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			type();
			State = 129;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignmentExpression);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				equalityExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				Match(Identifier);
				State = 133;
				Match(Assign);
				State = 134;
				assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(CParser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(CParser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessEqual() { return GetTokens(CParser.LessEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual(int i) {
			return GetToken(CParser.LessEqual, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CParser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterEqual() { return GetTokens(CParser.GreaterEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual(int i) {
			return GetToken(CParser.GreaterEqual, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_relationalExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			additiveExpression();
			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 145;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 138;
						Match(Less);
						}
						break;
					case 2:
						{
						}
						break;
					case 3:
						{
						State = 140;
						Match(LessEqual);
						}
						break;
					case 4:
						{
						}
						break;
					case 5:
						{
						State = 142;
						Match(Greater);
						}
						break;
					case 6:
						{
						}
						break;
					case 7:
						{
						State = 144;
						Match(GreaterEqual);
						}
						break;
					}
					State = 147;
					additiveExpression();
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equal() { return GetTokens(CParser.Equal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal(int i) {
			return GetToken(CParser.Equal, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NotEqual() { return GetTokens(CParser.NotEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual(int i) {
			return GetToken(CParser.NotEqual, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			relationalExpression();
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 1554709442265089L) != 0)) {
				{
				{
				State = 157;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Equal:
					{
					State = 154;
					Match(Equal);
					}
					break;
				case LeftParen:
				case Star:
				case And:
				case Identifier:
				case Constant:
				case StringLiteral:
					{
					}
					break;
				case NotEqual:
					{
					State = 156;
					Match(NotEqual);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 159;
				relationalExpression();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		public IndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExpressionContext indexExpression() {
		IndexExpressionContext _localctx = new IndexExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_indexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			primaryExpression();
			State = 166;
			Match(LeftBracket);
			State = 167;
			expression();
			State = 168;
			Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(Return);
			State = 171;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		LvalueContext _localctx = new LvalueContext(Context, State);
		EnterRule(_localctx, 26, RULE_lvalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_castExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			unaryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_unaryExpression);
		int _la;
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case Identifier:
			case Constant:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179;
				postfixExpression();
				}
				break;
			case Star:
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				_la = TokenStream.LA(1);
				if ( !(_la==Star || _la==And) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 181;
				castExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext indexExpression() {
			return GetRuleContext<IndexExpressionContext>(0);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_postfixExpression);
		try {
			State = 186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				primaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				indexExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_primaryExpression);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Constant:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				constantExpression();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189;
				variableExpression();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 190;
				Match(LeftParen);
				State = 191;
				expression();
				State = 192;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CParser.StringLiteral, 0); }
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_constantExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_la = TokenStream.LA(1);
			if ( !(_la==Constant || _la==StringLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(CParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(CParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(CParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(CParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			multiplicativeExpression();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 199;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 200;
				multiplicativeExpression();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(CParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(CParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Div() { return GetTokens(CParser.Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div(int i) {
			return GetToken(CParser.Div, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_multiplicativeExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			castExpression();
			State = 211;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 207;
					_la = TokenStream.LA(1);
					if ( !(_la==Star || _la==Div) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 208;
					castExpression();
					}
					} 
				}
				State = 213;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public VariableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpressionContext variableExpression() {
		VariableExpressionContext _localctx = new VariableExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_variableExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IToken @const;
		public IToken pconst;
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinTypeContext builtinType() {
			return GetRuleContext<BuiltinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Const() { return GetTokens(CParser.Const); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const(int i) {
			return GetToken(CParser.Const, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 216;
				_localctx.@const = Match(Const);
				}
			}

			State = 221;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 219;
				userType();
				}
				break;
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Bool:
				{
				State = 220;
				builtinType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star) {
				{
				State = 223;
				Match(Star);
				}
			}

			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 226;
				_localctx.pconst = Match(Const);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public UserTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserTypeContext userType() {
		UserTypeContext _localctx = new UserTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_userType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(CParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(CParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public BuiltinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinTypeContext builtinType() {
		BuiltinTypeContext _localctx = new BuiltinTypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_builtinType);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				Match(Void);
				}
				break;
			case Bool:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				Match(Bool);
				}
				break;
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
				EnterOuterAlt(_localctx, 3);
				{
				State = 233;
				integerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedCharContext unsignedChar() {
			return GetRuleContext<UnsignedCharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedCharContext signedChar() {
			return GetRuleContext<SignedCharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedShortContext unsignedShort() {
			return GetRuleContext<UnsignedShortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedShortContext signedShort() {
			return GetRuleContext<SignedShortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedIntContext unsignedInt() {
			return GetRuleContext<UnsignedIntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedIntContext signedInt() {
			return GetRuleContext<SignedIntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedLongContext unsignedLong() {
			return GetRuleContext<UnsignedLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLongContext signedLong() {
			return GetRuleContext<SignedLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedLongLongContext unsignedLongLong() {
			return GetRuleContext<UnsignedLongLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLongLongContext signedLongLong() {
			return GetRuleContext<SignedLongLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleContext @double() {
			return GetRuleContext<DoubleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongDoubleContext longDouble() {
			return GetRuleContext<LongDoubleContext>(0);
		}
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_integerType);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				unsignedChar();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237;
				signedChar();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238;
				unsignedShort();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 239;
				signedShort();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 240;
				unsignedInt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 241;
				signedInt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 242;
				unsignedLong();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 243;
				signedLong();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 244;
				unsignedLongLong();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 245;
				signedLongLong();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 246;
				@float();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 247;
				@double();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 248;
				longDouble();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedCharContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		public UnsignedCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedChar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedCharContext unsignedChar() {
		UnsignedCharContext _localctx = new UnsignedCharContext(Context, State);
		EnterRule(_localctx, 54, RULE_unsignedChar);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Char:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				Match(Char);
				}
				break;
			case Unsigned:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252;
				Match(Unsigned);
				State = 253;
				Match(Char);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedCharContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CParser.Char, 0); }
		public SignedCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedChar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedCharContext signedChar() {
		SignedCharContext _localctx = new SignedCharContext(Context, State);
		EnterRule(_localctx, 56, RULE_signedChar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(Signed);
			State = 257;
			Match(Char);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedShortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedShortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedShort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedShort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedShortContext unsignedShort() {
		UnsignedShortContext _localctx = new UnsignedShortContext(Context, State);
		EnterRule(_localctx, 58, RULE_unsignedShort);
		try {
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				Match(Unsigned);
				State = 260;
				Match(Short);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261;
				Match(Unsigned);
				State = 262;
				Match(Short);
				State = 263;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedShortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedShortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedShort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedShort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedShortContext signedShort() {
		SignedShortContext _localctx = new SignedShortContext(Context, State);
		EnterRule(_localctx, 60, RULE_signedShort);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 266;
				Match(Short);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267;
				Match(Short);
				State = 268;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 269;
				Match(Signed);
				State = 270;
				Match(Short);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 271;
				Match(Signed);
				State = 272;
				Match(Short);
				State = 273;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedIntContext unsignedInt() {
		UnsignedIntContext _localctx = new UnsignedIntContext(Context, State);
		EnterRule(_localctx, 62, RULE_unsignedInt);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				Match(Unsigned);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				Match(Unsigned);
				State = 278;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedIntContext signedInt() {
		SignedIntContext _localctx = new SignedIntContext(Context, State);
		EnterRule(_localctx, 64, RULE_signedInt);
		try {
			State = 285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281;
				Match(Int);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				Match(Signed);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 283;
				Match(Signed);
				State = 284;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedLongContext unsignedLong() {
		UnsignedLongContext _localctx = new UnsignedLongContext(Context, State);
		EnterRule(_localctx, 66, RULE_unsignedLong);
		try {
			State = 292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 287;
				Match(Unsigned);
				State = 288;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289;
				Match(Unsigned);
				State = 290;
				Match(Long);
				State = 291;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedLongContext signedLong() {
		SignedLongContext _localctx = new SignedLongContext(Context, State);
		EnterRule(_localctx, 68, RULE_signedLong);
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295;
				Match(Long);
				State = 296;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 297;
				Match(Signed);
				State = 298;
				Match(Long);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 299;
				Match(Signed);
				State = 300;
				Match(Long);
				State = 301;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedLongLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Long() { return GetTokens(CParser.Long); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long(int i) {
			return GetToken(CParser.Long, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedLongLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedLongLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedLongLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedLongLongContext unsignedLongLong() {
		UnsignedLongLongContext _localctx = new UnsignedLongLongContext(Context, State);
		EnterRule(_localctx, 70, RULE_unsignedLongLong);
		try {
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304;
				Match(Unsigned);
				State = 305;
				Match(Long);
				State = 306;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307;
				Match(Unsigned);
				State = 308;
				Match(Long);
				State = 309;
				Match(Long);
				State = 310;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLongLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Long() { return GetTokens(CParser.Long); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long(int i) {
			return GetToken(CParser.Long, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedLongLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLongLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedLongLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedLongLongContext signedLongLong() {
		SignedLongLongContext _localctx = new SignedLongLongContext(Context, State);
		EnterRule(_localctx, 72, RULE_signedLongLong);
		try {
			State = 325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313;
				Match(Long);
				State = 314;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315;
				Match(Long);
				State = 316;
				Match(Long);
				State = 317;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318;
				Match(Signed);
				State = 319;
				Match(Long);
				State = 320;
				Match(Long);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 321;
				Match(Signed);
				State = 322;
				Match(Long);
				State = 323;
				Match(Long);
				State = 324;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(CParser.Float, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 74, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(Float);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CParser.Double, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 76, RULE_double);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(Double);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongDoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CParser.Double, 0); }
		public LongDoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longDouble; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongDouble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongDoubleContext longDouble() {
		LongDoubleContext _localctx = new LongDoubleContext(Context, State);
		EnterRule(_localctx, 78, RULE_longDouble);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(Long);
			State = 332;
			Match(Double);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineMarkerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Constant() { return GetTokens(CParser.Constant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant(int i) {
			return GetToken(CParser.Constant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CParser.StringLiteral, 0); }
		public LineMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineMarker; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineMarkerContext lineMarker() {
		LineMarkerContext _localctx = new LineMarkerContext(Context, State);
		EnterRule(_localctx, 80, RULE_lineMarker);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(Hashtag);
			State = 335;
			Match(Constant);
			State = 336;
			Match(StringLiteral);
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Constant) {
				{
				{
				State = 337;
				Match(Constant);
				}
				}
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,100,344,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,1,0,1,0,5,0,85,8,0,10,
		0,12,0,88,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,5,2,100,8,2,10,2,
		12,2,103,9,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,114,8,4,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,3,5,123,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,
		1,8,3,8,136,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,146,8,9,1,9,5,9,149,
		8,9,10,9,12,9,152,9,9,1,10,1,10,1,10,1,10,3,10,158,8,10,1,10,5,10,161,
		8,10,10,10,12,10,164,9,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,
		1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,3,16,183,8,16,1,17,1,17,3,17,187,
		8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,195,8,18,1,19,1,19,1,20,1,20,1,
		20,5,20,202,8,20,10,20,12,20,205,9,20,1,21,1,21,1,21,5,21,210,8,21,10,
		21,12,21,213,9,21,1,22,1,22,1,23,3,23,218,8,23,1,23,1,23,3,23,222,8,23,
		1,23,3,23,225,8,23,1,23,3,23,228,8,23,1,24,1,24,1,25,1,25,1,25,3,25,235,
		8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		3,26,250,8,26,1,27,1,27,1,27,3,27,255,8,27,1,28,1,28,1,28,1,29,1,29,1,
		29,1,29,1,29,3,29,265,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,
		275,8,30,1,31,1,31,1,31,3,31,280,8,31,1,32,1,32,1,32,1,32,3,32,286,8,32,
		1,33,1,33,1,33,1,33,1,33,3,33,293,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,
		34,1,34,3,34,303,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,312,8,35,
		1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,326,8,
		36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,339,8,40,
		10,40,12,40,342,9,40,1,40,0,0,41,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
		76,78,80,0,4,2,0,61,61,64,64,2,0,93,93,95,95,2,0,57,57,59,59,1,0,61,62,
		361,0,86,1,0,0,0,2,91,1,0,0,0,4,97,1,0,0,0,6,106,1,0,0,0,8,113,1,0,0,0,
		10,115,1,0,0,0,12,124,1,0,0,0,14,128,1,0,0,0,16,135,1,0,0,0,18,137,1,0,
		0,0,20,153,1,0,0,0,22,165,1,0,0,0,24,170,1,0,0,0,26,173,1,0,0,0,28,175,
		1,0,0,0,30,177,1,0,0,0,32,182,1,0,0,0,34,186,1,0,0,0,36,194,1,0,0,0,38,
		196,1,0,0,0,40,198,1,0,0,0,42,206,1,0,0,0,44,214,1,0,0,0,46,217,1,0,0,
		0,48,229,1,0,0,0,50,234,1,0,0,0,52,249,1,0,0,0,54,254,1,0,0,0,56,256,1,
		0,0,0,58,264,1,0,0,0,60,274,1,0,0,0,62,279,1,0,0,0,64,285,1,0,0,0,66,292,
		1,0,0,0,68,302,1,0,0,0,70,311,1,0,0,0,72,325,1,0,0,0,74,327,1,0,0,0,76,
		329,1,0,0,0,78,331,1,0,0,0,80,334,1,0,0,0,82,85,3,80,40,0,83,85,3,2,1,
		0,84,82,1,0,0,0,84,83,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,
		0,87,89,1,0,0,0,88,86,1,0,0,0,89,90,5,0,0,1,90,1,1,0,0,0,91,92,3,46,23,
		0,92,93,5,92,0,0,93,94,5,45,0,0,94,95,5,46,0,0,95,96,3,4,2,0,96,3,1,0,
		0,0,97,101,5,49,0,0,98,100,3,6,3,0,99,98,1,0,0,0,100,103,1,0,0,0,101,99,
		1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,103,101,1,0,0,0,104,105,5,50,0,
		0,105,5,1,0,0,0,106,107,3,8,4,0,107,108,5,73,0,0,108,7,1,0,0,0,109,114,
		3,24,12,0,110,114,3,10,5,0,111,114,3,12,6,0,112,114,3,14,7,0,113,109,1,
		0,0,0,113,110,1,0,0,0,113,111,1,0,0,0,113,112,1,0,0,0,114,9,1,0,0,0,115,
		116,3,46,23,0,116,122,5,92,0,0,117,118,5,47,0,0,118,119,5,93,0,0,119,123,
		5,48,0,0,120,121,5,75,0,0,121,123,3,28,14,0,122,117,1,0,0,0,122,120,1,
		0,0,0,123,11,1,0,0,0,124,125,3,26,13,0,125,126,5,75,0,0,126,127,3,28,14,
		0,127,13,1,0,0,0,128,129,3,46,23,0,129,130,5,92,0,0,130,15,1,0,0,0,131,
		136,3,20,10,0,132,133,5,92,0,0,133,134,5,75,0,0,134,136,3,16,8,0,135,131,
		1,0,0,0,135,132,1,0,0,0,136,17,1,0,0,0,137,150,3,40,20,0,138,146,5,51,
		0,0,139,146,1,0,0,0,140,146,5,52,0,0,141,146,1,0,0,0,142,146,5,53,0,0,
		143,146,1,0,0,0,144,146,5,54,0,0,145,138,1,0,0,0,145,139,1,0,0,0,145,140,
		1,0,0,0,145,141,1,0,0,0,145,142,1,0,0,0,145,143,1,0,0,0,145,144,1,0,0,
		0,146,147,1,0,0,0,147,149,3,40,20,0,148,145,1,0,0,0,149,152,1,0,0,0,150,
		148,1,0,0,0,150,151,1,0,0,0,151,19,1,0,0,0,152,150,1,0,0,0,153,162,3,18,
		9,0,154,158,5,86,0,0,155,158,1,0,0,0,156,158,5,87,0,0,157,154,1,0,0,0,
		157,155,1,0,0,0,157,156,1,0,0,0,158,159,1,0,0,0,159,161,3,18,9,0,160,157,
		1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,21,1,0,0,0,
		164,162,1,0,0,0,165,166,3,36,18,0,166,167,5,47,0,0,167,168,3,28,14,0,168,
		169,5,48,0,0,169,23,1,0,0,0,170,171,5,22,0,0,171,172,3,28,14,0,172,25,
		1,0,0,0,173,174,3,28,14,0,174,27,1,0,0,0,175,176,3,16,8,0,176,29,1,0,0,
		0,177,178,3,32,16,0,178,31,1,0,0,0,179,183,3,34,17,0,180,181,7,0,0,0,181,
		183,3,30,15,0,182,179,1,0,0,0,182,180,1,0,0,0,183,33,1,0,0,0,184,187,3,
		36,18,0,185,187,3,22,11,0,186,184,1,0,0,0,186,185,1,0,0,0,187,35,1,0,0,
		0,188,195,3,38,19,0,189,195,3,44,22,0,190,191,5,45,0,0,191,192,3,28,14,
		0,192,193,5,46,0,0,193,195,1,0,0,0,194,188,1,0,0,0,194,189,1,0,0,0,194,
		190,1,0,0,0,195,37,1,0,0,0,196,197,7,1,0,0,197,39,1,0,0,0,198,203,3,42,
		21,0,199,200,7,2,0,0,200,202,3,42,21,0,201,199,1,0,0,0,202,205,1,0,0,0,
		203,201,1,0,0,0,203,204,1,0,0,0,204,41,1,0,0,0,205,203,1,0,0,0,206,211,
		3,30,15,0,207,208,7,3,0,0,208,210,3,30,15,0,209,207,1,0,0,0,210,213,1,
		0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,43,1,0,0,0,213,211,1,0,0,0,214,
		215,5,92,0,0,215,45,1,0,0,0,216,218,5,5,0,0,217,216,1,0,0,0,217,218,1,
		0,0,0,218,221,1,0,0,0,219,222,3,48,24,0,220,222,3,50,25,0,221,219,1,0,
		0,0,221,220,1,0,0,0,222,224,1,0,0,0,223,225,5,61,0,0,224,223,1,0,0,0,224,
		225,1,0,0,0,225,227,1,0,0,0,226,228,5,5,0,0,227,226,1,0,0,0,227,228,1,
		0,0,0,228,47,1,0,0,0,229,230,5,92,0,0,230,49,1,0,0,0,231,235,5,32,0,0,
		232,235,5,38,0,0,233,235,3,52,26,0,234,231,1,0,0,0,234,232,1,0,0,0,234,
		233,1,0,0,0,235,51,1,0,0,0,236,250,3,54,27,0,237,250,3,56,28,0,238,250,
		3,58,29,0,239,250,3,60,30,0,240,250,3,62,31,0,241,250,3,64,32,0,242,250,
		3,66,33,0,243,250,3,68,34,0,244,250,3,70,35,0,245,250,3,72,36,0,246,250,
		3,74,37,0,247,250,3,76,38,0,248,250,3,78,39,0,249,236,1,0,0,0,249,237,
		1,0,0,0,249,238,1,0,0,0,249,239,1,0,0,0,249,240,1,0,0,0,249,241,1,0,0,
		0,249,242,1,0,0,0,249,243,1,0,0,0,249,244,1,0,0,0,249,245,1,0,0,0,249,
		246,1,0,0,0,249,247,1,0,0,0,249,248,1,0,0,0,250,53,1,0,0,0,251,255,5,4,
		0,0,252,253,5,31,0,0,253,255,5,4,0,0,254,251,1,0,0,0,254,252,1,0,0,0,255,
		55,1,0,0,0,256,257,5,24,0,0,257,258,5,4,0,0,258,57,1,0,0,0,259,260,5,31,
		0,0,260,265,5,23,0,0,261,262,5,31,0,0,262,263,5,23,0,0,263,265,5,18,0,
		0,264,259,1,0,0,0,264,261,1,0,0,0,265,59,1,0,0,0,266,275,5,23,0,0,267,
		268,5,23,0,0,268,275,5,18,0,0,269,270,5,24,0,0,270,275,5,23,0,0,271,272,
		5,24,0,0,272,273,5,23,0,0,273,275,5,18,0,0,274,266,1,0,0,0,274,267,1,0,
		0,0,274,269,1,0,0,0,274,271,1,0,0,0,275,61,1,0,0,0,276,280,5,31,0,0,277,
		278,5,31,0,0,278,280,5,18,0,0,279,276,1,0,0,0,279,277,1,0,0,0,280,63,1,
		0,0,0,281,286,5,18,0,0,282,286,5,24,0,0,283,284,5,24,0,0,284,286,5,18,
		0,0,285,281,1,0,0,0,285,282,1,0,0,0,285,283,1,0,0,0,286,65,1,0,0,0,287,
		288,5,31,0,0,288,293,5,19,0,0,289,290,5,31,0,0,290,291,5,19,0,0,291,293,
		5,18,0,0,292,287,1,0,0,0,292,289,1,0,0,0,293,67,1,0,0,0,294,303,5,19,0,
		0,295,296,5,19,0,0,296,303,5,18,0,0,297,298,5,24,0,0,298,303,5,19,0,0,
		299,300,5,24,0,0,300,301,5,19,0,0,301,303,5,18,0,0,302,294,1,0,0,0,302,
		295,1,0,0,0,302,297,1,0,0,0,302,299,1,0,0,0,303,69,1,0,0,0,304,305,5,31,
		0,0,305,306,5,19,0,0,306,312,5,19,0,0,307,308,5,31,0,0,308,309,5,19,0,
		0,309,310,5,19,0,0,310,312,5,18,0,0,311,304,1,0,0,0,311,307,1,0,0,0,312,
		71,1,0,0,0,313,314,5,19,0,0,314,326,5,19,0,0,315,316,5,19,0,0,316,317,
		5,19,0,0,317,326,5,18,0,0,318,319,5,24,0,0,319,320,5,19,0,0,320,326,5,
		19,0,0,321,322,5,24,0,0,322,323,5,19,0,0,323,324,5,19,0,0,324,326,5,18,
		0,0,325,313,1,0,0,0,325,315,1,0,0,0,325,318,1,0,0,0,325,321,1,0,0,0,326,
		73,1,0,0,0,327,328,5,13,0,0,328,75,1,0,0,0,329,330,5,9,0,0,330,77,1,0,
		0,0,331,332,5,19,0,0,332,333,5,9,0,0,333,79,1,0,0,0,334,335,5,91,0,0,335,
		336,5,93,0,0,336,340,5,95,0,0,337,339,5,93,0,0,338,337,1,0,0,0,339,342,
		1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,81,1,0,0,0,342,340,1,0,0,0,
		31,84,86,101,113,122,135,145,150,157,162,182,186,194,203,211,217,221,224,
		227,234,249,254,264,274,279,285,292,302,311,325,340
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DankleC
