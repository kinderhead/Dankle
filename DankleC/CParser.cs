//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DankleC {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class CParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, Auto=20, Break=21, Case=22, Char=23, Const=24, Continue=25, 
		Default=26, Do=27, Double=28, Else=29, Enum=30, Extern=31, Float=32, For=33, 
		Goto=34, If=35, Inline=36, Int=37, Long=38, Register=39, Restrict=40, 
		Return=41, Short=42, Signed=43, Sizeof=44, Static=45, Struct=46, Switch=47, 
		Typedef=48, Union=49, Unsigned=50, Void=51, Volatile=52, While=53, Alignas=54, 
		Alignof=55, Atomic=56, Bool=57, Complex=58, Generic=59, Imaginary=60, 
		Noreturn=61, StaticAssert=62, ThreadLocal=63, LeftParen=64, RightParen=65, 
		LeftBracket=66, RightBracket=67, LeftBrace=68, RightBrace=69, Less=70, 
		LessEqual=71, Greater=72, GreaterEqual=73, LeftShift=74, RightShift=75, 
		Plus=76, PlusPlus=77, Minus=78, MinusMinus=79, Star=80, Div=81, Mod=82, 
		And=83, Or=84, AndAnd=85, OrOr=86, Caret=87, Not=88, Tilde=89, Question=90, 
		Colon=91, Semi=92, Comma=93, Assign=94, StarAssign=95, DivAssign=96, ModAssign=97, 
		PlusAssign=98, MinusAssign=99, LeftShiftAssign=100, RightShiftAssign=101, 
		AndAssign=102, XorAssign=103, OrAssign=104, Equal=105, NotEqual=106, Arrow=107, 
		Dot=108, Ellipsis=109, Hashtag=110, Identifier=111, Constant=112, DigitSequence=113, 
		StringLiteral=114, AsmBlock=115, Whitespace=116, Newline=117, BlockComment=118, 
		LineComment=119;
	public const int
		RULE_primaryExpression = 0, RULE_genericSelection = 1, RULE_genericAssocList = 2, 
		RULE_genericAssociation = 3, RULE_postfixExpression = 4, RULE_argumentExpressionList = 5, 
		RULE_unaryExpression = 6, RULE_unaryOperator = 7, RULE_castExpression = 8, 
		RULE_multiplicativeExpression = 9, RULE_additiveExpression = 10, RULE_shiftExpression = 11, 
		RULE_relationalExpression = 12, RULE_equalityExpression = 13, RULE_andExpression = 14, 
		RULE_exclusiveOrExpression = 15, RULE_inclusiveOrExpression = 16, RULE_logicalAndExpression = 17, 
		RULE_logicalOrExpression = 18, RULE_conditionalExpression = 19, RULE_assignmentExpression = 20, 
		RULE_assignmentOperator = 21, RULE_expression = 22, RULE_constantExpression = 23, 
		RULE_declaration = 24, RULE_declarationSpecifiers = 25, RULE_declarationSpecifiers2 = 26, 
		RULE_declarationSpecifier = 27, RULE_initDeclaratorList = 28, RULE_initDeclarator = 29, 
		RULE_storageClassSpecifier = 30, RULE_typeSpecifier = 31, RULE_structOrUnionSpecifier = 32, 
		RULE_structOrUnion = 33, RULE_structDeclarationList = 34, RULE_structDeclaration = 35, 
		RULE_specifierQualifierList = 36, RULE_structDeclaratorList = 37, RULE_structDeclarator = 38, 
		RULE_enumSpecifier = 39, RULE_enumeratorList = 40, RULE_enumerator = 41, 
		RULE_enumerationConstant = 42, RULE_atomicTypeSpecifier = 43, RULE_typeQualifier = 44, 
		RULE_functionSpecifier = 45, RULE_alignmentSpecifier = 46, RULE_declarator = 47, 
		RULE_directDeclarator = 48, RULE_vcSpecificModifer = 49, RULE_gccDeclaratorExtension = 50, 
		RULE_gccAttributeSpecifier = 51, RULE_gccAttributeList = 52, RULE_gccAttribute = 53, 
		RULE_nestedParenthesesBlock = 54, RULE_pointer = 55, RULE_typeQualifierList = 56, 
		RULE_parameterTypeList = 57, RULE_parameterList = 58, RULE_parameterDeclaration = 59, 
		RULE_identifierList = 60, RULE_typeName = 61, RULE_abstractDeclarator = 62, 
		RULE_directAbstractDeclarator = 63, RULE_typedefName = 64, RULE_initializer = 65, 
		RULE_initializerList = 66, RULE_designation = 67, RULE_designatorList = 68, 
		RULE_designator = 69, RULE_staticAssertDeclaration = 70, RULE_statement = 71, 
		RULE_labeledStatement = 72, RULE_compoundStatement = 73, RULE_blockItemList = 74, 
		RULE_blockItem = 75, RULE_expressionStatement = 76, RULE_selectionStatement = 77, 
		RULE_iterationStatement = 78, RULE_forCondition = 79, RULE_forDeclaration = 80, 
		RULE_forExpression = 81, RULE_jumpStatement = 82, RULE_compilationUnit = 83, 
		RULE_translationUnit = 84, RULE_externalDeclaration = 85, RULE_functionDefinition = 86, 
		RULE_declarationList = 87, RULE_lineMarker = 88;
	public static readonly string[] ruleNames = {
		"primaryExpression", "genericSelection", "genericAssocList", "genericAssociation", 
		"postfixExpression", "argumentExpressionList", "unaryExpression", "unaryOperator", 
		"castExpression", "multiplicativeExpression", "additiveExpression", "shiftExpression", 
		"relationalExpression", "equalityExpression", "andExpression", "exclusiveOrExpression", 
		"inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression", 
		"conditionalExpression", "assignmentExpression", "assignmentOperator", 
		"expression", "constantExpression", "declaration", "declarationSpecifiers", 
		"declarationSpecifiers2", "declarationSpecifier", "initDeclaratorList", 
		"initDeclarator", "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
		"structOrUnion", "structDeclarationList", "structDeclaration", "specifierQualifierList", 
		"structDeclaratorList", "structDeclarator", "enumSpecifier", "enumeratorList", 
		"enumerator", "enumerationConstant", "atomicTypeSpecifier", "typeQualifier", 
		"functionSpecifier", "alignmentSpecifier", "declarator", "directDeclarator", 
		"vcSpecificModifer", "gccDeclaratorExtension", "gccAttributeSpecifier", 
		"gccAttributeList", "gccAttribute", "nestedParenthesesBlock", "pointer", 
		"typeQualifierList", "parameterTypeList", "parameterList", "parameterDeclaration", 
		"identifierList", "typeName", "abstractDeclarator", "directAbstractDeclarator", 
		"typedefName", "initializer", "initializerList", "designation", "designatorList", 
		"designator", "staticAssertDeclaration", "statement", "labeledStatement", 
		"compoundStatement", "blockItemList", "blockItem", "expressionStatement", 
		"selectionStatement", "iterationStatement", "forCondition", "forDeclaration", 
		"forExpression", "jumpStatement", "compilationUnit", "translationUnit", 
		"externalDeclaration", "functionDefinition", "declarationList", "lineMarker"
	};

	private static readonly string[] _LiteralNames = {
		null, "'__extension__'", "'__builtin_va_arg'", "'__builtin_offsetof'", 
		"'__m128'", "'__m128d'", "'__m128i'", "'__typeof__'", "'__inline__'", 
		"'__stdcall'", "'__declspec'", "'__cdecl'", "'__clrcall'", "'__fastcall'", 
		"'__thiscall'", "'__vectorcall'", "'__asm'", "'__attribute__'", "'__asm__'", 
		"'__volatile__'", "'auto'", "'break'", "'case'", "'char'", "'const'", 
		"'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", 
		"'float'", "'for'", "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", 
		"'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", 
		"'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", 
		"'volatile'", "'while'", "'_Alignas'", "'_Alignof'", "'_Atomic'", "'_Bool'", 
		"'_Complex'", "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
		"'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
		"'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", "':'", 
		"';'", "','", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'", 
		"'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "Auto", "Break", "Case", 
		"Char", "Const", "Continue", "Default", "Do", "Double", "Else", "Enum", 
		"Extern", "Float", "For", "Goto", "If", "Inline", "Int", "Long", "Register", 
		"Restrict", "Return", "Short", "Signed", "Sizeof", "Static", "Struct", 
		"Switch", "Typedef", "Union", "Unsigned", "Void", "Volatile", "While", 
		"Alignas", "Alignof", "Atomic", "Bool", "Complex", "Generic", "Imaginary", 
		"Noreturn", "StaticAssert", "ThreadLocal", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "LessEqual", 
		"Greater", "GreaterEqual", "LeftShift", "RightShift", "Plus", "PlusPlus", 
		"Minus", "MinusMinus", "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", 
		"Caret", "Not", "Tilde", "Question", "Colon", "Semi", "Comma", "Assign", 
		"StarAssign", "DivAssign", "ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign", 
		"RightShiftAssign", "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
		"Arrow", "Dot", "Ellipsis", "Hashtag", "Identifier", "Constant", "DigitSequence", 
		"StringLiteral", "AsmBlock", "Whitespace", "Newline", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "C.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(CParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(CParser.StringLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSelectionContext genericSelection() {
			return GetRuleContext<GenericSelectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_primaryExpression);
		int _la;
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179;
				Match(Constant);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 180;
					Match(StringLiteral);
					}
					}
					State = 183;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==StringLiteral );
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185;
				Match(LeftParen);
				State = 186;
				expression();
				State = 187;
				Match(RightParen);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 189;
				genericSelection();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 190;
					Match(T__0);
					}
				}

				State = 193;
				Match(LeftParen);
				State = 194;
				compoundStatement();
				State = 195;
				Match(RightParen);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 197;
				Match(T__1);
				State = 198;
				Match(LeftParen);
				State = 199;
				unaryExpression();
				State = 200;
				Match(Comma);
				State = 201;
				typeName();
				State = 202;
				Match(RightParen);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 204;
				Match(T__2);
				State = 205;
				Match(LeftParen);
				State = 206;
				typeName();
				State = 207;
				Match(Comma);
				State = 208;
				unaryExpression();
				State = 209;
				Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Generic() { return GetToken(CParser.Generic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericAssocListContext genericAssocList() {
			return GetRuleContext<GenericAssocListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		public GenericSelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSelection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericSelection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericSelectionContext genericSelection() {
		GenericSelectionContext _localctx = new GenericSelectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_genericSelection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(Generic);
			State = 214;
			Match(LeftParen);
			State = 215;
			assignmentExpression();
			State = 216;
			Match(Comma);
			State = 217;
			genericAssocList();
			State = 218;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericAssocListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericAssociationContext[] genericAssociation() {
			return GetRuleContexts<GenericAssociationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericAssociationContext genericAssociation(int i) {
			return GetRuleContext<GenericAssociationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public GenericAssocListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericAssocList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericAssocList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericAssocListContext genericAssocList() {
		GenericAssocListContext _localctx = new GenericAssocListContext(Context, State);
		EnterRule(_localctx, 4, RULE_genericAssocList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			genericAssociation();
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 221;
				Match(Comma);
				State = 222;
				genericAssociation();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericAssociationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(CParser.Default, 0); }
		public GenericAssociationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericAssociation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericAssociation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericAssociationContext genericAssociation() {
		GenericAssociationContext _localctx = new GenericAssociationContext(Context, State);
		EnterRule(_localctx, 6, RULE_genericAssociation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case Char:
			case Const:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Restrict:
			case Short:
			case Signed:
			case Struct:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Atomic:
			case Bool:
			case Complex:
			case Identifier:
				{
				State = 228;
				typeName();
				}
				break;
			case Default:
				{
				State = 229;
				Match(Default);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 232;
			Match(Colon);
			State = 233;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(CParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(CParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(CParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(CParser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftBracket() { return GetTokens(CParser.LeftBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket(int i) {
			return GetToken(CParser.LeftBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightBracket() { return GetTokens(CParser.RightBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket(int i) {
			return GetToken(CParser.RightBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(CParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(CParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PlusPlus() { return GetTokens(CParser.PlusPlus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus(int i) {
			return GetToken(CParser.PlusPlus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MinusMinus() { return GetTokens(CParser.MinusMinus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus(int i) {
			return GetToken(CParser.MinusMinus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(CParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(CParser.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Arrow() { return GetTokens(CParser.Arrow); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow(int i) {
			return GetToken(CParser.Arrow, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionListContext[] argumentExpressionList() {
			return GetRuleContexts<ArgumentExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionListContext argumentExpressionList(int i) {
			return GetRuleContext<ArgumentExpressionListContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 235;
				primaryExpression();
				}
				break;
			case 2:
				{
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 236;
					Match(T__0);
					}
				}

				State = 239;
				Match(LeftParen);
				State = 240;
				typeName();
				State = 241;
				Match(RightParen);
				State = 242;
				Match(LeftBrace);
				State = 243;
				initializerList();
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 244;
					Match(Comma);
					}
				}

				State = 247;
				Match(RightBrace);
				}
				break;
			}
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 26388279107589L) != 0)) {
				{
				State = 264;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LeftBracket:
					{
					State = 251;
					Match(LeftBracket);
					State = 252;
					expression();
					State = 253;
					Match(RightBracket);
					}
					break;
				case LeftParen:
					{
					State = 255;
					Match(LeftParen);
					State = 257;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062378409985L) != 0)) {
						{
						State = 256;
						argumentExpressionList();
						}
					}

					State = 259;
					Match(RightParen);
					}
					break;
				case Arrow:
				case Dot:
					{
					State = 260;
					_la = TokenStream.LA(1);
					if ( !(_la==Arrow || _la==Dot) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 261;
					Match(Identifier);
					}
					break;
				case PlusPlus:
					{
					State = 262;
					Match(PlusPlus);
					}
					break;
				case MinusMinus:
					{
					State = 263;
					Match(MinusMinus);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public ArgumentExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionListContext argumentExpressionList() {
		ArgumentExpressionListContext _localctx = new ArgumentExpressionListContext(Context, State);
		EnterRule(_localctx, 10, RULE_argumentExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			assignmentExpression();
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 270;
				Match(Comma);
				State = 271;
				assignmentExpression();
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(CParser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sizeof() { return GetTokens(CParser.Sizeof); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sizeof(int i) {
			return GetToken(CParser.Sizeof, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Alignof() { return GetToken(CParser.Alignof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PlusPlus() { return GetTokens(CParser.PlusPlus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus(int i) {
			return GetToken(CParser.PlusPlus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MinusMinus() { return GetTokens(CParser.MinusMinus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus(int i) {
			return GetToken(CParser.MinusMinus, i);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_unaryExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 277;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & 42949672961L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 282;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case Generic:
			case LeftParen:
			case Identifier:
			case Constant:
			case StringLiteral:
				{
				State = 283;
				postfixExpression();
				}
				break;
			case Plus:
			case Minus:
			case Star:
			case And:
			case Not:
			case Tilde:
				{
				State = 284;
				unaryOperator();
				State = 285;
				castExpression();
				}
				break;
			case Sizeof:
			case Alignof:
				{
				State = 287;
				_la = TokenStream.LA(1);
				if ( !(_la==Sizeof || _la==Alignof) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 288;
				Match(LeftParen);
				State = 289;
				typeName();
				State = 290;
				Match(RightParen);
				}
				break;
			case AndAnd:
				{
				State = 292;
				Match(AndAnd);
				State = 293;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(CParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(CParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(CParser.Not, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 12437L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DigitSequence() { return GetToken(CParser.DigitSequence, 0); }
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_castExpression);
		int _la;
		try {
			State = 308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 298;
					Match(T__0);
					}
				}

				State = 301;
				Match(LeftParen);
				State = 302;
				typeName();
				State = 303;
				Match(RightParen);
				State = 304;
				castExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306;
				unaryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 307;
				Match(DigitSequence);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(CParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(CParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Div() { return GetTokens(CParser.Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div(int i) {
			return GetToken(CParser.Div, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mod() { return GetTokens(CParser.Mod); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod(int i) {
			return GetToken(CParser.Mod, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			castExpression();
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 7L) != 0)) {
				{
				{
				State = 311;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 7L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 312;
				castExpression();
				}
				}
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(CParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(CParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(CParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(CParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			multiplicativeExpression();
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 319;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 320;
				multiplicativeExpression();
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftShift() { return GetTokens(CParser.LeftShift); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShift(int i) {
			return GetToken(CParser.LeftShift, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightShift() { return GetTokens(CParser.RightShift); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShift(int i) {
			return GetToken(CParser.RightShift, i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_shiftExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			additiveExpression();
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LeftShift || _la==RightShift) {
				{
				{
				State = 327;
				_la = TokenStream.LA(1);
				if ( !(_la==LeftShift || _la==RightShift) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 328;
				additiveExpression();
				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(CParser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(CParser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CParser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessEqual() { return GetTokens(CParser.LessEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual(int i) {
			return GetToken(CParser.LessEqual, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterEqual() { return GetTokens(CParser.GreaterEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual(int i) {
			return GetToken(CParser.GreaterEqual, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			shiftExpression();
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 15L) != 0)) {
				{
				{
				State = 335;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 15L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 336;
				shiftExpression();
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equal() { return GetTokens(CParser.Equal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal(int i) {
			return GetToken(CParser.Equal, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NotEqual() { return GetTokens(CParser.NotEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual(int i) {
			return GetToken(CParser.NotEqual, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			relationalExpression();
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Equal || _la==NotEqual) {
				{
				{
				State = 343;
				_la = TokenStream.LA(1);
				if ( !(_la==Equal || _la==NotEqual) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 344;
				relationalExpression();
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(CParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(CParser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			equalityExpression();
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==And) {
				{
				{
				State = 351;
				Match(And);
				State = 352;
				equalityExpression();
				}
				}
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Caret() { return GetTokens(CParser.Caret); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret(int i) {
			return GetToken(CParser.Caret, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_exclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			andExpression();
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Caret) {
				{
				{
				State = 359;
				Match(Caret);
				State = 360;
				andExpression();
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(CParser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(CParser.Or, i);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_inclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			exclusiveOrExpression();
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Or) {
				{
				{
				State = 367;
				Match(Or);
				State = 368;
				exclusiveOrExpression();
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext[] inclusiveOrExpression() {
			return GetRuleContexts<InclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression(int i) {
			return GetRuleContext<InclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndAnd() { return GetTokens(CParser.AndAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd(int i) {
			return GetToken(CParser.AndAnd, i);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_logicalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			inclusiveOrExpression();
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AndAnd) {
				{
				{
				State = 375;
				Match(AndAnd);
				State = 376;
				inclusiveOrExpression();
				}
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext[] logicalAndExpression() {
			return GetRuleContexts<LogicalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression(int i) {
			return GetRuleContext<LogicalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOr() { return GetTokens(CParser.OrOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr(int i) {
			return GetToken(CParser.OrOr, i);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_logicalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			logicalAndExpression();
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OrOr) {
				{
				{
				State = 383;
				Match(OrOr);
				State = 384;
				logicalAndExpression();
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(CParser.Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_conditionalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			logicalOrExpression();
			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question) {
				{
				State = 391;
				Match(Question);
				State = 392;
				expression();
				State = 393;
				Match(Colon);
				State = 394;
				conditionalExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DigitSequence() { return GetToken(CParser.DigitSequence, 0); }
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignmentExpression);
		try {
			State = 404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 398;
				conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 399;
				unaryExpression();
				State = 400;
				assignmentOperator();
				State = 401;
				assignmentExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 403;
				Match(DigitSequence);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StarAssign() { return GetToken(CParser.StarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivAssign() { return GetToken(CParser.DivAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModAssign() { return GetToken(CParser.ModAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(CParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(CParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftAssign() { return GetToken(CParser.LeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftAssign() { return GetToken(CParser.RightShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAssign() { return GetToken(CParser.AndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XorAssign() { return GetToken(CParser.XorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrAssign() { return GetToken(CParser.OrAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 2047L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			assignmentExpression();
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 409;
				Match(Comma);
				State = 410;
				assignmentExpression();
				}
				}
				State = 415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			conditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_declaration);
		int _la;
		try {
			State = 425;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__16:
			case Auto:
			case Char:
			case Const:
			case Double:
			case Enum:
			case Extern:
			case Float:
			case Inline:
			case Int:
			case Long:
			case Register:
			case Restrict:
			case Short:
			case Signed:
			case Static:
			case Struct:
			case Typedef:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Alignas:
			case Atomic:
			case Bool:
			case Complex:
			case Noreturn:
			case ThreadLocal:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418;
				declarationSpecifiers();
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 64000L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 140737496809473L) != 0)) {
					{
					State = 419;
					initDeclaratorList();
					}
				}

				State = 422;
				Match(Semi);
				}
				break;
			case StaticAssert:
				EnterOuterAlt(_localctx, 2);
				{
				State = 424;
				staticAssertDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext[] declarationSpecifier() {
			return GetRuleContexts<DeclarationSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier(int i) {
			return GetRuleContext<DeclarationSpecifierContext>(i);
		}
		public DeclarationSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifiersContext declarationSpecifiers() {
		DeclarationSpecifiersContext _localctx = new DeclarationSpecifiersContext(Context, State);
		EnterRule(_localctx, 50, RULE_declarationSpecifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 427;
					declarationSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 430;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifiers2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext[] declarationSpecifier() {
			return GetRuleContexts<DeclarationSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier(int i) {
			return GetRuleContext<DeclarationSpecifierContext>(i);
		}
		public DeclarationSpecifiers2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifiers2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifiers2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifiers2Context declarationSpecifiers2() {
		DeclarationSpecifiers2Context _localctx = new DeclarationSpecifiers2Context(Context, State);
		EnterRule(_localctx, 52, RULE_declarationSpecifiers2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 432;
				declarationSpecifier();
				}
				}
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -6386264861217519630L) != 0) || _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorageClassSpecifierContext storageClassSpecifier() {
			return GetRuleContext<StorageClassSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSpecifierContext functionSpecifier() {
			return GetRuleContext<FunctionSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlignmentSpecifierContext alignmentSpecifier() {
			return GetRuleContext<AlignmentSpecifierContext>(0);
		}
		public DeclarationSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifierContext declarationSpecifier() {
		DeclarationSpecifierContext _localctx = new DeclarationSpecifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_declarationSpecifier);
		try {
			State = 442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 437;
				storageClassSpecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438;
				typeSpecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 439;
				typeQualifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 440;
				functionSpecifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 441;
				alignmentSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext[] initDeclarator() {
			return GetRuleContexts<InitDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext initDeclarator(int i) {
			return GetRuleContext<InitDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public InitDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorListContext initDeclaratorList() {
		InitDeclaratorListContext _localctx = new InitDeclaratorListContext(Context, State);
		EnterRule(_localctx, 56, RULE_initDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			initDeclarator();
			State = 449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 445;
				Match(Comma);
				State = 446;
				initDeclarator();
				}
				}
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorContext initDeclarator() {
		InitDeclaratorContext _localctx = new InitDeclaratorContext(Context, State);
		EnterRule(_localctx, 58, RULE_initDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			declarator();
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 453;
				Match(Assign);
				State = 454;
				initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageClassSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typedef() { return GetToken(CParser.Typedef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(CParser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ThreadLocal() { return GetToken(CParser.ThreadLocal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Auto() { return GetToken(CParser.Auto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Register() { return GetToken(CParser.Register, 0); }
		public StorageClassSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageClassSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageClassSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StorageClassSpecifierContext storageClassSpecifier() {
		StorageClassSpecifierContext _localctx = new StorageClassSpecifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_storageClassSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223054825601630208L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(CParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(CParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CParser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(CParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Complex() { return GetToken(CParser.Complex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicTypeSpecifierContext atomicTypeSpecifier() {
			return GetRuleContext<AtomicTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructOrUnionSpecifierContext structOrUnionSpecifier() {
			return GetRuleContext<StructOrUnionSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecifierContext enumSpecifier() {
			return GetRuleContext<EnumSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedefNameContext typedefName() {
			return GetRuleContext<TypedefNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeSpecifier);
		int _la;
		try {
			State = 486;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 459;
				Match(Void);
				}
				break;
			case Char:
				EnterOuterAlt(_localctx, 2);
				{
				State = 460;
				Match(Char);
				}
				break;
			case Short:
				EnterOuterAlt(_localctx, 3);
				{
				State = 461;
				Match(Short);
				}
				break;
			case Int:
				EnterOuterAlt(_localctx, 4);
				{
				State = 462;
				Match(Int);
				}
				break;
			case Long:
				EnterOuterAlt(_localctx, 5);
				{
				State = 463;
				Match(Long);
				}
				break;
			case Float:
				EnterOuterAlt(_localctx, 6);
				{
				State = 464;
				Match(Float);
				}
				break;
			case Double:
				EnterOuterAlt(_localctx, 7);
				{
				State = 465;
				Match(Double);
				}
				break;
			case Signed:
				EnterOuterAlt(_localctx, 8);
				{
				State = 466;
				Match(Signed);
				}
				break;
			case Unsigned:
				EnterOuterAlt(_localctx, 9);
				{
				State = 467;
				Match(Unsigned);
				}
				break;
			case Bool:
				EnterOuterAlt(_localctx, 10);
				{
				State = 468;
				Match(Bool);
				}
				break;
			case Complex:
				EnterOuterAlt(_localctx, 11);
				{
				State = 469;
				Match(Complex);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 12);
				{
				State = 470;
				Match(T__3);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 13);
				{
				State = 471;
				Match(T__4);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 14);
				{
				State = 472;
				Match(T__5);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 15);
				{
				State = 473;
				Match(T__0);
				State = 474;
				Match(LeftParen);
				State = 475;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 112L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 476;
				Match(RightParen);
				}
				break;
			case Atomic:
				EnterOuterAlt(_localctx, 16);
				{
				State = 477;
				atomicTypeSpecifier();
				}
				break;
			case Struct:
			case Union:
				EnterOuterAlt(_localctx, 17);
				{
				State = 478;
				structOrUnionSpecifier();
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 18);
				{
				State = 479;
				enumSpecifier();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 19);
				{
				State = 480;
				typedefName();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 20);
				{
				State = 481;
				Match(T__6);
				State = 482;
				Match(LeftParen);
				State = 483;
				constantExpression();
				State = 484;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructOrUnionSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructOrUnionContext structOrUnion() {
			return GetRuleContext<StructOrUnionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationListContext structDeclarationList() {
			return GetRuleContext<StructDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public StructOrUnionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structOrUnionSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructOrUnionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructOrUnionSpecifierContext structOrUnionSpecifier() {
		StructOrUnionSpecifierContext _localctx = new StructOrUnionSpecifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_structOrUnionSpecifier);
		int _la;
		try {
			State = 499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 488;
				structOrUnion();
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 489;
					Match(Identifier);
					}
				}

				State = 492;
				Match(LeftBrace);
				State = 493;
				structDeclarationList();
				State = 494;
				Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 496;
				structOrUnion();
				State = 497;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructOrUnionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Union() { return GetToken(CParser.Union, 0); }
		public StructOrUnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structOrUnion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructOrUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructOrUnionContext structOrUnion() {
		StructOrUnionContext _localctx = new StructOrUnionContext(Context, State);
		EnterRule(_localctx, 66, RULE_structOrUnion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			_la = TokenStream.LA(1);
			if ( !(_la==Struct || _la==Union) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext[] structDeclaration() {
			return GetRuleContexts<StructDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration(int i) {
			return GetRuleContext<StructDeclarationContext>(i);
		}
		public StructDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationListContext structDeclarationList() {
		StructDeclarationListContext _localctx = new StructDeclarationListContext(Context, State);
		EnterRule(_localctx, 68, RULE_structDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 503;
				structDeclaration();
				}
				}
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 5124618506368712946L) != 0) || _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_structDeclaration);
		try {
			State = 516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 508;
				specifierQualifierList();
				State = 509;
				structDeclaratorList();
				State = 510;
				Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 512;
				specifierQualifierList();
				State = 513;
				Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 515;
				staticAssertDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecifierQualifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		public SpecifierQualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specifierQualifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecifierQualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecifierQualifierListContext specifierQualifierList() {
		SpecifierQualifierListContext _localctx = new SpecifierQualifierListContext(Context, State);
		EnterRule(_localctx, 72, RULE_specifierQualifierList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 518;
				typeSpecifier();
				}
				break;
			case 2:
				{
				State = 519;
				typeQualifier();
				}
				break;
			}
			State = 523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 522;
				specifierQualifierList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclaratorContext[] structDeclarator() {
			return GetRuleContexts<StructDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclaratorContext structDeclarator(int i) {
			return GetRuleContext<StructDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public StructDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclaratorListContext structDeclaratorList() {
		StructDeclaratorListContext _localctx = new StructDeclaratorListContext(Context, State);
		EnterRule(_localctx, 74, RULE_structDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			structDeclarator();
			State = 530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 526;
				Match(Comma);
				State = 527;
				structDeclarator();
				}
				}
				State = 532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public StructDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclaratorContext structDeclarator() {
		StructDeclaratorContext _localctx = new StructDeclaratorContext(Context, State);
		EnterRule(_localctx, 76, RULE_structDeclarator);
		int _la;
		try {
			State = 539;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533;
				declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 64000L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 140737496809473L) != 0)) {
					{
					State = 534;
					declarator();
					}
				}

				State = 537;
				Match(Colon);
				State = 538;
				constantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(CParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		public EnumSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecifierContext enumSpecifier() {
		EnumSpecifierContext _localctx = new EnumSpecifierContext(Context, State);
		EnterRule(_localctx, 78, RULE_enumSpecifier);
		int _la;
		try {
			State = 554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 541;
				Match(Enum);
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 542;
					Match(Identifier);
					}
				}

				State = 545;
				Match(LeftBrace);
				State = 546;
				enumeratorList();
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 547;
					Match(Comma);
					}
				}

				State = 550;
				Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552;
				Match(Enum);
				State = 553;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext[] enumerator() {
			return GetRuleContexts<EnumeratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext enumerator(int i) {
			return GetRuleContext<EnumeratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public EnumeratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeratorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorListContext enumeratorList() {
		EnumeratorListContext _localctx = new EnumeratorListContext(Context, State);
		EnterRule(_localctx, 80, RULE_enumeratorList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			enumerator();
			State = 561;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 557;
					Match(Comma);
					State = 558;
					enumerator();
					}
					} 
				}
				State = 563;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationConstantContext enumerationConstant() {
			return GetRuleContext<EnumerationConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 82, RULE_enumerator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			enumerationConstant();
			State = 567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 565;
				Match(Assign);
				State = 566;
				constantExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public EnumerationConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationConstantContext enumerationConstant() {
		EnumerationConstantContext _localctx = new EnumerationConstantContext(Context, State);
		EnterRule(_localctx, 84, RULE_enumerationConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Atomic() { return GetToken(CParser.Atomic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		public AtomicTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomicTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomicTypeSpecifierContext atomicTypeSpecifier() {
		AtomicTypeSpecifierContext _localctx = new AtomicTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 86, RULE_atomicTypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			Match(Atomic);
			State = 572;
			Match(LeftParen);
			State = 573;
			typeName();
			State = 574;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Restrict() { return GetToken(CParser.Restrict, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volatile() { return GetToken(CParser.Volatile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Atomic() { return GetToken(CParser.Atomic, 0); }
		public TypeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualifierContext typeQualifier() {
		TypeQualifierContext _localctx = new TypeQualifierContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(CParser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noreturn() { return GetToken(CParser.Noreturn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeSpecifierContext gccAttributeSpecifier() {
			return GetRuleContext<GccAttributeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		public FunctionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSpecifierContext functionSpecifier() {
		FunctionSpecifierContext _localctx = new FunctionSpecifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_functionSpecifier);
		try {
			State = 587;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Inline:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578;
				Match(Inline);
				}
				break;
			case Noreturn:
				EnterOuterAlt(_localctx, 2);
				{
				State = 579;
				Match(Noreturn);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 580;
				Match(T__7);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 4);
				{
				State = 581;
				Match(T__8);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 5);
				{
				State = 582;
				gccAttributeSpecifier();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 6);
				{
				State = 583;
				Match(T__9);
				State = 584;
				Match(LeftParen);
				State = 585;
				Match(Identifier);
				State = 586;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignmentSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Alignas() { return GetToken(CParser.Alignas, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public AlignmentSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignmentSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlignmentSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlignmentSpecifierContext alignmentSpecifier() {
		AlignmentSpecifierContext _localctx = new AlignmentSpecifierContext(Context, State);
		EnterRule(_localctx, 92, RULE_alignmentSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(Alignas);
			State = 590;
			Match(LeftParen);
			State = 593;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 591;
				typeName();
				}
				break;
			case 2:
				{
				State = 592;
				constantExpression();
				}
				break;
			}
			State = 595;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext[] gccDeclaratorExtension() {
			return GetRuleContexts<GccDeclaratorExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext gccDeclaratorExtension(int i) {
			return GetRuleContext<GccDeclaratorExtensionContext>(i);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 94, RULE_declarator);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star || _la==Caret) {
				{
				State = 597;
				pointer();
				}
			}

			State = 600;
			directDeclarator(0);
			State = 604;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 601;
					gccDeclaratorExtension();
					}
					} 
				}
				State = 606;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DigitSequence() { return GetToken(CParser.DigitSequence, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VcSpecificModiferContext vcSpecificModifer() {
			return GetRuleContext<VcSpecificModiferContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterTypeListContext parameterTypeList() {
			return GetRuleContext<ParameterTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public DirectDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectDeclaratorContext directDeclarator() {
		return directDeclarator(0);
	}

	private DirectDeclaratorContext directDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DirectDeclaratorContext _localctx = new DirectDeclaratorContext(Context, _parentState);
		DirectDeclaratorContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_directDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 608;
				Match(Identifier);
				}
				break;
			case 2:
				{
				State = 609;
				Match(LeftParen);
				State = 610;
				declarator();
				State = 611;
				Match(RightParen);
				}
				break;
			case 3:
				{
				State = 613;
				Match(Identifier);
				State = 614;
				Match(Colon);
				State = 615;
				Match(DigitSequence);
				}
				break;
			case 4:
				{
				State = 616;
				vcSpecificModifer();
				State = 617;
				Match(Identifier);
				}
				break;
			case 5:
				{
				State = 619;
				Match(LeftParen);
				State = 620;
				vcSpecificModifer();
				State = 621;
				declarator();
				State = 622;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 671;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 669;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 626;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 627;
						Match(LeftBracket);
						State = 629;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
							{
							State = 628;
							typeQualifierList();
							}
						}

						State = 632;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062378409985L) != 0)) {
							{
							State = 631;
							assignmentExpression();
							}
						}

						State = 634;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 635;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 636;
						Match(LeftBracket);
						State = 637;
						Match(Static);
						State = 639;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
							{
							State = 638;
							typeQualifierList();
							}
						}

						State = 641;
						assignmentExpression();
						State = 642;
						Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 644;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 645;
						Match(LeftBracket);
						State = 646;
						typeQualifierList();
						State = 647;
						Match(Static);
						State = 648;
						assignmentExpression();
						State = 649;
						Match(RightBracket);
						}
						break;
					case 4:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 651;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 652;
						Match(LeftBracket);
						State = 654;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
							{
							State = 653;
							typeQualifierList();
							}
						}

						State = 656;
						Match(Star);
						State = 657;
						Match(RightBracket);
						}
						break;
					case 5:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 658;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 659;
						Match(LeftParen);
						State = 660;
						parameterTypeList();
						State = 661;
						Match(RightParen);
						}
						break;
					case 6:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 663;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 664;
						Match(LeftParen);
						State = 666;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Identifier) {
							{
							State = 665;
							identifierList();
							}
						}

						State = 668;
						Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 673;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VcSpecificModiferContext : ParserRuleContext {
		public VcSpecificModiferContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vcSpecificModifer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVcSpecificModifer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VcSpecificModiferContext vcSpecificModifer() {
		VcSpecificModiferContext _localctx = new VcSpecificModiferContext(Context, State);
		EnterRule(_localctx, 98, RULE_vcSpecificModifer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 64000L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GccDeclaratorExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(CParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(CParser.StringLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeSpecifierContext gccAttributeSpecifier() {
			return GetRuleContext<GccAttributeSpecifierContext>(0);
		}
		public GccDeclaratorExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gccDeclaratorExtension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGccDeclaratorExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GccDeclaratorExtensionContext gccDeclaratorExtension() {
		GccDeclaratorExtensionContext _localctx = new GccDeclaratorExtensionContext(Context, State);
		EnterRule(_localctx, 100, RULE_gccDeclaratorExtension);
		int _la;
		try {
			State = 685;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 676;
				Match(T__15);
				State = 677;
				Match(LeftParen);
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 678;
					Match(StringLiteral);
					}
					}
					State = 681;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==StringLiteral );
				State = 683;
				Match(RightParen);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 684;
				gccAttributeSpecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GccAttributeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(CParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(CParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeListContext gccAttributeList() {
			return GetRuleContext<GccAttributeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(CParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(CParser.RightParen, i);
		}
		public GccAttributeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gccAttributeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGccAttributeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GccAttributeSpecifierContext gccAttributeSpecifier() {
		GccAttributeSpecifierContext _localctx = new GccAttributeSpecifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_gccAttributeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			Match(T__16);
			State = 688;
			Match(LeftParen);
			State = 689;
			Match(LeftParen);
			State = 690;
			gccAttributeList();
			State = 691;
			Match(RightParen);
			State = 692;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GccAttributeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeContext[] gccAttribute() {
			return GetRuleContexts<GccAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeContext gccAttribute(int i) {
			return GetRuleContext<GccAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public GccAttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gccAttributeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGccAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GccAttributeListContext gccAttributeList() {
		GccAttributeListContext _localctx = new GccAttributeListContext(Context, State);
		EnterRule(_localctx, 104, RULE_gccAttributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 18014398375264255L) != 0)) {
				{
				State = 694;
				gccAttribute();
				}
			}

			State = 703;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 697;
				Match(Comma);
				State = 699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 18014398375264255L) != 0)) {
					{
					State = 698;
					gccAttribute();
					}
				}

				}
				}
				State = 705;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GccAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(CParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(CParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(CParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(CParser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public GccAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gccAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGccAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GccAttributeContext gccAttribute() {
		GccAttributeContext _localctx = new GccAttributeContext(Context, State);
		EnterRule(_localctx, 106, RULE_gccAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			_la = TokenStream.LA(1);
			if ( _la <= 0 || (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 536870915L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 707;
				Match(LeftParen);
				State = 709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062378409985L) != 0)) {
					{
					State = 708;
					argumentExpressionList();
					}
				}

				State = 711;
				Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedParenthesesBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(CParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(CParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedParenthesesBlockContext[] nestedParenthesesBlock() {
			return GetRuleContexts<NestedParenthesesBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedParenthesesBlockContext nestedParenthesesBlock(int i) {
			return GetRuleContext<NestedParenthesesBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(CParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(CParser.RightParen, i);
		}
		public NestedParenthesesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedParenthesesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedParenthesesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedParenthesesBlockContext nestedParenthesesBlock() {
		NestedParenthesesBlockContext _localctx = new NestedParenthesesBlockContext(Context, State);
		EnterRule(_localctx, 108, RULE_nestedParenthesesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 72057594037927933L) != 0)) {
				{
				State = 719;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__2:
				case T__3:
				case T__4:
				case T__5:
				case T__6:
				case T__7:
				case T__8:
				case T__9:
				case T__10:
				case T__11:
				case T__12:
				case T__13:
				case T__14:
				case T__15:
				case T__16:
				case T__17:
				case T__18:
				case Auto:
				case Break:
				case Case:
				case Char:
				case Const:
				case Continue:
				case Default:
				case Do:
				case Double:
				case Else:
				case Enum:
				case Extern:
				case Float:
				case For:
				case Goto:
				case If:
				case Inline:
				case Int:
				case Long:
				case Register:
				case Restrict:
				case Return:
				case Short:
				case Signed:
				case Sizeof:
				case Static:
				case Struct:
				case Switch:
				case Typedef:
				case Union:
				case Unsigned:
				case Void:
				case Volatile:
				case While:
				case Alignas:
				case Alignof:
				case Atomic:
				case Bool:
				case Complex:
				case Generic:
				case Imaginary:
				case Noreturn:
				case StaticAssert:
				case ThreadLocal:
				case LeftBracket:
				case RightBracket:
				case LeftBrace:
				case RightBrace:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Semi:
				case Comma:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Ellipsis:
				case Hashtag:
				case Identifier:
				case Constant:
				case DigitSequence:
				case StringLiteral:
				case AsmBlock:
				case Whitespace:
				case Newline:
				case BlockComment:
				case LineComment:
					{
					State = 714;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==LeftParen || _la==RightParen) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case LeftParen:
					{
					State = 715;
					Match(LeftParen);
					State = 716;
					nestedParenthesesBlock();
					State = 717;
					Match(RightParen);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(CParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(CParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Caret() { return GetTokens(CParser.Caret); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret(int i) {
			return GetToken(CParser.Caret, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierListContext[] typeQualifierList() {
			return GetRuleContexts<TypeQualifierListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierListContext typeQualifierList(int i) {
			return GetRuleContext<TypeQualifierListContext>(i);
		}
		public PointerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerContext pointer() {
		PointerContext _localctx = new PointerContext(Context, State);
		EnterRule(_localctx, 110, RULE_pointer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 724;
				_la = TokenStream.LA(1);
				if ( !(_la==Star || _la==Caret) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
					{
					State = 725;
					typeQualifierList();
					}
				}

				}
				}
				State = 730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Star || _la==Caret );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext[] typeQualifier() {
			return GetRuleContexts<TypeQualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext typeQualifier(int i) {
			return GetRuleContext<TypeQualifierContext>(i);
		}
		public TypeQualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQualifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeQualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualifierListContext typeQualifierList() {
		TypeQualifierListContext _localctx = new TypeQualifierListContext(Context, State);
		EnterRule(_localctx, 112, RULE_typeQualifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 732;
				typeQualifier();
				}
				}
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CParser.Ellipsis, 0); }
		public ParameterTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterTypeListContext parameterTypeList() {
		ParameterTypeListContext _localctx = new ParameterTypeListContext(Context, State);
		EnterRule(_localctx, 114, RULE_parameterTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			parameterList();
			State = 740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 738;
				Match(Comma);
				State = 739;
				Match(Ellipsis);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext[] parameterDeclaration() {
			return GetRuleContexts<ParameterDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext parameterDeclaration(int i) {
			return GetRuleContext<ParameterDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 116, RULE_parameterList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			parameterDeclaration();
			State = 747;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 743;
					Match(Comma);
					State = 744;
					parameterDeclaration();
					}
					} 
				}
				State = 749;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiers2Context declarationSpecifiers2() {
			return GetRuleContext<DeclarationSpecifiers2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 118, RULE_parameterDeclaration);
		int _la;
		try {
			State = 757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 750;
				declarationSpecifiers();
				State = 751;
				declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 753;
				declarationSpecifiers2();
				State = 755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8454149L) != 0)) {
					{
					State = 754;
					abstractDeclarator();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(CParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(CParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 120, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			Match(Identifier);
			State = 764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 760;
				Match(Comma);
				State = 761;
				Match(Identifier);
				}
				}
				State = 766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 122, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			specifierQualifierList();
			State = 769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8454149L) != 0)) {
				{
				State = 768;
				abstractDeclarator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectAbstractDeclaratorContext directAbstractDeclarator() {
			return GetRuleContext<DirectAbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext[] gccDeclaratorExtension() {
			return GetRuleContexts<GccDeclaratorExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext gccDeclaratorExtension(int i) {
			return GetRuleContext<GccDeclaratorExtensionContext>(i);
		}
		public AbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclaratorContext abstractDeclarator() {
		AbstractDeclaratorContext _localctx = new AbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 124, RULE_abstractDeclarator);
		int _la;
		try {
			State = 782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 771;
				pointer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Star || _la==Caret) {
					{
					State = 772;
					pointer();
					}
				}

				State = 775;
				directAbstractDeclarator(0);
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15 || _la==T__16) {
					{
					{
					State = 776;
					gccDeclaratorExtension();
					}
					}
					State = 781;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectAbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext[] gccDeclaratorExtension() {
			return GetRuleContexts<GccDeclaratorExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext gccDeclaratorExtension(int i) {
			return GetRuleContext<GccDeclaratorExtensionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterTypeListContext parameterTypeList() {
			return GetRuleContext<ParameterTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectAbstractDeclaratorContext directAbstractDeclarator() {
			return GetRuleContext<DirectAbstractDeclaratorContext>(0);
		}
		public DirectAbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directAbstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectAbstractDeclaratorContext directAbstractDeclarator() {
		return directAbstractDeclarator(0);
	}

	private DirectAbstractDeclaratorContext directAbstractDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DirectAbstractDeclaratorContext _localctx = new DirectAbstractDeclaratorContext(Context, _parentState);
		DirectAbstractDeclaratorContext _prevctx = _localctx;
		int _startState = 126;
		EnterRecursionRule(_localctx, 126, RULE_directAbstractDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 830;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 785;
				Match(LeftParen);
				State = 786;
				abstractDeclarator();
				State = 787;
				Match(RightParen);
				State = 791;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 788;
						gccDeclaratorExtension();
						}
						} 
					}
					State = 793;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
				}
				}
				break;
			case 2:
				{
				State = 794;
				Match(LeftBracket);
				State = 796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
					{
					State = 795;
					typeQualifierList();
					}
				}

				State = 799;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062378409985L) != 0)) {
					{
					State = 798;
					assignmentExpression();
					}
				}

				State = 801;
				Match(RightBracket);
				}
				break;
			case 3:
				{
				State = 802;
				Match(LeftBracket);
				State = 803;
				Match(Static);
				State = 805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
					{
					State = 804;
					typeQualifierList();
					}
				}

				State = 807;
				assignmentExpression();
				State = 808;
				Match(RightBracket);
				}
				break;
			case 4:
				{
				State = 810;
				Match(LeftBracket);
				State = 811;
				typeQualifierList();
				State = 812;
				Match(Static);
				State = 813;
				assignmentExpression();
				State = 814;
				Match(RightBracket);
				}
				break;
			case 5:
				{
				State = 816;
				Match(LeftBracket);
				State = 817;
				Match(Star);
				State = 818;
				Match(RightBracket);
				}
				break;
			case 6:
				{
				State = 819;
				Match(LeftParen);
				State = 821;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6386264861217519630L) != 0) || _la==Identifier) {
					{
					State = 820;
					parameterTypeList();
					}
				}

				State = 823;
				Match(RightParen);
				State = 827;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 824;
						gccDeclaratorExtension();
						}
						} 
					}
					State = 829;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 875;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 873;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
					case 1:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 832;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 833;
						Match(LeftBracket);
						State = 835;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
							{
							State = 834;
							typeQualifierList();
							}
						}

						State = 838;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062378409985L) != 0)) {
							{
							State = 837;
							assignmentExpression();
							}
						}

						State = 840;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 841;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 842;
						Match(LeftBracket);
						State = 843;
						Match(Static);
						State = 845;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 76562293193703424L) != 0)) {
							{
							State = 844;
							typeQualifierList();
							}
						}

						State = 847;
						assignmentExpression();
						State = 848;
						Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 850;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 851;
						Match(LeftBracket);
						State = 852;
						typeQualifierList();
						State = 853;
						Match(Static);
						State = 854;
						assignmentExpression();
						State = 855;
						Match(RightBracket);
						}
						break;
					case 4:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 857;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 858;
						Match(LeftBracket);
						State = 859;
						Match(Star);
						State = 860;
						Match(RightBracket);
						}
						break;
					case 5:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 861;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 862;
						Match(LeftParen);
						State = 864;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -6386264861217519630L) != 0) || _la==Identifier) {
							{
							State = 863;
							parameterTypeList();
							}
						}

						State = 866;
						Match(RightParen);
						State = 870;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 867;
								gccDeclaratorExtension();
								}
								} 
							}
							State = 872;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
						}
						}
						break;
					}
					} 
				}
				State = 877;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypedefNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public TypedefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedefName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefNameContext typedefName() {
		TypedefNameContext _localctx = new TypedefNameContext(Context, State);
		EnterRule(_localctx, 128, RULE_typedefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 130, RULE_initializer);
		int _la;
		try {
			State = 888;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case Sizeof:
			case Alignof:
			case Generic:
			case LeftParen:
			case Plus:
			case PlusPlus:
			case Minus:
			case MinusMinus:
			case Star:
			case And:
			case AndAnd:
			case Not:
			case Tilde:
			case Identifier:
			case Constant:
			case DigitSequence:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 880;
				assignmentExpression();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 881;
				Match(LeftBrace);
				State = 882;
				initializerList();
				State = 884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 883;
					Match(Comma);
					}
				}

				State = 886;
				Match(RightBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext[] initializer() {
			return GetRuleContexts<InitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer(int i) {
			return GetRuleContext<InitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignationContext[] designation() {
			return GetRuleContexts<DesignationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignationContext designation(int i) {
			return GetRuleContext<DesignationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public InitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerListContext initializerList() {
		InitializerListContext _localctx = new InitializerListContext(Context, State);
		EnterRule(_localctx, 132, RULE_initializerList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 891;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBracket || _la==Dot) {
				{
				State = 890;
				designation();
				}
			}

			State = 893;
			initializer();
			State = 901;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 894;
					Match(Comma);
					State = 896;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LeftBracket || _la==Dot) {
						{
						State = 895;
						designation();
						}
					}

					State = 898;
					initializer();
					}
					} 
				}
				State = 903;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorListContext designatorList() {
			return GetRuleContext<DesignatorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		public DesignationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignationContext designation() {
		DesignationContext _localctx = new DesignationContext(Context, State);
		EnterRule(_localctx, 134, RULE_designation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			designatorList();
			State = 905;
			Match(Assign);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext[] designator() {
			return GetRuleContexts<DesignatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator(int i) {
			return GetRuleContext<DesignatorContext>(i);
		}
		public DesignatorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designatorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorListContext designatorList() {
		DesignatorListContext _localctx = new DesignatorListContext(Context, State);
		EnterRule(_localctx, 136, RULE_designatorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 907;
				designator();
				}
				}
				State = 910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LeftBracket || _la==Dot );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(CParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 138, RULE_designator);
		try {
			State = 918;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 912;
				Match(LeftBracket);
				State = 913;
				constantExpression();
				State = 914;
				Match(RightBracket);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 916;
				Match(Dot);
				State = 917;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticAssertDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StaticAssert() { return GetToken(CParser.StaticAssert, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(CParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(CParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(CParser.StringLiteral, i);
		}
		public StaticAssertDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticAssertDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticAssertDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticAssertDeclarationContext staticAssertDeclaration() {
		StaticAssertDeclarationContext _localctx = new StaticAssertDeclarationContext(Context, State);
		EnterRule(_localctx, 140, RULE_staticAssertDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			Match(StaticAssert);
			State = 921;
			Match(LeftParen);
			State = 922;
			constantExpression();
			State = 923;
			Match(Comma);
			State = 925;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 924;
				Match(StringLiteral);
				}
				}
				State = 927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==StringLiteral );
			State = 929;
			Match(RightParen);
			State = 930;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volatile() { return GetToken(CParser.Volatile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext[] logicalOrExpression() {
			return GetRuleContexts<LogicalOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression(int i) {
			return GetRuleContext<LogicalOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(CParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(CParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_statement);
		int _la;
		try {
			State = 969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 932;
				labeledStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 933;
				compoundStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 934;
				expressionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 935;
				selectionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 936;
				iterationStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 937;
				jumpStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 938;
				_la = TokenStream.LA(1);
				if ( !(_la==T__15 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 939;
				_la = TokenStream.LA(1);
				if ( !(_la==T__18 || _la==Volatile) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 940;
				Match(LeftParen);
				State = 949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062378409985L) != 0)) {
					{
					State = 941;
					logicalOrExpression();
					State = 946;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 942;
						Match(Comma);
						State = 943;
						logicalOrExpression();
						}
						}
						State = 948;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Colon) {
					{
					{
					State = 951;
					Match(Colon);
					State = 960;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062378409985L) != 0)) {
						{
						State = 952;
						logicalOrExpression();
						State = 957;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==Comma) {
							{
							{
							State = 953;
							Match(Comma);
							State = 954;
							logicalOrExpression();
							}
							}
							State = 959;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					}
					}
					State = 966;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 967;
				Match(RightParen);
				State = 968;
				Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(CParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(CParser.Default, 0); }
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_labeledStatement);
		try {
			State = 984;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 971;
				Match(Identifier);
				State = 972;
				Match(Colon);
				State = 974;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 973;
					statement();
					}
					break;
				}
				}
				break;
			case Case:
				EnterOuterAlt(_localctx, 2);
				{
				State = 976;
				Match(Case);
				State = 977;
				constantExpression();
				State = 978;
				Match(Colon);
				State = 979;
				statement();
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 3);
				{
				State = 981;
				Match(Default);
				State = 982;
				Match(Colon);
				State = 983;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 986;
			Match(LeftBrace);
			State = 988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921505144305666L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062646845457L) != 0)) {
				{
				State = 987;
				blockItemList();
				}
			}

			State = 990;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockItemContext[] blockItem() {
			return GetRuleContexts<BlockItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockItemContext blockItem(int i) {
			return GetRuleContext<BlockItemContext>(i);
		}
		public BlockItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItemList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItemList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemListContext blockItemList() {
		BlockItemListContext _localctx = new BlockItemListContext(Context, State);
		EnterRule(_localctx, 148, RULE_blockItemList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 992;
				blockItem();
				}
				}
				State = 995;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921505144305666L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062646845457L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public BlockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemContext blockItem() {
		BlockItemContext _localctx = new BlockItemContext(Context, State);
		EnterRule(_localctx, 150, RULE_blockItem);
		try {
			State = 999;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 997;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 998;
				declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062378409985L) != 0)) {
				{
				State = 1001;
				expression();
				}
			}

			State = 1004;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(CParser.Switch, 0); }
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_selectionStatement);
		try {
			State = 1021;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1006;
				Match(If);
				State = 1007;
				Match(LeftParen);
				State = 1008;
				expression();
				State = 1009;
				Match(RightParen);
				State = 1010;
				statement();
				State = 1013;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
				case 1:
					{
					State = 1011;
					Match(Else);
					State = 1012;
					statement();
					}
					break;
				}
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1015;
				Match(Switch);
				State = 1016;
				Match(LeftParen);
				State = 1017;
				expression();
				State = 1018;
				Match(RightParen);
				State = 1019;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(CParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(CParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_iterationStatement);
		try {
			State = 1043;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case While:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1023;
				Match(While);
				State = 1024;
				Match(LeftParen);
				State = 1025;
				expression();
				State = 1026;
				Match(RightParen);
				State = 1027;
				statement();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1029;
				Match(Do);
				State = 1030;
				statement();
				State = 1031;
				Match(While);
				State = 1032;
				Match(LeftParen);
				State = 1033;
				expression();
				State = 1034;
				Match(RightParen);
				State = 1035;
				Match(Semi);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1037;
				Match(For);
				State = 1038;
				Match(LeftParen);
				State = 1039;
				forCondition();
				State = 1040;
				Match(RightParen);
				State = 1041;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(CParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(CParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForDeclarationContext forDeclaration() {
			return GetRuleContext<ForDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForExpressionContext[] forExpression() {
			return GetRuleContexts<ForExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForExpressionContext forExpression(int i) {
			return GetRuleContext<ForExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(Context, State);
		EnterRule(_localctx, 158, RULE_forCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1049;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1045;
				forDeclaration();
				}
				break;
			case 2:
				{
				State = 1047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062378409985L) != 0)) {
					{
					State = 1046;
					expression();
					}
				}

				}
				break;
			}
			State = 1051;
			Match(Semi);
			State = 1053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062378409985L) != 0)) {
				{
				State = 1052;
				forExpression();
				}
			}

			State = 1055;
			Match(Semi);
			State = 1057;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062378409985L) != 0)) {
				{
				State = 1056;
				forExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public ForDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForDeclarationContext forDeclaration() {
		ForDeclarationContext _localctx = new ForDeclarationContext(Context, State);
		EnterRule(_localctx, 160, RULE_forDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059;
			declarationSpecifiers();
			State = 1061;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 64000L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 140737496809473L) != 0)) {
				{
				State = 1060;
				initDeclaratorList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public ForExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForExpressionContext forExpression() {
		ForExpressionContext _localctx = new ForExpressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_forExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063;
			assignmentExpression();
			State = 1068;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1064;
				Match(Comma);
				State = 1065;
				assignmentExpression();
				}
				}
				State = 1070;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(CParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(CParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(CParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_jumpStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1081;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 1071;
				Match(Goto);
				State = 1072;
				Match(Identifier);
				}
				break;
			case 2:
				{
				State = 1073;
				Match(Continue);
				}
				break;
			case 3:
				{
				State = 1074;
				Match(Break);
				}
				break;
			case 4:
				{
				State = 1075;
				Match(Return);
				State = 1077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 612507141508431886L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2111062378409985L) != 0)) {
					{
					State = 1076;
					expression();
					}
				}

				}
				break;
			case 5:
				{
				State = 1079;
				Match(Goto);
				State = 1080;
				unaryExpression();
				}
				break;
			}
			State = 1083;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 166, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1774578842790068238L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 140737765244929L) != 0)) {
				{
				State = 1085;
				translationUnit();
				}
			}

			State = 1088;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext[] externalDeclaration() {
			return GetRuleContexts<ExternalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext externalDeclaration(int i) {
			return GetRuleContext<ExternalDeclarationContext>(i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 168, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1090;
				externalDeclaration();
				}
				}
				State = 1093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -1774578842790068238L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 140737765244929L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		public ExternalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalDeclarationContext externalDeclaration() {
		ExternalDeclarationContext _localctx = new ExternalDeclarationContext(Context, State);
		EnterRule(_localctx, 170, RULE_externalDeclaration);
		try {
			State = 1098;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1095;
				functionDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1096;
				declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1097;
				Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 172, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				State = 1100;
				declarationSpecifiers();
				}
				break;
			}
			State = 1103;
			declarator();
			State = 1105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1774578842790131726L) != 0) || _la==Identifier) {
				{
				State = 1104;
				declarationList();
				}
			}

			State = 1107;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public DeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationListContext declarationList() {
		DeclarationListContext _localctx = new DeclarationListContext(Context, State);
		EnterRule(_localctx, 174, RULE_declarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1109;
				declaration();
				}
				}
				State = 1112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -1774578842790131726L) != 0) || _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineMarkerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Constant() { return GetTokens(CParser.Constant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant(int i) {
			return GetToken(CParser.Constant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CParser.StringLiteral, 0); }
		public LineMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineMarker; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineMarkerContext lineMarker() {
		LineMarkerContext _localctx = new LineMarkerContext(Context, State);
		EnterRule(_localctx, 176, RULE_lineMarker);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			Match(Hashtag);
			State = 1115;
			Match(Constant);
			State = 1116;
			Match(StringLiteral);
			State = 1120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Constant) {
				{
				{
				State = 1117;
				Match(Constant);
				}
				}
				State = 1122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 48: return directDeclarator_sempred((DirectDeclaratorContext)_localctx, predIndex);
		case 63: return directAbstractDeclarator_sempred((DirectAbstractDeclaratorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool directDeclarator_sempred(DirectDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		}
		return true;
	}
	private bool directAbstractDeclarator_sempred(DirectAbstractDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,119,1124,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,1,0,1,0,1,0,4,0,182,8,0,11,0,12,
		0,183,1,0,1,0,1,0,1,0,1,0,1,0,3,0,192,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,212,8,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,2,1,2,1,2,5,2,224,8,2,10,2,12,2,227,9,2,1,3,1,3,3,3,231,
		8,3,1,3,1,3,1,3,1,4,1,4,3,4,238,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,246,8,
		4,1,4,1,4,3,4,250,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,258,8,4,1,4,1,4,1,4,
		1,4,1,4,5,4,265,8,4,10,4,12,4,268,9,4,1,5,1,5,1,5,5,5,273,8,5,10,5,12,
		5,276,9,5,1,6,5,6,279,8,6,10,6,12,6,282,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,3,6,295,8,6,1,7,1,7,1,8,3,8,300,8,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,3,8,309,8,8,1,9,1,9,1,9,5,9,314,8,9,10,9,12,9,317,9,9,1,10,
		1,10,1,10,5,10,322,8,10,10,10,12,10,325,9,10,1,11,1,11,1,11,5,11,330,8,
		11,10,11,12,11,333,9,11,1,12,1,12,1,12,5,12,338,8,12,10,12,12,12,341,9,
		12,1,13,1,13,1,13,5,13,346,8,13,10,13,12,13,349,9,13,1,14,1,14,1,14,5,
		14,354,8,14,10,14,12,14,357,9,14,1,15,1,15,1,15,5,15,362,8,15,10,15,12,
		15,365,9,15,1,16,1,16,1,16,5,16,370,8,16,10,16,12,16,373,9,16,1,17,1,17,
		1,17,5,17,378,8,17,10,17,12,17,381,9,17,1,18,1,18,1,18,5,18,386,8,18,10,
		18,12,18,389,9,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,397,8,19,1,20,1,20,
		1,20,1,20,1,20,1,20,3,20,405,8,20,1,21,1,21,1,22,1,22,1,22,5,22,412,8,
		22,10,22,12,22,415,9,22,1,23,1,23,1,24,1,24,3,24,421,8,24,1,24,1,24,1,
		24,3,24,426,8,24,1,25,4,25,429,8,25,11,25,12,25,430,1,26,4,26,434,8,26,
		11,26,12,26,435,1,27,1,27,1,27,1,27,1,27,3,27,443,8,27,1,28,1,28,1,28,
		5,28,448,8,28,10,28,12,28,451,9,28,1,29,1,29,1,29,3,29,456,8,29,1,30,1,
		30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,
		31,487,8,31,1,32,1,32,3,32,491,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		3,32,500,8,32,1,33,1,33,1,34,4,34,505,8,34,11,34,12,34,506,1,35,1,35,1,
		35,1,35,1,35,1,35,1,35,1,35,3,35,517,8,35,1,36,1,36,3,36,521,8,36,1,36,
		3,36,524,8,36,1,37,1,37,1,37,5,37,529,8,37,10,37,12,37,532,9,37,1,38,1,
		38,3,38,536,8,38,1,38,1,38,3,38,540,8,38,1,39,1,39,3,39,544,8,39,1,39,
		1,39,1,39,3,39,549,8,39,1,39,1,39,1,39,1,39,3,39,555,8,39,1,40,1,40,1,
		40,5,40,560,8,40,10,40,12,40,563,9,40,1,41,1,41,1,41,3,41,568,8,41,1,42,
		1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,
		1,45,1,45,1,45,3,45,588,8,45,1,46,1,46,1,46,1,46,3,46,594,8,46,1,46,1,
		46,1,47,3,47,599,8,47,1,47,1,47,5,47,603,8,47,10,47,12,47,606,9,47,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,1,48,3,48,625,8,48,1,48,1,48,1,48,3,48,630,8,48,1,48,3,48,633,8,48,
		1,48,1,48,1,48,1,48,1,48,3,48,640,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
		48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,655,8,48,1,48,1,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,3,48,667,8,48,1,48,5,48,670,8,48,10,48,12,48,
		673,9,48,1,49,1,49,1,50,1,50,1,50,4,50,680,8,50,11,50,12,50,681,1,50,1,
		50,3,50,686,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,3,52,696,8,52,
		1,52,1,52,3,52,700,8,52,5,52,702,8,52,10,52,12,52,705,9,52,1,53,1,53,1,
		53,3,53,710,8,53,1,53,3,53,713,8,53,1,54,1,54,1,54,1,54,1,54,5,54,720,
		8,54,10,54,12,54,723,9,54,1,55,1,55,3,55,727,8,55,4,55,729,8,55,11,55,
		12,55,730,1,56,4,56,734,8,56,11,56,12,56,735,1,57,1,57,1,57,3,57,741,8,
		57,1,58,1,58,1,58,5,58,746,8,58,10,58,12,58,749,9,58,1,59,1,59,1,59,1,
		59,1,59,3,59,756,8,59,3,59,758,8,59,1,60,1,60,1,60,5,60,763,8,60,10,60,
		12,60,766,9,60,1,61,1,61,3,61,770,8,61,1,62,1,62,3,62,774,8,62,1,62,1,
		62,5,62,778,8,62,10,62,12,62,781,9,62,3,62,783,8,62,1,63,1,63,1,63,1,63,
		1,63,5,63,790,8,63,10,63,12,63,793,9,63,1,63,1,63,3,63,797,8,63,1,63,3,
		63,800,8,63,1,63,1,63,1,63,1,63,3,63,806,8,63,1,63,1,63,1,63,1,63,1,63,
		1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,822,8,63,1,63,1,63,5,
		63,826,8,63,10,63,12,63,829,9,63,3,63,831,8,63,1,63,1,63,1,63,3,63,836,
		8,63,1,63,3,63,839,8,63,1,63,1,63,1,63,1,63,1,63,3,63,846,8,63,1,63,1,
		63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
		63,1,63,3,63,865,8,63,1,63,1,63,5,63,869,8,63,10,63,12,63,872,9,63,5,63,
		874,8,63,10,63,12,63,877,9,63,1,64,1,64,1,65,1,65,1,65,1,65,3,65,885,8,
		65,1,65,1,65,3,65,889,8,65,1,66,3,66,892,8,66,1,66,1,66,1,66,3,66,897,
		8,66,1,66,5,66,900,8,66,10,66,12,66,903,9,66,1,67,1,67,1,67,1,68,4,68,
		909,8,68,11,68,12,68,910,1,69,1,69,1,69,1,69,1,69,1,69,3,69,919,8,69,1,
		70,1,70,1,70,1,70,1,70,4,70,926,8,70,11,70,12,70,927,1,70,1,70,1,70,1,
		71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,945,8,71,
		10,71,12,71,948,9,71,3,71,950,8,71,1,71,1,71,1,71,1,71,5,71,956,8,71,10,
		71,12,71,959,9,71,3,71,961,8,71,5,71,963,8,71,10,71,12,71,966,9,71,1,71,
		1,71,3,71,970,8,71,1,72,1,72,1,72,3,72,975,8,72,1,72,1,72,1,72,1,72,1,
		72,1,72,1,72,1,72,3,72,985,8,72,1,73,1,73,3,73,989,8,73,1,73,1,73,1,74,
		4,74,994,8,74,11,74,12,74,995,1,75,1,75,3,75,1000,8,75,1,76,3,76,1003,
		8,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1014,8,77,1,77,
		1,77,1,77,1,77,1,77,1,77,3,77,1022,8,77,1,78,1,78,1,78,1,78,1,78,1,78,
		1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
		3,78,1044,8,78,1,79,1,79,3,79,1048,8,79,3,79,1050,8,79,1,79,1,79,3,79,
		1054,8,79,1,79,1,79,3,79,1058,8,79,1,80,1,80,3,80,1062,8,80,1,81,1,81,
		1,81,5,81,1067,8,81,10,81,12,81,1070,9,81,1,82,1,82,1,82,1,82,1,82,1,82,
		3,82,1078,8,82,1,82,1,82,3,82,1082,8,82,1,82,1,82,1,83,3,83,1087,8,83,
		1,83,1,83,1,84,4,84,1092,8,84,11,84,12,84,1093,1,85,1,85,1,85,3,85,1099,
		8,85,1,86,3,86,1102,8,86,1,86,1,86,3,86,1106,8,86,1,86,1,86,1,87,4,87,
		1111,8,87,11,87,12,87,1112,1,88,1,88,1,88,1,88,5,88,1119,8,88,10,88,12,
		88,1122,9,88,1,88,0,2,96,126,89,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,172,174,176,0,20,1,0,107,108,3,0,44,44,
		77,77,79,79,2,0,44,44,55,55,5,0,76,76,78,78,80,80,83,83,88,89,1,0,80,82,
		2,0,76,76,78,78,1,0,74,75,1,0,70,73,1,0,105,106,1,0,94,104,6,0,20,20,31,
		31,39,39,45,45,48,48,63,63,1,0,4,6,2,0,46,46,49,49,4,0,24,24,40,40,52,
		52,56,56,2,0,9,9,11,15,2,0,64,65,93,93,1,0,64,65,2,0,80,80,87,87,2,0,16,
		16,18,18,2,0,19,19,52,52,1234,0,211,1,0,0,0,2,213,1,0,0,0,4,220,1,0,0,
		0,6,230,1,0,0,0,8,249,1,0,0,0,10,269,1,0,0,0,12,280,1,0,0,0,14,296,1,0,
		0,0,16,308,1,0,0,0,18,310,1,0,0,0,20,318,1,0,0,0,22,326,1,0,0,0,24,334,
		1,0,0,0,26,342,1,0,0,0,28,350,1,0,0,0,30,358,1,0,0,0,32,366,1,0,0,0,34,
		374,1,0,0,0,36,382,1,0,0,0,38,390,1,0,0,0,40,404,1,0,0,0,42,406,1,0,0,
		0,44,408,1,0,0,0,46,416,1,0,0,0,48,425,1,0,0,0,50,428,1,0,0,0,52,433,1,
		0,0,0,54,442,1,0,0,0,56,444,1,0,0,0,58,452,1,0,0,0,60,457,1,0,0,0,62,486,
		1,0,0,0,64,499,1,0,0,0,66,501,1,0,0,0,68,504,1,0,0,0,70,516,1,0,0,0,72,
		520,1,0,0,0,74,525,1,0,0,0,76,539,1,0,0,0,78,554,1,0,0,0,80,556,1,0,0,
		0,82,564,1,0,0,0,84,569,1,0,0,0,86,571,1,0,0,0,88,576,1,0,0,0,90,587,1,
		0,0,0,92,589,1,0,0,0,94,598,1,0,0,0,96,624,1,0,0,0,98,674,1,0,0,0,100,
		685,1,0,0,0,102,687,1,0,0,0,104,695,1,0,0,0,106,706,1,0,0,0,108,721,1,
		0,0,0,110,728,1,0,0,0,112,733,1,0,0,0,114,737,1,0,0,0,116,742,1,0,0,0,
		118,757,1,0,0,0,120,759,1,0,0,0,122,767,1,0,0,0,124,782,1,0,0,0,126,830,
		1,0,0,0,128,878,1,0,0,0,130,888,1,0,0,0,132,891,1,0,0,0,134,904,1,0,0,
		0,136,908,1,0,0,0,138,918,1,0,0,0,140,920,1,0,0,0,142,969,1,0,0,0,144,
		984,1,0,0,0,146,986,1,0,0,0,148,993,1,0,0,0,150,999,1,0,0,0,152,1002,1,
		0,0,0,154,1021,1,0,0,0,156,1043,1,0,0,0,158,1049,1,0,0,0,160,1059,1,0,
		0,0,162,1063,1,0,0,0,164,1081,1,0,0,0,166,1086,1,0,0,0,168,1091,1,0,0,
		0,170,1098,1,0,0,0,172,1101,1,0,0,0,174,1110,1,0,0,0,176,1114,1,0,0,0,
		178,212,5,111,0,0,179,212,5,112,0,0,180,182,5,114,0,0,181,180,1,0,0,0,
		182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,212,1,0,0,0,185,186,
		5,64,0,0,186,187,3,44,22,0,187,188,5,65,0,0,188,212,1,0,0,0,189,212,3,
		2,1,0,190,192,5,1,0,0,191,190,1,0,0,0,191,192,1,0,0,0,192,193,1,0,0,0,
		193,194,5,64,0,0,194,195,3,146,73,0,195,196,5,65,0,0,196,212,1,0,0,0,197,
		198,5,2,0,0,198,199,5,64,0,0,199,200,3,12,6,0,200,201,5,93,0,0,201,202,
		3,122,61,0,202,203,5,65,0,0,203,212,1,0,0,0,204,205,5,3,0,0,205,206,5,
		64,0,0,206,207,3,122,61,0,207,208,5,93,0,0,208,209,3,12,6,0,209,210,5,
		65,0,0,210,212,1,0,0,0,211,178,1,0,0,0,211,179,1,0,0,0,211,181,1,0,0,0,
		211,185,1,0,0,0,211,189,1,0,0,0,211,191,1,0,0,0,211,197,1,0,0,0,211,204,
		1,0,0,0,212,1,1,0,0,0,213,214,5,59,0,0,214,215,5,64,0,0,215,216,3,40,20,
		0,216,217,5,93,0,0,217,218,3,4,2,0,218,219,5,65,0,0,219,3,1,0,0,0,220,
		225,3,6,3,0,221,222,5,93,0,0,222,224,3,6,3,0,223,221,1,0,0,0,224,227,1,
		0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,5,1,0,0,0,227,225,1,0,0,0,228,
		231,3,122,61,0,229,231,5,26,0,0,230,228,1,0,0,0,230,229,1,0,0,0,231,232,
		1,0,0,0,232,233,5,91,0,0,233,234,3,40,20,0,234,7,1,0,0,0,235,250,3,0,0,
		0,236,238,5,1,0,0,237,236,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,
		240,5,64,0,0,240,241,3,122,61,0,241,242,5,65,0,0,242,243,5,68,0,0,243,
		245,3,132,66,0,244,246,5,93,0,0,245,244,1,0,0,0,245,246,1,0,0,0,246,247,
		1,0,0,0,247,248,5,69,0,0,248,250,1,0,0,0,249,235,1,0,0,0,249,237,1,0,0,
		0,250,266,1,0,0,0,251,252,5,66,0,0,252,253,3,44,22,0,253,254,5,67,0,0,
		254,265,1,0,0,0,255,257,5,64,0,0,256,258,3,10,5,0,257,256,1,0,0,0,257,
		258,1,0,0,0,258,259,1,0,0,0,259,265,5,65,0,0,260,261,7,0,0,0,261,265,5,
		111,0,0,262,265,5,77,0,0,263,265,5,79,0,0,264,251,1,0,0,0,264,255,1,0,
		0,0,264,260,1,0,0,0,264,262,1,0,0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,
		264,1,0,0,0,266,267,1,0,0,0,267,9,1,0,0,0,268,266,1,0,0,0,269,274,3,40,
		20,0,270,271,5,93,0,0,271,273,3,40,20,0,272,270,1,0,0,0,273,276,1,0,0,
		0,274,272,1,0,0,0,274,275,1,0,0,0,275,11,1,0,0,0,276,274,1,0,0,0,277,279,
		7,1,0,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,
		0,281,294,1,0,0,0,282,280,1,0,0,0,283,295,3,8,4,0,284,285,3,14,7,0,285,
		286,3,16,8,0,286,295,1,0,0,0,287,288,7,2,0,0,288,289,5,64,0,0,289,290,
		3,122,61,0,290,291,5,65,0,0,291,295,1,0,0,0,292,293,5,85,0,0,293,295,5,
		111,0,0,294,283,1,0,0,0,294,284,1,0,0,0,294,287,1,0,0,0,294,292,1,0,0,
		0,295,13,1,0,0,0,296,297,7,3,0,0,297,15,1,0,0,0,298,300,5,1,0,0,299,298,
		1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,302,5,64,0,0,302,303,3,122,
		61,0,303,304,5,65,0,0,304,305,3,16,8,0,305,309,1,0,0,0,306,309,3,12,6,
		0,307,309,5,113,0,0,308,299,1,0,0,0,308,306,1,0,0,0,308,307,1,0,0,0,309,
		17,1,0,0,0,310,315,3,16,8,0,311,312,7,4,0,0,312,314,3,16,8,0,313,311,1,
		0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,19,1,0,0,0,317,
		315,1,0,0,0,318,323,3,18,9,0,319,320,7,5,0,0,320,322,3,18,9,0,321,319,
		1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,21,1,0,0,0,
		325,323,1,0,0,0,326,331,3,20,10,0,327,328,7,6,0,0,328,330,3,20,10,0,329,
		327,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,23,1,0,
		0,0,333,331,1,0,0,0,334,339,3,22,11,0,335,336,7,7,0,0,336,338,3,22,11,
		0,337,335,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,
		25,1,0,0,0,341,339,1,0,0,0,342,347,3,24,12,0,343,344,7,8,0,0,344,346,3,
		24,12,0,345,343,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,
		0,348,27,1,0,0,0,349,347,1,0,0,0,350,355,3,26,13,0,351,352,5,83,0,0,352,
		354,3,26,13,0,353,351,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,
		1,0,0,0,356,29,1,0,0,0,357,355,1,0,0,0,358,363,3,28,14,0,359,360,5,87,
		0,0,360,362,3,28,14,0,361,359,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,
		363,364,1,0,0,0,364,31,1,0,0,0,365,363,1,0,0,0,366,371,3,30,15,0,367,368,
		5,84,0,0,368,370,3,30,15,0,369,367,1,0,0,0,370,373,1,0,0,0,371,369,1,0,
		0,0,371,372,1,0,0,0,372,33,1,0,0,0,373,371,1,0,0,0,374,379,3,32,16,0,375,
		376,5,85,0,0,376,378,3,32,16,0,377,375,1,0,0,0,378,381,1,0,0,0,379,377,
		1,0,0,0,379,380,1,0,0,0,380,35,1,0,0,0,381,379,1,0,0,0,382,387,3,34,17,
		0,383,384,5,86,0,0,384,386,3,34,17,0,385,383,1,0,0,0,386,389,1,0,0,0,387,
		385,1,0,0,0,387,388,1,0,0,0,388,37,1,0,0,0,389,387,1,0,0,0,390,396,3,36,
		18,0,391,392,5,90,0,0,392,393,3,44,22,0,393,394,5,91,0,0,394,395,3,38,
		19,0,395,397,1,0,0,0,396,391,1,0,0,0,396,397,1,0,0,0,397,39,1,0,0,0,398,
		405,3,38,19,0,399,400,3,12,6,0,400,401,3,42,21,0,401,402,3,40,20,0,402,
		405,1,0,0,0,403,405,5,113,0,0,404,398,1,0,0,0,404,399,1,0,0,0,404,403,
		1,0,0,0,405,41,1,0,0,0,406,407,7,9,0,0,407,43,1,0,0,0,408,413,3,40,20,
		0,409,410,5,93,0,0,410,412,3,40,20,0,411,409,1,0,0,0,412,415,1,0,0,0,413,
		411,1,0,0,0,413,414,1,0,0,0,414,45,1,0,0,0,415,413,1,0,0,0,416,417,3,38,
		19,0,417,47,1,0,0,0,418,420,3,50,25,0,419,421,3,56,28,0,420,419,1,0,0,
		0,420,421,1,0,0,0,421,422,1,0,0,0,422,423,5,92,0,0,423,426,1,0,0,0,424,
		426,3,140,70,0,425,418,1,0,0,0,425,424,1,0,0,0,426,49,1,0,0,0,427,429,
		3,54,27,0,428,427,1,0,0,0,429,430,1,0,0,0,430,428,1,0,0,0,430,431,1,0,
		0,0,431,51,1,0,0,0,432,434,3,54,27,0,433,432,1,0,0,0,434,435,1,0,0,0,435,
		433,1,0,0,0,435,436,1,0,0,0,436,53,1,0,0,0,437,443,3,60,30,0,438,443,3,
		62,31,0,439,443,3,88,44,0,440,443,3,90,45,0,441,443,3,92,46,0,442,437,
		1,0,0,0,442,438,1,0,0,0,442,439,1,0,0,0,442,440,1,0,0,0,442,441,1,0,0,
		0,443,55,1,0,0,0,444,449,3,58,29,0,445,446,5,93,0,0,446,448,3,58,29,0,
		447,445,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,57,
		1,0,0,0,451,449,1,0,0,0,452,455,3,94,47,0,453,454,5,94,0,0,454,456,3,130,
		65,0,455,453,1,0,0,0,455,456,1,0,0,0,456,59,1,0,0,0,457,458,7,10,0,0,458,
		61,1,0,0,0,459,487,5,51,0,0,460,487,5,23,0,0,461,487,5,42,0,0,462,487,
		5,37,0,0,463,487,5,38,0,0,464,487,5,32,0,0,465,487,5,28,0,0,466,487,5,
		43,0,0,467,487,5,50,0,0,468,487,5,57,0,0,469,487,5,58,0,0,470,487,5,4,
		0,0,471,487,5,5,0,0,472,487,5,6,0,0,473,474,5,1,0,0,474,475,5,64,0,0,475,
		476,7,11,0,0,476,487,5,65,0,0,477,487,3,86,43,0,478,487,3,64,32,0,479,
		487,3,78,39,0,480,487,3,128,64,0,481,482,5,7,0,0,482,483,5,64,0,0,483,
		484,3,46,23,0,484,485,5,65,0,0,485,487,1,0,0,0,486,459,1,0,0,0,486,460,
		1,0,0,0,486,461,1,0,0,0,486,462,1,0,0,0,486,463,1,0,0,0,486,464,1,0,0,
		0,486,465,1,0,0,0,486,466,1,0,0,0,486,467,1,0,0,0,486,468,1,0,0,0,486,
		469,1,0,0,0,486,470,1,0,0,0,486,471,1,0,0,0,486,472,1,0,0,0,486,473,1,
		0,0,0,486,477,1,0,0,0,486,478,1,0,0,0,486,479,1,0,0,0,486,480,1,0,0,0,
		486,481,1,0,0,0,487,63,1,0,0,0,488,490,3,66,33,0,489,491,5,111,0,0,490,
		489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,493,5,68,0,0,493,494,3,
		68,34,0,494,495,5,69,0,0,495,500,1,0,0,0,496,497,3,66,33,0,497,498,5,111,
		0,0,498,500,1,0,0,0,499,488,1,0,0,0,499,496,1,0,0,0,500,65,1,0,0,0,501,
		502,7,12,0,0,502,67,1,0,0,0,503,505,3,70,35,0,504,503,1,0,0,0,505,506,
		1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,69,1,0,0,0,508,509,3,72,36,
		0,509,510,3,74,37,0,510,511,5,92,0,0,511,517,1,0,0,0,512,513,3,72,36,0,
		513,514,5,92,0,0,514,517,1,0,0,0,515,517,3,140,70,0,516,508,1,0,0,0,516,
		512,1,0,0,0,516,515,1,0,0,0,517,71,1,0,0,0,518,521,3,62,31,0,519,521,3,
		88,44,0,520,518,1,0,0,0,520,519,1,0,0,0,521,523,1,0,0,0,522,524,3,72,36,
		0,523,522,1,0,0,0,523,524,1,0,0,0,524,73,1,0,0,0,525,530,3,76,38,0,526,
		527,5,93,0,0,527,529,3,76,38,0,528,526,1,0,0,0,529,532,1,0,0,0,530,528,
		1,0,0,0,530,531,1,0,0,0,531,75,1,0,0,0,532,530,1,0,0,0,533,540,3,94,47,
		0,534,536,3,94,47,0,535,534,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,
		538,5,91,0,0,538,540,3,46,23,0,539,533,1,0,0,0,539,535,1,0,0,0,540,77,
		1,0,0,0,541,543,5,30,0,0,542,544,5,111,0,0,543,542,1,0,0,0,543,544,1,0,
		0,0,544,545,1,0,0,0,545,546,5,68,0,0,546,548,3,80,40,0,547,549,5,93,0,
		0,548,547,1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,0,550,551,5,69,0,0,551,
		555,1,0,0,0,552,553,5,30,0,0,553,555,5,111,0,0,554,541,1,0,0,0,554,552,
		1,0,0,0,555,79,1,0,0,0,556,561,3,82,41,0,557,558,5,93,0,0,558,560,3,82,
		41,0,559,557,1,0,0,0,560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,
		81,1,0,0,0,563,561,1,0,0,0,564,567,3,84,42,0,565,566,5,94,0,0,566,568,
		3,46,23,0,567,565,1,0,0,0,567,568,1,0,0,0,568,83,1,0,0,0,569,570,5,111,
		0,0,570,85,1,0,0,0,571,572,5,56,0,0,572,573,5,64,0,0,573,574,3,122,61,
		0,574,575,5,65,0,0,575,87,1,0,0,0,576,577,7,13,0,0,577,89,1,0,0,0,578,
		588,5,36,0,0,579,588,5,61,0,0,580,588,5,8,0,0,581,588,5,9,0,0,582,588,
		3,102,51,0,583,584,5,10,0,0,584,585,5,64,0,0,585,586,5,111,0,0,586,588,
		5,65,0,0,587,578,1,0,0,0,587,579,1,0,0,0,587,580,1,0,0,0,587,581,1,0,0,
		0,587,582,1,0,0,0,587,583,1,0,0,0,588,91,1,0,0,0,589,590,5,54,0,0,590,
		593,5,64,0,0,591,594,3,122,61,0,592,594,3,46,23,0,593,591,1,0,0,0,593,
		592,1,0,0,0,594,595,1,0,0,0,595,596,5,65,0,0,596,93,1,0,0,0,597,599,3,
		110,55,0,598,597,1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,604,3,96,
		48,0,601,603,3,100,50,0,602,601,1,0,0,0,603,606,1,0,0,0,604,602,1,0,0,
		0,604,605,1,0,0,0,605,95,1,0,0,0,606,604,1,0,0,0,607,608,6,48,-1,0,608,
		625,5,111,0,0,609,610,5,64,0,0,610,611,3,94,47,0,611,612,5,65,0,0,612,
		625,1,0,0,0,613,614,5,111,0,0,614,615,5,91,0,0,615,625,5,113,0,0,616,617,
		3,98,49,0,617,618,5,111,0,0,618,625,1,0,0,0,619,620,5,64,0,0,620,621,3,
		98,49,0,621,622,3,94,47,0,622,623,5,65,0,0,623,625,1,0,0,0,624,607,1,0,
		0,0,624,609,1,0,0,0,624,613,1,0,0,0,624,616,1,0,0,0,624,619,1,0,0,0,625,
		671,1,0,0,0,626,627,10,9,0,0,627,629,5,66,0,0,628,630,3,112,56,0,629,628,
		1,0,0,0,629,630,1,0,0,0,630,632,1,0,0,0,631,633,3,40,20,0,632,631,1,0,
		0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,670,5,67,0,0,635,636,10,8,0,0,
		636,637,5,66,0,0,637,639,5,45,0,0,638,640,3,112,56,0,639,638,1,0,0,0,639,
		640,1,0,0,0,640,641,1,0,0,0,641,642,3,40,20,0,642,643,5,67,0,0,643,670,
		1,0,0,0,644,645,10,7,0,0,645,646,5,66,0,0,646,647,3,112,56,0,647,648,5,
		45,0,0,648,649,3,40,20,0,649,650,5,67,0,0,650,670,1,0,0,0,651,652,10,6,
		0,0,652,654,5,66,0,0,653,655,3,112,56,0,654,653,1,0,0,0,654,655,1,0,0,
		0,655,656,1,0,0,0,656,657,5,80,0,0,657,670,5,67,0,0,658,659,10,5,0,0,659,
		660,5,64,0,0,660,661,3,114,57,0,661,662,5,65,0,0,662,670,1,0,0,0,663,664,
		10,4,0,0,664,666,5,64,0,0,665,667,3,120,60,0,666,665,1,0,0,0,666,667,1,
		0,0,0,667,668,1,0,0,0,668,670,5,65,0,0,669,626,1,0,0,0,669,635,1,0,0,0,
		669,644,1,0,0,0,669,651,1,0,0,0,669,658,1,0,0,0,669,663,1,0,0,0,670,673,
		1,0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,672,97,1,0,0,0,673,671,1,0,0,0,
		674,675,7,14,0,0,675,99,1,0,0,0,676,677,5,16,0,0,677,679,5,64,0,0,678,
		680,5,114,0,0,679,678,1,0,0,0,680,681,1,0,0,0,681,679,1,0,0,0,681,682,
		1,0,0,0,682,683,1,0,0,0,683,686,5,65,0,0,684,686,3,102,51,0,685,676,1,
		0,0,0,685,684,1,0,0,0,686,101,1,0,0,0,687,688,5,17,0,0,688,689,5,64,0,
		0,689,690,5,64,0,0,690,691,3,104,52,0,691,692,5,65,0,0,692,693,5,65,0,
		0,693,103,1,0,0,0,694,696,3,106,53,0,695,694,1,0,0,0,695,696,1,0,0,0,696,
		703,1,0,0,0,697,699,5,93,0,0,698,700,3,106,53,0,699,698,1,0,0,0,699,700,
		1,0,0,0,700,702,1,0,0,0,701,697,1,0,0,0,702,705,1,0,0,0,703,701,1,0,0,
		0,703,704,1,0,0,0,704,105,1,0,0,0,705,703,1,0,0,0,706,712,8,15,0,0,707,
		709,5,64,0,0,708,710,3,10,5,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,
		1,0,0,0,711,713,5,65,0,0,712,707,1,0,0,0,712,713,1,0,0,0,713,107,1,0,0,
		0,714,720,8,16,0,0,715,716,5,64,0,0,716,717,3,108,54,0,717,718,5,65,0,
		0,718,720,1,0,0,0,719,714,1,0,0,0,719,715,1,0,0,0,720,723,1,0,0,0,721,
		719,1,0,0,0,721,722,1,0,0,0,722,109,1,0,0,0,723,721,1,0,0,0,724,726,7,
		17,0,0,725,727,3,112,56,0,726,725,1,0,0,0,726,727,1,0,0,0,727,729,1,0,
		0,0,728,724,1,0,0,0,729,730,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,
		111,1,0,0,0,732,734,3,88,44,0,733,732,1,0,0,0,734,735,1,0,0,0,735,733,
		1,0,0,0,735,736,1,0,0,0,736,113,1,0,0,0,737,740,3,116,58,0,738,739,5,93,
		0,0,739,741,5,109,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,115,1,0,0,0,
		742,747,3,118,59,0,743,744,5,93,0,0,744,746,3,118,59,0,745,743,1,0,0,0,
		746,749,1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,117,1,0,0,0,749,747,
		1,0,0,0,750,751,3,50,25,0,751,752,3,94,47,0,752,758,1,0,0,0,753,755,3,
		52,26,0,754,756,3,124,62,0,755,754,1,0,0,0,755,756,1,0,0,0,756,758,1,0,
		0,0,757,750,1,0,0,0,757,753,1,0,0,0,758,119,1,0,0,0,759,764,5,111,0,0,
		760,761,5,93,0,0,761,763,5,111,0,0,762,760,1,0,0,0,763,766,1,0,0,0,764,
		762,1,0,0,0,764,765,1,0,0,0,765,121,1,0,0,0,766,764,1,0,0,0,767,769,3,
		72,36,0,768,770,3,124,62,0,769,768,1,0,0,0,769,770,1,0,0,0,770,123,1,0,
		0,0,771,783,3,110,55,0,772,774,3,110,55,0,773,772,1,0,0,0,773,774,1,0,
		0,0,774,775,1,0,0,0,775,779,3,126,63,0,776,778,3,100,50,0,777,776,1,0,
		0,0,778,781,1,0,0,0,779,777,1,0,0,0,779,780,1,0,0,0,780,783,1,0,0,0,781,
		779,1,0,0,0,782,771,1,0,0,0,782,773,1,0,0,0,783,125,1,0,0,0,784,785,6,
		63,-1,0,785,786,5,64,0,0,786,787,3,124,62,0,787,791,5,65,0,0,788,790,3,
		100,50,0,789,788,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,
		0,792,831,1,0,0,0,793,791,1,0,0,0,794,796,5,66,0,0,795,797,3,112,56,0,
		796,795,1,0,0,0,796,797,1,0,0,0,797,799,1,0,0,0,798,800,3,40,20,0,799,
		798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,831,5,67,0,0,802,803,5,
		66,0,0,803,805,5,45,0,0,804,806,3,112,56,0,805,804,1,0,0,0,805,806,1,0,
		0,0,806,807,1,0,0,0,807,808,3,40,20,0,808,809,5,67,0,0,809,831,1,0,0,0,
		810,811,5,66,0,0,811,812,3,112,56,0,812,813,5,45,0,0,813,814,3,40,20,0,
		814,815,5,67,0,0,815,831,1,0,0,0,816,817,5,66,0,0,817,818,5,80,0,0,818,
		831,5,67,0,0,819,821,5,64,0,0,820,822,3,114,57,0,821,820,1,0,0,0,821,822,
		1,0,0,0,822,823,1,0,0,0,823,827,5,65,0,0,824,826,3,100,50,0,825,824,1,
		0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,831,1,0,0,0,
		829,827,1,0,0,0,830,784,1,0,0,0,830,794,1,0,0,0,830,802,1,0,0,0,830,810,
		1,0,0,0,830,816,1,0,0,0,830,819,1,0,0,0,831,875,1,0,0,0,832,833,10,5,0,
		0,833,835,5,66,0,0,834,836,3,112,56,0,835,834,1,0,0,0,835,836,1,0,0,0,
		836,838,1,0,0,0,837,839,3,40,20,0,838,837,1,0,0,0,838,839,1,0,0,0,839,
		840,1,0,0,0,840,874,5,67,0,0,841,842,10,4,0,0,842,843,5,66,0,0,843,845,
		5,45,0,0,844,846,3,112,56,0,845,844,1,0,0,0,845,846,1,0,0,0,846,847,1,
		0,0,0,847,848,3,40,20,0,848,849,5,67,0,0,849,874,1,0,0,0,850,851,10,3,
		0,0,851,852,5,66,0,0,852,853,3,112,56,0,853,854,5,45,0,0,854,855,3,40,
		20,0,855,856,5,67,0,0,856,874,1,0,0,0,857,858,10,2,0,0,858,859,5,66,0,
		0,859,860,5,80,0,0,860,874,5,67,0,0,861,862,10,1,0,0,862,864,5,64,0,0,
		863,865,3,114,57,0,864,863,1,0,0,0,864,865,1,0,0,0,865,866,1,0,0,0,866,
		870,5,65,0,0,867,869,3,100,50,0,868,867,1,0,0,0,869,872,1,0,0,0,870,868,
		1,0,0,0,870,871,1,0,0,0,871,874,1,0,0,0,872,870,1,0,0,0,873,832,1,0,0,
		0,873,841,1,0,0,0,873,850,1,0,0,0,873,857,1,0,0,0,873,861,1,0,0,0,874,
		877,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,127,1,0,0,0,877,875,1,
		0,0,0,878,879,5,111,0,0,879,129,1,0,0,0,880,889,3,40,20,0,881,882,5,68,
		0,0,882,884,3,132,66,0,883,885,5,93,0,0,884,883,1,0,0,0,884,885,1,0,0,
		0,885,886,1,0,0,0,886,887,5,69,0,0,887,889,1,0,0,0,888,880,1,0,0,0,888,
		881,1,0,0,0,889,131,1,0,0,0,890,892,3,134,67,0,891,890,1,0,0,0,891,892,
		1,0,0,0,892,893,1,0,0,0,893,901,3,130,65,0,894,896,5,93,0,0,895,897,3,
		134,67,0,896,895,1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,900,3,130,
		65,0,899,894,1,0,0,0,900,903,1,0,0,0,901,899,1,0,0,0,901,902,1,0,0,0,902,
		133,1,0,0,0,903,901,1,0,0,0,904,905,3,136,68,0,905,906,5,94,0,0,906,135,
		1,0,0,0,907,909,3,138,69,0,908,907,1,0,0,0,909,910,1,0,0,0,910,908,1,0,
		0,0,910,911,1,0,0,0,911,137,1,0,0,0,912,913,5,66,0,0,913,914,3,46,23,0,
		914,915,5,67,0,0,915,919,1,0,0,0,916,917,5,108,0,0,917,919,5,111,0,0,918,
		912,1,0,0,0,918,916,1,0,0,0,919,139,1,0,0,0,920,921,5,62,0,0,921,922,5,
		64,0,0,922,923,3,46,23,0,923,925,5,93,0,0,924,926,5,114,0,0,925,924,1,
		0,0,0,926,927,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,
		929,930,5,65,0,0,930,931,5,92,0,0,931,141,1,0,0,0,932,970,3,144,72,0,933,
		970,3,146,73,0,934,970,3,152,76,0,935,970,3,154,77,0,936,970,3,156,78,
		0,937,970,3,164,82,0,938,939,7,18,0,0,939,940,7,19,0,0,940,949,5,64,0,
		0,941,946,3,36,18,0,942,943,5,93,0,0,943,945,3,36,18,0,944,942,1,0,0,0,
		945,948,1,0,0,0,946,944,1,0,0,0,946,947,1,0,0,0,947,950,1,0,0,0,948,946,
		1,0,0,0,949,941,1,0,0,0,949,950,1,0,0,0,950,964,1,0,0,0,951,960,5,91,0,
		0,952,957,3,36,18,0,953,954,5,93,0,0,954,956,3,36,18,0,955,953,1,0,0,0,
		956,959,1,0,0,0,957,955,1,0,0,0,957,958,1,0,0,0,958,961,1,0,0,0,959,957,
		1,0,0,0,960,952,1,0,0,0,960,961,1,0,0,0,961,963,1,0,0,0,962,951,1,0,0,
		0,963,966,1,0,0,0,964,962,1,0,0,0,964,965,1,0,0,0,965,967,1,0,0,0,966,
		964,1,0,0,0,967,968,5,65,0,0,968,970,5,92,0,0,969,932,1,0,0,0,969,933,
		1,0,0,0,969,934,1,0,0,0,969,935,1,0,0,0,969,936,1,0,0,0,969,937,1,0,0,
		0,969,938,1,0,0,0,970,143,1,0,0,0,971,972,5,111,0,0,972,974,5,91,0,0,973,
		975,3,142,71,0,974,973,1,0,0,0,974,975,1,0,0,0,975,985,1,0,0,0,976,977,
		5,22,0,0,977,978,3,46,23,0,978,979,5,91,0,0,979,980,3,142,71,0,980,985,
		1,0,0,0,981,982,5,26,0,0,982,983,5,91,0,0,983,985,3,142,71,0,984,971,1,
		0,0,0,984,976,1,0,0,0,984,981,1,0,0,0,985,145,1,0,0,0,986,988,5,68,0,0,
		987,989,3,148,74,0,988,987,1,0,0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,
		991,5,69,0,0,991,147,1,0,0,0,992,994,3,150,75,0,993,992,1,0,0,0,994,995,
		1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,0,996,149,1,0,0,0,997,1000,3,142,
		71,0,998,1000,3,48,24,0,999,997,1,0,0,0,999,998,1,0,0,0,1000,151,1,0,0,
		0,1001,1003,3,44,22,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,
		0,0,0,1004,1005,5,92,0,0,1005,153,1,0,0,0,1006,1007,5,35,0,0,1007,1008,
		5,64,0,0,1008,1009,3,44,22,0,1009,1010,5,65,0,0,1010,1013,3,142,71,0,1011,
		1012,5,29,0,0,1012,1014,3,142,71,0,1013,1011,1,0,0,0,1013,1014,1,0,0,0,
		1014,1022,1,0,0,0,1015,1016,5,47,0,0,1016,1017,5,64,0,0,1017,1018,3,44,
		22,0,1018,1019,5,65,0,0,1019,1020,3,142,71,0,1020,1022,1,0,0,0,1021,1006,
		1,0,0,0,1021,1015,1,0,0,0,1022,155,1,0,0,0,1023,1024,5,53,0,0,1024,1025,
		5,64,0,0,1025,1026,3,44,22,0,1026,1027,5,65,0,0,1027,1028,3,142,71,0,1028,
		1044,1,0,0,0,1029,1030,5,27,0,0,1030,1031,3,142,71,0,1031,1032,5,53,0,
		0,1032,1033,5,64,0,0,1033,1034,3,44,22,0,1034,1035,5,65,0,0,1035,1036,
		5,92,0,0,1036,1044,1,0,0,0,1037,1038,5,33,0,0,1038,1039,5,64,0,0,1039,
		1040,3,158,79,0,1040,1041,5,65,0,0,1041,1042,3,142,71,0,1042,1044,1,0,
		0,0,1043,1023,1,0,0,0,1043,1029,1,0,0,0,1043,1037,1,0,0,0,1044,157,1,0,
		0,0,1045,1050,3,160,80,0,1046,1048,3,44,22,0,1047,1046,1,0,0,0,1047,1048,
		1,0,0,0,1048,1050,1,0,0,0,1049,1045,1,0,0,0,1049,1047,1,0,0,0,1050,1051,
		1,0,0,0,1051,1053,5,92,0,0,1052,1054,3,162,81,0,1053,1052,1,0,0,0,1053,
		1054,1,0,0,0,1054,1055,1,0,0,0,1055,1057,5,92,0,0,1056,1058,3,162,81,0,
		1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,159,1,0,0,0,1059,1061,3,50,25,
		0,1060,1062,3,56,28,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,161,1,0,
		0,0,1063,1068,3,40,20,0,1064,1065,5,93,0,0,1065,1067,3,40,20,0,1066,1064,
		1,0,0,0,1067,1070,1,0,0,0,1068,1066,1,0,0,0,1068,1069,1,0,0,0,1069,163,
		1,0,0,0,1070,1068,1,0,0,0,1071,1072,5,34,0,0,1072,1082,5,111,0,0,1073,
		1082,5,25,0,0,1074,1082,5,21,0,0,1075,1077,5,41,0,0,1076,1078,3,44,22,
		0,1077,1076,1,0,0,0,1077,1078,1,0,0,0,1078,1082,1,0,0,0,1079,1080,5,34,
		0,0,1080,1082,3,12,6,0,1081,1071,1,0,0,0,1081,1073,1,0,0,0,1081,1074,1,
		0,0,0,1081,1075,1,0,0,0,1081,1079,1,0,0,0,1082,1083,1,0,0,0,1083,1084,
		5,92,0,0,1084,165,1,0,0,0,1085,1087,3,168,84,0,1086,1085,1,0,0,0,1086,
		1087,1,0,0,0,1087,1088,1,0,0,0,1088,1089,5,0,0,1,1089,167,1,0,0,0,1090,
		1092,3,170,85,0,1091,1090,1,0,0,0,1092,1093,1,0,0,0,1093,1091,1,0,0,0,
		1093,1094,1,0,0,0,1094,169,1,0,0,0,1095,1099,3,172,86,0,1096,1099,3,48,
		24,0,1097,1099,5,92,0,0,1098,1095,1,0,0,0,1098,1096,1,0,0,0,1098,1097,
		1,0,0,0,1099,171,1,0,0,0,1100,1102,3,50,25,0,1101,1100,1,0,0,0,1101,1102,
		1,0,0,0,1102,1103,1,0,0,0,1103,1105,3,94,47,0,1104,1106,3,174,87,0,1105,
		1104,1,0,0,0,1105,1106,1,0,0,0,1106,1107,1,0,0,0,1107,1108,3,146,73,0,
		1108,173,1,0,0,0,1109,1111,3,48,24,0,1110,1109,1,0,0,0,1111,1112,1,0,0,
		0,1112,1110,1,0,0,0,1112,1113,1,0,0,0,1113,175,1,0,0,0,1114,1115,5,110,
		0,0,1115,1116,5,112,0,0,1116,1120,5,114,0,0,1117,1119,5,112,0,0,1118,1117,
		1,0,0,0,1119,1122,1,0,0,0,1120,1118,1,0,0,0,1120,1121,1,0,0,0,1121,177,
		1,0,0,0,1122,1120,1,0,0,0,136,183,191,211,225,230,237,245,249,257,264,
		266,274,280,294,299,308,315,323,331,339,347,355,363,371,379,387,396,404,
		413,420,425,430,435,442,449,455,486,490,499,506,516,520,523,530,535,539,
		543,548,554,561,567,587,593,598,604,624,629,632,639,654,666,669,671,681,
		685,695,699,703,709,712,719,721,726,730,735,740,747,755,757,764,769,773,
		779,782,791,796,799,805,821,827,830,835,838,845,864,870,873,875,884,888,
		891,896,901,910,918,927,946,949,957,960,964,969,974,984,988,995,999,1002,
		1013,1021,1043,1047,1049,1053,1057,1061,1068,1077,1081,1086,1093,1098,
		1101,1105,1112,1120
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DankleC
