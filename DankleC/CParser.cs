//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/daniel/Documents/CSharp/Dankle/DankleC/C.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DankleC {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Auto=1, Break=2, Case=3, Char=4, Const=5, Continue=6, Default=7, Do=8, 
		Double=9, Else=10, Enum=11, Extern=12, Float=13, For=14, Goto=15, If=16, 
		Inline=17, Int=18, Long=19, Register=20, Restrict=21, Return=22, Short=23, 
		Signed=24, Sizeof=25, Static=26, Struct=27, Switch=28, Typedef=29, Union=30, 
		Unsigned=31, Void=32, Volatile=33, While=34, Alignas=35, Alignof=36, Atomic=37, 
		Bool=38, Complex=39, Generic=40, Imaginary=41, Noreturn=42, StaticAssert=43, 
		ThreadLocal=44, LeftParen=45, RightParen=46, LeftBracket=47, RightBracket=48, 
		LeftBrace=49, RightBrace=50, Less=51, LessEqual=52, Greater=53, GreaterEqual=54, 
		LeftShift=55, RightShift=56, Plus=57, PlusPlus=58, Minus=59, MinusMinus=60, 
		Star=61, Div=62, Mod=63, And=64, Or=65, AndAnd=66, OrOr=67, Caret=68, 
		Not=69, Tilde=70, Question=71, Colon=72, Semi=73, Comma=74, Assign=75, 
		StarAssign=76, DivAssign=77, ModAssign=78, PlusAssign=79, MinusAssign=80, 
		LeftShiftAssign=81, RightShiftAssign=82, AndAssign=83, XorAssign=84, OrAssign=85, 
		Equal=86, NotEqual=87, Arrow=88, Dot=89, Ellipsis=90, Hashtag=91, Identifier=92, 
		Constant=93, DigitSequence=94, StringLiteral=95, AsmBlock=96, Whitespace=97, 
		Newline=98, BlockComment=99, LineComment=100;
	public const int
		RULE_root = 0, RULE_function = 1, RULE_parameterList = 2, RULE_parameterDeclaration = 3, 
		RULE_argumentList = 4, RULE_scope = 5, RULE_statement = 6, RULE_semiStatement = 7, 
		RULE_assignmentStatement = 8, RULE_declaration = 9, RULE_declarationSpecifier = 10, 
		RULE_initDeclarator = 11, RULE_declarator = 12, RULE_directDeclarator = 13, 
		RULE_abstractDeclarator = 14, RULE_abstractDirectDeclarator = 15, RULE_structOrUnion = 16, 
		RULE_structDeclaration = 17, RULE_expressionStatement = 18, RULE_ifStatement = 19, 
		RULE_whileStatement = 20, RULE_forStatement = 21, RULE_relationalExpression = 22, 
		RULE_equalityExpression = 23, RULE_andExpression = 24, RULE_exclusiveOrExpression = 25, 
		RULE_inclusiveOrExpression = 26, RULE_logicalAndExpression = 27, RULE_logicalOrExpression = 28, 
		RULE_assignmentExpression = 29, RULE_indexExpression = 30, RULE_returnStatement = 31, 
		RULE_lvalue = 32, RULE_expression = 33, RULE_castExpression = 34, RULE_unaryExpression = 35, 
		RULE_postfixExpression = 36, RULE_primaryExpression = 37, RULE_constantExpression = 38, 
		RULE_additiveExpression = 39, RULE_multiplicativeExpression = 40, RULE_variableExpression = 41, 
		RULE_type = 42, RULE_userType = 43, RULE_builtinType = 44, RULE_integerType = 45, 
		RULE_unsignedChar = 46, RULE_signedChar = 47, RULE_unsignedShort = 48, 
		RULE_signedShort = 49, RULE_unsignedInt = 50, RULE_signedInt = 51, RULE_unsignedLong = 52, 
		RULE_signedLong = 53, RULE_unsignedLongLong = 54, RULE_signedLongLong = 55, 
		RULE_float = 56, RULE_double = 57, RULE_longDouble = 58, RULE_lineMarker = 59;
	public static readonly string[] ruleNames = {
		"root", "function", "parameterList", "parameterDeclaration", "argumentList", 
		"scope", "statement", "semiStatement", "assignmentStatement", "declaration", 
		"declarationSpecifier", "initDeclarator", "declarator", "directDeclarator", 
		"abstractDeclarator", "abstractDirectDeclarator", "structOrUnion", "structDeclaration", 
		"expressionStatement", "ifStatement", "whileStatement", "forStatement", 
		"relationalExpression", "equalityExpression", "andExpression", "exclusiveOrExpression", 
		"inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression", 
		"assignmentExpression", "indexExpression", "returnStatement", "lvalue", 
		"expression", "castExpression", "unaryExpression", "postfixExpression", 
		"primaryExpression", "constantExpression", "additiveExpression", "multiplicativeExpression", 
		"variableExpression", "type", "userType", "builtinType", "integerType", 
		"unsignedChar", "signedChar", "unsignedShort", "signedShort", "unsignedInt", 
		"signedInt", "unsignedLong", "signedLong", "unsignedLongLong", "signedLongLong", 
		"float", "double", "longDouble", "lineMarker"
	};

	private static readonly string[] _LiteralNames = {
		null, "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", 
		"'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", 
		"'for'", "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", 
		"'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", 
		"'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", 
		"'volatile'", "'while'", "'_Alignas'", "'_Alignof'", "'_Atomic'", "'_Bool'", 
		"'_Complex'", "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
		"'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
		"'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", "':'", 
		"';'", "','", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'", 
		"'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Auto", "Break", "Case", "Char", "Const", "Continue", "Default", 
		"Do", "Double", "Else", "Enum", "Extern", "Float", "For", "Goto", "If", 
		"Inline", "Int", "Long", "Register", "Restrict", "Return", "Short", "Signed", 
		"Sizeof", "Static", "Struct", "Switch", "Typedef", "Union", "Unsigned", 
		"Void", "Volatile", "While", "Alignas", "Alignof", "Atomic", "Bool", "Complex", 
		"Generic", "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", "LeftParen", 
		"RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
		"Less", "LessEqual", "Greater", "GreaterEqual", "LeftShift", "RightShift", 
		"Plus", "PlusPlus", "Minus", "MinusMinus", "Star", "Div", "Mod", "And", 
		"Or", "AndAnd", "OrOr", "Caret", "Not", "Tilde", "Question", "Colon", 
		"Semi", "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign", "PlusAssign", 
		"MinusAssign", "LeftShiftAssign", "RightShiftAssign", "AndAssign", "XorAssign", 
		"OrAssign", "Equal", "NotEqual", "Arrow", "Dot", "Ellipsis", "Hashtag", 
		"Identifier", "Constant", "DigitSequence", "StringLiteral", "AsmBlock", 
		"Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "C.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineMarkerContext[] lineMarker() {
			return GetRuleContexts<LineMarkerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineMarkerContext lineMarker(int i) {
			return GetRuleContext<LineMarkerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 282554278448L) != 0) || _la==Hashtag || _la==Identifier) {
				{
				State = 122;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Hashtag:
					{
					State = 120;
					lineMarker();
					}
					break;
				case Char:
				case Const:
				case Double:
				case Float:
				case Int:
				case Long:
				case Short:
				case Signed:
				case Struct:
				case Union:
				case Unsigned:
				case Void:
				case Bool:
				case Identifier:
					{
					State = 121;
					function();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 127;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier() {
			return GetRuleContext<DeclarationSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			declarationSpecifier();
			State = 130;
			declarator();
			State = 131;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext[] parameterDeclaration() {
			return GetRuleContexts<ParameterDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext parameterDeclaration(int i) {
			return GetRuleContext<ParameterDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 4, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 282554278448L) != 0) || _la==Identifier) {
				{
				State = 133;
				parameterDeclaration();
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 134;
					Match(Comma);
					State = 135;
					parameterDeclaration();
					}
					}
					State = 140;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier() {
			return GetRuleContext<DeclarationSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_parameterDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			declarationSpecifier();
			State = 144;
			declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 8, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			expression();
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 147;
				Match(Comma);
				State = 148;
				expression();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 10, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(LeftBrace);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3747593324036186928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2952790017L) != 0)) {
				{
				{
				State = 155;
				statement();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 161;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SemiStatementContext semiStatement() {
			return GetRuleContext<SemiStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Char:
			case Const:
			case Double:
			case Float:
			case Int:
			case Long:
			case Return:
			case Short:
			case Signed:
			case Struct:
			case Union:
			case Unsigned:
			case Void:
			case Bool:
			case LeftParen:
			case PlusPlus:
			case MinusMinus:
			case Star:
			case And:
			case Identifier:
			case Constant:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				semiStatement();
				State = 164;
				Match(Semi);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				scope();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 3);
				{
				State = 167;
				ifStatement();
				}
				break;
			case Do:
			case While:
				EnterOuterAlt(_localctx, 4);
				{
				State = 168;
				whileStatement();
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 5);
				{
				State = 169;
				forStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SemiStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semiStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemiStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemiStatementContext semiStatement() {
		SemiStatementContext _localctx = new SemiStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_semiStatement);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				returnStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				assignmentStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 174;
				declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 175;
				expressionStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			lvalue();
			State = 179;
			Match(Assign);
			State = 180;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier() {
			return GetRuleContext<DeclarationSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext[] initDeclarator() {
			return GetRuleContexts<InitDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext initDeclarator(int i) {
			return GetRuleContext<InitDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			declarationSpecifier();
			State = 183;
			initDeclarator();
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 184;
				Match(Comma);
				State = 185;
				initDeclarator();
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinTypeContext builtinType() {
			return GetRuleContext<BuiltinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CParser.Const, 0); }
		public DeclarationSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifierContext declarationSpecifier() {
		DeclarationSpecifierContext _localctx = new DeclarationSpecifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_declarationSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 191;
				Match(Const);
				}
			}

			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Struct:
			case Union:
			case Identifier:
				{
				State = 194;
				userType();
				}
				break;
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Bool:
				{
				State = 195;
				builtinType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorContext initDeclarator() {
		InitDeclaratorContext _localctx = new InitDeclaratorContext(Context, State);
		EnterRule(_localctx, 22, RULE_initDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			declarator();
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 199;
				Match(Assign);
				State = 200;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CParser.Const, 0); }
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 24, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star) {
				{
				State = 203;
				Match(Star);
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 204;
					Match(Const);
					}
				}

				}
			}

			State = 209;
			directDeclarator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DirectDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectDeclaratorContext directDeclarator() {
		return directDeclarator(0);
	}

	private DirectDeclaratorContext directDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DirectDeclaratorContext _localctx = new DirectDeclaratorContext(Context, _parentState);
		DirectDeclaratorContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_directDeclarator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 212;
				Match(Identifier);
				}
				break;
			case LeftParen:
				{
				State = 213;
				Match(LeftParen);
				State = 214;
				declarator();
				State = 215;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 230;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 228;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 219;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 220;
						Match(LeftBracket);
						State = 221;
						Match(Constant);
						State = 222;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 223;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 224;
						Match(LeftParen);
						State = 225;
						parameterList();
						State = 226;
						Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDirectDeclaratorContext abstractDirectDeclarator() {
			return GetRuleContext<AbstractDirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CParser.Const, 0); }
		public AbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclaratorContext abstractDeclarator() {
		AbstractDeclaratorContext _localctx = new AbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 28, RULE_abstractDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star) {
				{
				State = 233;
				Match(Star);
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 234;
					Match(Const);
					}
				}

				}
			}

			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 239;
				abstractDirectDeclarator(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDirectDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDirectDeclaratorContext abstractDirectDeclarator() {
			return GetRuleContext<AbstractDirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public AbstractDirectDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDirectDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDirectDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDirectDeclaratorContext abstractDirectDeclarator() {
		return abstractDirectDeclarator(0);
	}

	private AbstractDirectDeclaratorContext abstractDirectDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AbstractDirectDeclaratorContext _localctx = new AbstractDirectDeclaratorContext(Context, _parentState);
		AbstractDirectDeclaratorContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_abstractDirectDeclarator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 243;
			Match(LeftParen);
			State = 244;
			abstractDeclarator();
			State = 245;
			Match(RightParen);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 258;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 256;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new AbstractDirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_abstractDirectDeclarator);
						State = 247;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 248;
						Match(LeftBracket);
						State = 249;
						Match(Constant);
						State = 250;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new AbstractDirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_abstractDirectDeclarator);
						State = 251;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 252;
						Match(LeftParen);
						State = 253;
						parameterList();
						State = 254;
						Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StructOrUnionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Union() { return GetToken(CParser.Union, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext[] structDeclaration() {
			return GetRuleContexts<StructDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration(int i) {
			return GetRuleContext<StructDeclarationContext>(i);
		}
		public StructOrUnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structOrUnion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructOrUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructOrUnionContext structOrUnion() {
		StructOrUnionContext _localctx = new StructOrUnionContext(Context, State);
		EnterRule(_localctx, 32, RULE_structOrUnion);
		int _la;
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				_la = TokenStream.LA(1);
				if ( !(_la==Struct || _la==Union) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 262;
					Match(Identifier);
					}
				}

				State = 265;
				Match(LeftBrace);
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 266;
					structDeclaration();
					}
					}
					State = 269;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 282554278448L) != 0) || _la==Identifier );
				State = 271;
				Match(RightBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273;
				_la = TokenStream.LA(1);
				if ( !(_la==Struct || _la==Union) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 274;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier() {
			return GetRuleContext<DeclarationSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext[] declarator() {
			return GetRuleContexts<DeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator(int i) {
			return GetRuleContext<DeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			declarationSpecifier();
			State = 278;
			declarator();
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 279;
				Match(Comma);
				State = 280;
				declarator();
				}
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 286;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			Match(If);
			State = 291;
			Match(LeftParen);
			State = 292;
			expression();
			State = 293;
			Match(RightParen);
			State = 294;
			statement();
			State = 297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 295;
				Match(Else);
				State = 296;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(CParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_whileStatement);
		try {
			State = 313;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case While:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299;
				Match(While);
				State = 300;
				Match(LeftParen);
				State = 301;
				expression();
				State = 302;
				Match(RightParen);
				State = 303;
				statement();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305;
				Match(Do);
				State = 306;
				statement();
				State = 307;
				Match(While);
				State = 308;
				Match(LeftParen);
				State = 309;
				expression();
				State = 310;
				Match(RightParen);
				State = 311;
				Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public SemiStatementContext stmt1;
		public ExpressionStatementContext stmt3;
		public StatementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(CParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(CParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(CParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiStatementContext semiStatement() {
			return GetRuleContext<SemiStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(For);
			State = 316;
			Match(LeftParen);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3747030356902814256L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2952790017L) != 0)) {
				{
				State = 317;
				_localctx.stmt1 = semiStatement();
				}
			}

			State = 320;
			Match(Semi);
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 1548112372539393L) != 0)) {
				{
				State = 321;
				expression();
				}
			}

			State = 324;
			Match(Semi);
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 1548112372539393L) != 0)) {
				{
				State = 325;
				_localctx.stmt3 = expressionStatement();
				}
			}

			State = 328;
			Match(RightParen);
			State = 329;
			_localctx.body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(CParser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(CParser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessEqual() { return GetTokens(CParser.LessEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual(int i) {
			return GetToken(CParser.LessEqual, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CParser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterEqual() { return GetTokens(CParser.GreaterEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual(int i) {
			return GetToken(CParser.GreaterEqual, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			additiveExpression();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33776997205278720L) != 0)) {
				{
				{
				State = 332;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 33776997205278720L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 333;
				additiveExpression();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equal() { return GetTokens(CParser.Equal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal(int i) {
			return GetToken(CParser.Equal, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NotEqual() { return GetTokens(CParser.NotEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual(int i) {
			return GetToken(CParser.NotEqual, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			relationalExpression();
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Equal || _la==NotEqual) {
				{
				{
				State = 340;
				_la = TokenStream.LA(1);
				if ( !(_la==Equal || _la==NotEqual) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 341;
				relationalExpression();
				}
				}
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(CParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(CParser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			equalityExpression();
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==And) {
				{
				{
				State = 348;
				Match(And);
				State = 349;
				equalityExpression();
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Caret() { return GetTokens(CParser.Caret); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret(int i) {
			return GetToken(CParser.Caret, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_exclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			andExpression();
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Caret) {
				{
				{
				State = 356;
				Match(Caret);
				State = 357;
				andExpression();
				}
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(CParser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(CParser.Or, i);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_inclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			exclusiveOrExpression();
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Or) {
				{
				{
				State = 364;
				Match(Or);
				State = 365;
				exclusiveOrExpression();
				}
				}
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext[] inclusiveOrExpression() {
			return GetRuleContexts<InclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression(int i) {
			return GetRuleContext<InclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndAnd() { return GetTokens(CParser.AndAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd(int i) {
			return GetToken(CParser.AndAnd, i);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_logicalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			inclusiveOrExpression();
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AndAnd) {
				{
				{
				State = 372;
				Match(AndAnd);
				State = 373;
				inclusiveOrExpression();
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext[] logicalAndExpression() {
			return GetRuleContexts<LogicalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression(int i) {
			return GetRuleContext<LogicalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOr() { return GetTokens(CParser.OrOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr(int i) {
			return GetToken(CParser.OrOr, i);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_logicalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			logicalAndExpression();
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OrOr) {
				{
				{
				State = 380;
				Match(OrOr);
				State = 381;
				logicalAndExpression();
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_assignmentExpression);
		try {
			State = 391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387;
				logicalOrExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				Match(Identifier);
				State = 389;
				Match(Assign);
				State = 390;
				assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		public IndexExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexExpressionContext indexExpression() {
		IndexExpressionContext _localctx = new IndexExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_indexExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			primaryExpression();
			State = 394;
			Match(LeftBracket);
			State = 395;
			expression();
			State = 396;
			Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			Match(Return);
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 1548112372539393L) != 0)) {
				{
				State = 399;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		LvalueContext _localctx = new LvalueContext(Context, State);
		EnterRule(_localctx, 64, RULE_lvalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_castExpression);
		try {
			State = 412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 406;
				Match(LeftParen);
				State = 407;
				type();
				State = 408;
				Match(RightParen);
				State = 409;
				castExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 411;
				unaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CParser.MinusMinus, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_unaryExpression);
		int _la;
		try {
			State = 419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case Identifier:
			case Constant:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 414;
				postfixExpression();
				}
				break;
			case Star:
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 415;
				_la = TokenStream.LA(1);
				if ( !(_la==Star || _la==And) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 416;
				castExpression();
				}
				break;
			case PlusPlus:
			case MinusMinus:
				EnterOuterAlt(_localctx, 3);
				{
				State = 417;
				_la = TokenStream.LA(1);
				if ( !(_la==PlusPlus || _la==MinusMinus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 418;
				unaryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexExpressionContext indexExpression() {
			return GetRuleContext<IndexExpressionContext>(0);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_postfixExpression);
		int _la;
		try {
			State = 432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 421;
				primaryExpression();
				State = 429;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PlusPlus:
					{
					State = 422;
					Match(PlusPlus);
					}
					break;
				case MinusMinus:
					{
					State = 423;
					Match(MinusMinus);
					}
					break;
				case LeftParen:
					{
					{
					State = 424;
					Match(LeftParen);
					State = 426;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 1548112372539393L) != 0)) {
						{
						State = 425;
						argumentList();
						}
					}

					State = 428;
					Match(RightParen);
					}
					}
					break;
				case RightParen:
				case RightBracket:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case Plus:
				case Minus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Semi:
				case Comma:
				case Assign:
				case Equal:
				case NotEqual:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431;
				indexExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_primaryExpression);
		try {
			State = 440;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Constant:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434;
				constantExpression();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				variableExpression();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 436;
				Match(LeftParen);
				State = 437;
				expression();
				State = 438;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CParser.StringLiteral, 0); }
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_constantExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			_la = TokenStream.LA(1);
			if ( !(_la==Constant || _la==StringLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(CParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(CParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(CParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(CParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			multiplicativeExpression();
			State = 449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 445;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 446;
				multiplicativeExpression();
				}
				}
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(CParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(CParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Div() { return GetTokens(CParser.Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div(int i) {
			return GetToken(CParser.Div, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mod() { return GetTokens(CParser.Mod); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod(int i) {
			return GetToken(CParser.Mod, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			castExpression();
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2305843009213693952L) != 0)) {
				{
				{
				State = 453;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -2305843009213693952L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 454;
				castExpression();
				}
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public VariableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpressionContext variableExpression() {
		VariableExpressionContext _localctx = new VariableExpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_variableExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier() {
			return GetRuleContext<DeclarationSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			declarationSpecifier();
			State = 463;
			abstractDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructOrUnionContext structOrUnion() {
			return GetRuleContext<StructOrUnionContext>(0);
		}
		public UserTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserTypeContext userType() {
		UserTypeContext _localctx = new UserTypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_userType);
		try {
			State = 467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 465;
				Match(Identifier);
				}
				break;
			case Struct:
			case Union:
				EnterOuterAlt(_localctx, 2);
				{
				State = 466;
				structOrUnion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(CParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(CParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public BuiltinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinTypeContext builtinType() {
		BuiltinTypeContext _localctx = new BuiltinTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_builtinType);
		try {
			State = 472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 469;
				Match(Void);
				}
				break;
			case Bool:
				EnterOuterAlt(_localctx, 2);
				{
				State = 470;
				Match(Bool);
				}
				break;
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
				EnterOuterAlt(_localctx, 3);
				{
				State = 471;
				integerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedCharContext unsignedChar() {
			return GetRuleContext<UnsignedCharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedCharContext signedChar() {
			return GetRuleContext<SignedCharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedShortContext unsignedShort() {
			return GetRuleContext<UnsignedShortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedShortContext signedShort() {
			return GetRuleContext<SignedShortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedIntContext unsignedInt() {
			return GetRuleContext<UnsignedIntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedIntContext signedInt() {
			return GetRuleContext<SignedIntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedLongContext unsignedLong() {
			return GetRuleContext<UnsignedLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLongContext signedLong() {
			return GetRuleContext<SignedLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedLongLongContext unsignedLongLong() {
			return GetRuleContext<UnsignedLongLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLongLongContext signedLongLong() {
			return GetRuleContext<SignedLongLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleContext @double() {
			return GetRuleContext<DoubleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongDoubleContext longDouble() {
			return GetRuleContext<LongDoubleContext>(0);
		}
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(Context, State);
		EnterRule(_localctx, 90, RULE_integerType);
		try {
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474;
				unsignedChar();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475;
				signedChar();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 476;
				unsignedShort();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 477;
				signedShort();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 478;
				unsignedInt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 479;
				signedInt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 480;
				unsignedLong();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 481;
				signedLong();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 482;
				unsignedLongLong();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 483;
				signedLongLong();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 484;
				@float();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 485;
				@double();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 486;
				longDouble();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedCharContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		public UnsignedCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedChar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedCharContext unsignedChar() {
		UnsignedCharContext _localctx = new UnsignedCharContext(Context, State);
		EnterRule(_localctx, 92, RULE_unsignedChar);
		try {
			State = 492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Char:
				EnterOuterAlt(_localctx, 1);
				{
				State = 489;
				Match(Char);
				}
				break;
			case Unsigned:
				EnterOuterAlt(_localctx, 2);
				{
				State = 490;
				Match(Unsigned);
				State = 491;
				Match(Char);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedCharContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CParser.Char, 0); }
		public SignedCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedChar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedCharContext signedChar() {
		SignedCharContext _localctx = new SignedCharContext(Context, State);
		EnterRule(_localctx, 94, RULE_signedChar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(Signed);
			State = 495;
			Match(Char);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedShortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedShortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedShort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedShort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedShortContext unsignedShort() {
		UnsignedShortContext _localctx = new UnsignedShortContext(Context, State);
		EnterRule(_localctx, 96, RULE_unsignedShort);
		try {
			State = 502;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 497;
				Match(Unsigned);
				State = 498;
				Match(Short);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 499;
				Match(Unsigned);
				State = 500;
				Match(Short);
				State = 501;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedShortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedShortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedShort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedShort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedShortContext signedShort() {
		SignedShortContext _localctx = new SignedShortContext(Context, State);
		EnterRule(_localctx, 98, RULE_signedShort);
		try {
			State = 512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 504;
				Match(Short);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 505;
				Match(Short);
				State = 506;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 507;
				Match(Signed);
				State = 508;
				Match(Short);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 509;
				Match(Signed);
				State = 510;
				Match(Short);
				State = 511;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedIntContext unsignedInt() {
		UnsignedIntContext _localctx = new UnsignedIntContext(Context, State);
		EnterRule(_localctx, 100, RULE_unsignedInt);
		try {
			State = 517;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 514;
				Match(Unsigned);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 515;
				Match(Unsigned);
				State = 516;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedIntContext signedInt() {
		SignedIntContext _localctx = new SignedIntContext(Context, State);
		EnterRule(_localctx, 102, RULE_signedInt);
		try {
			State = 523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 519;
				Match(Int);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 520;
				Match(Signed);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 521;
				Match(Signed);
				State = 522;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedLongContext unsignedLong() {
		UnsignedLongContext _localctx = new UnsignedLongContext(Context, State);
		EnterRule(_localctx, 104, RULE_unsignedLong);
		try {
			State = 530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 525;
				Match(Unsigned);
				State = 526;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 527;
				Match(Unsigned);
				State = 528;
				Match(Long);
				State = 529;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedLongContext signedLong() {
		SignedLongContext _localctx = new SignedLongContext(Context, State);
		EnterRule(_localctx, 106, RULE_signedLong);
		try {
			State = 540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 532;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 533;
				Match(Long);
				State = 534;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 535;
				Match(Signed);
				State = 536;
				Match(Long);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 537;
				Match(Signed);
				State = 538;
				Match(Long);
				State = 539;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedLongLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Long() { return GetTokens(CParser.Long); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long(int i) {
			return GetToken(CParser.Long, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedLongLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedLongLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedLongLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedLongLongContext unsignedLongLong() {
		UnsignedLongLongContext _localctx = new UnsignedLongLongContext(Context, State);
		EnterRule(_localctx, 108, RULE_unsignedLongLong);
		try {
			State = 549;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 542;
				Match(Unsigned);
				State = 543;
				Match(Long);
				State = 544;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 545;
				Match(Unsigned);
				State = 546;
				Match(Long);
				State = 547;
				Match(Long);
				State = 548;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLongLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Long() { return GetTokens(CParser.Long); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long(int i) {
			return GetToken(CParser.Long, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedLongLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLongLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedLongLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedLongLongContext signedLongLong() {
		SignedLongLongContext _localctx = new SignedLongLongContext(Context, State);
		EnterRule(_localctx, 110, RULE_signedLongLong);
		try {
			State = 563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551;
				Match(Long);
				State = 552;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 553;
				Match(Long);
				State = 554;
				Match(Long);
				State = 555;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 556;
				Match(Signed);
				State = 557;
				Match(Long);
				State = 558;
				Match(Long);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 559;
				Match(Signed);
				State = 560;
				Match(Long);
				State = 561;
				Match(Long);
				State = 562;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(CParser.Float, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 112, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			Match(Float);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CParser.Double, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 114, RULE_double);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(Double);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongDoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CParser.Double, 0); }
		public LongDoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longDouble; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongDouble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongDoubleContext longDouble() {
		LongDoubleContext _localctx = new LongDoubleContext(Context, State);
		EnterRule(_localctx, 116, RULE_longDouble);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			Match(Long);
			State = 570;
			Match(Double);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineMarkerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Constant() { return GetTokens(CParser.Constant); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant(int i) {
			return GetToken(CParser.Constant, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CParser.StringLiteral, 0); }
		public LineMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineMarker; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineMarkerContext lineMarker() {
		LineMarkerContext _localctx = new LineMarkerContext(Context, State);
		EnterRule(_localctx, 118, RULE_lineMarker);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			Match(Hashtag);
			State = 573;
			Match(Constant);
			State = 574;
			Match(StringLiteral);
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Constant) {
				{
				{
				State = 575;
				Match(Constant);
				}
				}
				State = 580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return directDeclarator_sempred((DirectDeclaratorContext)_localctx, predIndex);
		case 15: return abstractDirectDeclarator_sempred((AbstractDirectDeclaratorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool directDeclarator_sempred(DirectDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool abstractDirectDeclarator_sempred(AbstractDirectDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,100,582,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,5,0,123,8,0,10,0,12,0,126,9,0,1,
		0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,5,2,137,8,2,10,2,12,2,140,9,2,3,2,142,
		8,2,1,3,1,3,1,3,1,4,1,4,1,4,5,4,150,8,4,10,4,12,4,153,9,4,1,5,1,5,5,5,
		157,8,5,10,5,12,5,160,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,171,
		8,6,1,7,1,7,1,7,1,7,3,7,177,8,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,187,
		8,9,10,9,12,9,190,9,9,1,10,3,10,193,8,10,1,10,1,10,3,10,197,8,10,1,11,
		1,11,1,11,3,11,202,8,11,1,12,1,12,3,12,206,8,12,3,12,208,8,12,1,12,1,12,
		1,13,1,13,1,13,1,13,1,13,1,13,3,13,218,8,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,5,13,229,8,13,10,13,12,13,232,9,13,1,14,1,14,3,14,236,
		8,14,3,14,238,8,14,1,14,3,14,241,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,257,8,15,10,15,12,15,260,9,
		15,1,16,1,16,3,16,264,8,16,1,16,1,16,4,16,268,8,16,11,16,12,16,269,1,16,
		1,16,1,16,1,16,3,16,276,8,16,1,17,1,17,1,17,1,17,5,17,282,8,17,10,17,12,
		17,285,9,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,
		298,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,3,20,314,8,20,1,21,1,21,1,21,3,21,319,8,21,1,21,1,21,3,21,323,
		8,21,1,21,1,21,3,21,327,8,21,1,21,1,21,1,21,1,22,1,22,1,22,5,22,335,8,
		22,10,22,12,22,338,9,22,1,23,1,23,1,23,5,23,343,8,23,10,23,12,23,346,9,
		23,1,24,1,24,1,24,5,24,351,8,24,10,24,12,24,354,9,24,1,25,1,25,1,25,5,
		25,359,8,25,10,25,12,25,362,9,25,1,26,1,26,1,26,5,26,367,8,26,10,26,12,
		26,370,9,26,1,27,1,27,1,27,5,27,375,8,27,10,27,12,27,378,9,27,1,28,1,28,
		1,28,5,28,383,8,28,10,28,12,28,386,9,28,1,29,1,29,1,29,1,29,3,29,392,8,
		29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,3,31,401,8,31,1,32,1,32,1,33,1,33,
		1,34,1,34,1,34,1,34,1,34,1,34,3,34,413,8,34,1,35,1,35,1,35,1,35,1,35,3,
		35,420,8,35,1,36,1,36,1,36,1,36,1,36,3,36,427,8,36,1,36,3,36,430,8,36,
		1,36,3,36,433,8,36,1,37,1,37,1,37,1,37,1,37,1,37,3,37,441,8,37,1,38,1,
		38,1,39,1,39,1,39,5,39,448,8,39,10,39,12,39,451,9,39,1,40,1,40,1,40,5,
		40,456,8,40,10,40,12,40,459,9,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,3,
		43,468,8,43,1,44,1,44,1,44,3,44,473,8,44,1,45,1,45,1,45,1,45,1,45,1,45,
		1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,488,8,45,1,46,1,46,1,46,3,46,493,
		8,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,3,48,503,8,48,1,49,1,49,1,
		49,1,49,1,49,1,49,1,49,1,49,3,49,513,8,49,1,50,1,50,1,50,3,50,518,8,50,
		1,51,1,51,1,51,1,51,3,51,524,8,51,1,52,1,52,1,52,1,52,1,52,3,52,531,8,
		52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,541,8,53,1,54,1,54,1,54,
		1,54,1,54,1,54,1,54,3,54,550,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
		55,1,55,1,55,1,55,1,55,3,55,564,8,55,1,56,1,56,1,57,1,57,1,58,1,58,1,58,
		1,59,1,59,1,59,1,59,5,59,577,8,59,10,59,12,59,580,9,59,1,59,0,2,26,30,
		60,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
		96,98,100,102,104,106,108,110,112,114,116,118,0,8,2,0,27,27,30,30,1,0,
		51,54,1,0,86,87,2,0,61,61,64,64,2,0,58,58,60,60,2,0,93,93,95,95,2,0,57,
		57,59,59,1,0,61,63,610,0,124,1,0,0,0,2,129,1,0,0,0,4,141,1,0,0,0,6,143,
		1,0,0,0,8,146,1,0,0,0,10,154,1,0,0,0,12,170,1,0,0,0,14,176,1,0,0,0,16,
		178,1,0,0,0,18,182,1,0,0,0,20,192,1,0,0,0,22,198,1,0,0,0,24,207,1,0,0,
		0,26,217,1,0,0,0,28,237,1,0,0,0,30,242,1,0,0,0,32,275,1,0,0,0,34,277,1,
		0,0,0,36,288,1,0,0,0,38,290,1,0,0,0,40,313,1,0,0,0,42,315,1,0,0,0,44,331,
		1,0,0,0,46,339,1,0,0,0,48,347,1,0,0,0,50,355,1,0,0,0,52,363,1,0,0,0,54,
		371,1,0,0,0,56,379,1,0,0,0,58,391,1,0,0,0,60,393,1,0,0,0,62,398,1,0,0,
		0,64,402,1,0,0,0,66,404,1,0,0,0,68,412,1,0,0,0,70,419,1,0,0,0,72,432,1,
		0,0,0,74,440,1,0,0,0,76,442,1,0,0,0,78,444,1,0,0,0,80,452,1,0,0,0,82,460,
		1,0,0,0,84,462,1,0,0,0,86,467,1,0,0,0,88,472,1,0,0,0,90,487,1,0,0,0,92,
		492,1,0,0,0,94,494,1,0,0,0,96,502,1,0,0,0,98,512,1,0,0,0,100,517,1,0,0,
		0,102,523,1,0,0,0,104,530,1,0,0,0,106,540,1,0,0,0,108,549,1,0,0,0,110,
		563,1,0,0,0,112,565,1,0,0,0,114,567,1,0,0,0,116,569,1,0,0,0,118,572,1,
		0,0,0,120,123,3,118,59,0,121,123,3,2,1,0,122,120,1,0,0,0,122,121,1,0,0,
		0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,127,1,0,0,0,126,
		124,1,0,0,0,127,128,5,0,0,1,128,1,1,0,0,0,129,130,3,20,10,0,130,131,3,
		24,12,0,131,132,3,10,5,0,132,3,1,0,0,0,133,138,3,6,3,0,134,135,5,74,0,
		0,135,137,3,6,3,0,136,134,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,
		139,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,141,133,1,0,0,0,141,142,1,
		0,0,0,142,5,1,0,0,0,143,144,3,20,10,0,144,145,3,24,12,0,145,7,1,0,0,0,
		146,151,3,66,33,0,147,148,5,74,0,0,148,150,3,66,33,0,149,147,1,0,0,0,150,
		153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,9,1,0,0,0,153,151,1,0,
		0,0,154,158,5,49,0,0,155,157,3,12,6,0,156,155,1,0,0,0,157,160,1,0,0,0,
		158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,158,1,0,0,0,161,162,
		5,50,0,0,162,11,1,0,0,0,163,164,3,14,7,0,164,165,5,73,0,0,165,171,1,0,
		0,0,166,171,3,10,5,0,167,171,3,38,19,0,168,171,3,40,20,0,169,171,3,42,
		21,0,170,163,1,0,0,0,170,166,1,0,0,0,170,167,1,0,0,0,170,168,1,0,0,0,170,
		169,1,0,0,0,171,13,1,0,0,0,172,177,3,62,31,0,173,177,3,16,8,0,174,177,
		3,18,9,0,175,177,3,36,18,0,176,172,1,0,0,0,176,173,1,0,0,0,176,174,1,0,
		0,0,176,175,1,0,0,0,177,15,1,0,0,0,178,179,3,64,32,0,179,180,5,75,0,0,
		180,181,3,66,33,0,181,17,1,0,0,0,182,183,3,20,10,0,183,188,3,22,11,0,184,
		185,5,74,0,0,185,187,3,22,11,0,186,184,1,0,0,0,187,190,1,0,0,0,188,186,
		1,0,0,0,188,189,1,0,0,0,189,19,1,0,0,0,190,188,1,0,0,0,191,193,5,5,0,0,
		192,191,1,0,0,0,192,193,1,0,0,0,193,196,1,0,0,0,194,197,3,86,43,0,195,
		197,3,88,44,0,196,194,1,0,0,0,196,195,1,0,0,0,197,21,1,0,0,0,198,201,3,
		24,12,0,199,200,5,75,0,0,200,202,3,66,33,0,201,199,1,0,0,0,201,202,1,0,
		0,0,202,23,1,0,0,0,203,205,5,61,0,0,204,206,5,5,0,0,205,204,1,0,0,0,205,
		206,1,0,0,0,206,208,1,0,0,0,207,203,1,0,0,0,207,208,1,0,0,0,208,209,1,
		0,0,0,209,210,3,26,13,0,210,25,1,0,0,0,211,212,6,13,-1,0,212,218,5,92,
		0,0,213,214,5,45,0,0,214,215,3,24,12,0,215,216,5,46,0,0,216,218,1,0,0,
		0,217,211,1,0,0,0,217,213,1,0,0,0,218,230,1,0,0,0,219,220,10,2,0,0,220,
		221,5,47,0,0,221,222,5,93,0,0,222,229,5,48,0,0,223,224,10,1,0,0,224,225,
		5,45,0,0,225,226,3,4,2,0,226,227,5,46,0,0,227,229,1,0,0,0,228,219,1,0,
		0,0,228,223,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,
		27,1,0,0,0,232,230,1,0,0,0,233,235,5,61,0,0,234,236,5,5,0,0,235,234,1,
		0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,233,1,0,0,0,237,238,1,0,0,0,
		238,240,1,0,0,0,239,241,3,30,15,0,240,239,1,0,0,0,240,241,1,0,0,0,241,
		29,1,0,0,0,242,243,6,15,-1,0,243,244,5,45,0,0,244,245,3,28,14,0,245,246,
		5,46,0,0,246,258,1,0,0,0,247,248,10,2,0,0,248,249,5,47,0,0,249,250,5,93,
		0,0,250,257,5,48,0,0,251,252,10,1,0,0,252,253,5,45,0,0,253,254,3,4,2,0,
		254,255,5,46,0,0,255,257,1,0,0,0,256,247,1,0,0,0,256,251,1,0,0,0,257,260,
		1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,31,1,0,0,0,260,258,1,0,0,0,
		261,263,7,0,0,0,262,264,5,92,0,0,263,262,1,0,0,0,263,264,1,0,0,0,264,265,
		1,0,0,0,265,267,5,49,0,0,266,268,3,34,17,0,267,266,1,0,0,0,268,269,1,0,
		0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,272,5,48,0,0,272,
		276,1,0,0,0,273,274,7,0,0,0,274,276,5,92,0,0,275,261,1,0,0,0,275,273,1,
		0,0,0,276,33,1,0,0,0,277,278,3,20,10,0,278,283,3,24,12,0,279,280,5,74,
		0,0,280,282,3,24,12,0,281,279,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,
		283,284,1,0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,287,5,73,0,0,287,35,
		1,0,0,0,288,289,3,66,33,0,289,37,1,0,0,0,290,291,5,16,0,0,291,292,5,45,
		0,0,292,293,3,66,33,0,293,294,5,46,0,0,294,297,3,12,6,0,295,296,5,10,0,
		0,296,298,3,12,6,0,297,295,1,0,0,0,297,298,1,0,0,0,298,39,1,0,0,0,299,
		300,5,34,0,0,300,301,5,45,0,0,301,302,3,66,33,0,302,303,5,46,0,0,303,304,
		3,12,6,0,304,314,1,0,0,0,305,306,5,8,0,0,306,307,3,12,6,0,307,308,5,34,
		0,0,308,309,5,45,0,0,309,310,3,66,33,0,310,311,5,46,0,0,311,312,5,73,0,
		0,312,314,1,0,0,0,313,299,1,0,0,0,313,305,1,0,0,0,314,41,1,0,0,0,315,316,
		5,14,0,0,316,318,5,45,0,0,317,319,3,14,7,0,318,317,1,0,0,0,318,319,1,0,
		0,0,319,320,1,0,0,0,320,322,5,73,0,0,321,323,3,66,33,0,322,321,1,0,0,0,
		322,323,1,0,0,0,323,324,1,0,0,0,324,326,5,73,0,0,325,327,3,36,18,0,326,
		325,1,0,0,0,326,327,1,0,0,0,327,328,1,0,0,0,328,329,5,46,0,0,329,330,3,
		12,6,0,330,43,1,0,0,0,331,336,3,78,39,0,332,333,7,1,0,0,333,335,3,78,39,
		0,334,332,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,
		45,1,0,0,0,338,336,1,0,0,0,339,344,3,44,22,0,340,341,7,2,0,0,341,343,3,
		44,22,0,342,340,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,
		0,345,47,1,0,0,0,346,344,1,0,0,0,347,352,3,46,23,0,348,349,5,64,0,0,349,
		351,3,46,23,0,350,348,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,353,
		1,0,0,0,353,49,1,0,0,0,354,352,1,0,0,0,355,360,3,48,24,0,356,357,5,68,
		0,0,357,359,3,48,24,0,358,356,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,
		360,361,1,0,0,0,361,51,1,0,0,0,362,360,1,0,0,0,363,368,3,50,25,0,364,365,
		5,65,0,0,365,367,3,50,25,0,366,364,1,0,0,0,367,370,1,0,0,0,368,366,1,0,
		0,0,368,369,1,0,0,0,369,53,1,0,0,0,370,368,1,0,0,0,371,376,3,52,26,0,372,
		373,5,66,0,0,373,375,3,52,26,0,374,372,1,0,0,0,375,378,1,0,0,0,376,374,
		1,0,0,0,376,377,1,0,0,0,377,55,1,0,0,0,378,376,1,0,0,0,379,384,3,54,27,
		0,380,381,5,67,0,0,381,383,3,54,27,0,382,380,1,0,0,0,383,386,1,0,0,0,384,
		382,1,0,0,0,384,385,1,0,0,0,385,57,1,0,0,0,386,384,1,0,0,0,387,392,3,56,
		28,0,388,389,5,92,0,0,389,390,5,75,0,0,390,392,3,58,29,0,391,387,1,0,0,
		0,391,388,1,0,0,0,392,59,1,0,0,0,393,394,3,74,37,0,394,395,5,47,0,0,395,
		396,3,66,33,0,396,397,5,48,0,0,397,61,1,0,0,0,398,400,5,22,0,0,399,401,
		3,66,33,0,400,399,1,0,0,0,400,401,1,0,0,0,401,63,1,0,0,0,402,403,3,66,
		33,0,403,65,1,0,0,0,404,405,3,58,29,0,405,67,1,0,0,0,406,407,5,45,0,0,
		407,408,3,84,42,0,408,409,5,46,0,0,409,410,3,68,34,0,410,413,1,0,0,0,411,
		413,3,70,35,0,412,406,1,0,0,0,412,411,1,0,0,0,413,69,1,0,0,0,414,420,3,
		72,36,0,415,416,7,3,0,0,416,420,3,68,34,0,417,418,7,4,0,0,418,420,3,70,
		35,0,419,414,1,0,0,0,419,415,1,0,0,0,419,417,1,0,0,0,420,71,1,0,0,0,421,
		429,3,74,37,0,422,430,5,58,0,0,423,430,5,60,0,0,424,426,5,45,0,0,425,427,
		3,8,4,0,426,425,1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,430,5,46,0,
		0,429,422,1,0,0,0,429,423,1,0,0,0,429,424,1,0,0,0,429,430,1,0,0,0,430,
		433,1,0,0,0,431,433,3,60,30,0,432,421,1,0,0,0,432,431,1,0,0,0,433,73,1,
		0,0,0,434,441,3,76,38,0,435,441,3,82,41,0,436,437,5,45,0,0,437,438,3,66,
		33,0,438,439,5,46,0,0,439,441,1,0,0,0,440,434,1,0,0,0,440,435,1,0,0,0,
		440,436,1,0,0,0,441,75,1,0,0,0,442,443,7,5,0,0,443,77,1,0,0,0,444,449,
		3,80,40,0,445,446,7,6,0,0,446,448,3,80,40,0,447,445,1,0,0,0,448,451,1,
		0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,79,1,0,0,0,451,449,1,0,0,0,452,
		457,3,68,34,0,453,454,7,7,0,0,454,456,3,68,34,0,455,453,1,0,0,0,456,459,
		1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,81,1,0,0,0,459,457,1,0,0,0,
		460,461,5,92,0,0,461,83,1,0,0,0,462,463,3,20,10,0,463,464,3,28,14,0,464,
		85,1,0,0,0,465,468,5,92,0,0,466,468,3,32,16,0,467,465,1,0,0,0,467,466,
		1,0,0,0,468,87,1,0,0,0,469,473,5,32,0,0,470,473,5,38,0,0,471,473,3,90,
		45,0,472,469,1,0,0,0,472,470,1,0,0,0,472,471,1,0,0,0,473,89,1,0,0,0,474,
		488,3,92,46,0,475,488,3,94,47,0,476,488,3,96,48,0,477,488,3,98,49,0,478,
		488,3,100,50,0,479,488,3,102,51,0,480,488,3,104,52,0,481,488,3,106,53,
		0,482,488,3,108,54,0,483,488,3,110,55,0,484,488,3,112,56,0,485,488,3,114,
		57,0,486,488,3,116,58,0,487,474,1,0,0,0,487,475,1,0,0,0,487,476,1,0,0,
		0,487,477,1,0,0,0,487,478,1,0,0,0,487,479,1,0,0,0,487,480,1,0,0,0,487,
		481,1,0,0,0,487,482,1,0,0,0,487,483,1,0,0,0,487,484,1,0,0,0,487,485,1,
		0,0,0,487,486,1,0,0,0,488,91,1,0,0,0,489,493,5,4,0,0,490,491,5,31,0,0,
		491,493,5,4,0,0,492,489,1,0,0,0,492,490,1,0,0,0,493,93,1,0,0,0,494,495,
		5,24,0,0,495,496,5,4,0,0,496,95,1,0,0,0,497,498,5,31,0,0,498,503,5,23,
		0,0,499,500,5,31,0,0,500,501,5,23,0,0,501,503,5,18,0,0,502,497,1,0,0,0,
		502,499,1,0,0,0,503,97,1,0,0,0,504,513,5,23,0,0,505,506,5,23,0,0,506,513,
		5,18,0,0,507,508,5,24,0,0,508,513,5,23,0,0,509,510,5,24,0,0,510,511,5,
		23,0,0,511,513,5,18,0,0,512,504,1,0,0,0,512,505,1,0,0,0,512,507,1,0,0,
		0,512,509,1,0,0,0,513,99,1,0,0,0,514,518,5,31,0,0,515,516,5,31,0,0,516,
		518,5,18,0,0,517,514,1,0,0,0,517,515,1,0,0,0,518,101,1,0,0,0,519,524,5,
		18,0,0,520,524,5,24,0,0,521,522,5,24,0,0,522,524,5,18,0,0,523,519,1,0,
		0,0,523,520,1,0,0,0,523,521,1,0,0,0,524,103,1,0,0,0,525,526,5,31,0,0,526,
		531,5,19,0,0,527,528,5,31,0,0,528,529,5,19,0,0,529,531,5,18,0,0,530,525,
		1,0,0,0,530,527,1,0,0,0,531,105,1,0,0,0,532,541,5,19,0,0,533,534,5,19,
		0,0,534,541,5,18,0,0,535,536,5,24,0,0,536,541,5,19,0,0,537,538,5,24,0,
		0,538,539,5,19,0,0,539,541,5,18,0,0,540,532,1,0,0,0,540,533,1,0,0,0,540,
		535,1,0,0,0,540,537,1,0,0,0,541,107,1,0,0,0,542,543,5,31,0,0,543,544,5,
		19,0,0,544,550,5,19,0,0,545,546,5,31,0,0,546,547,5,19,0,0,547,548,5,19,
		0,0,548,550,5,18,0,0,549,542,1,0,0,0,549,545,1,0,0,0,550,109,1,0,0,0,551,
		552,5,19,0,0,552,564,5,19,0,0,553,554,5,19,0,0,554,555,5,19,0,0,555,564,
		5,18,0,0,556,557,5,24,0,0,557,558,5,19,0,0,558,564,5,19,0,0,559,560,5,
		24,0,0,560,561,5,19,0,0,561,562,5,19,0,0,562,564,5,18,0,0,563,551,1,0,
		0,0,563,553,1,0,0,0,563,556,1,0,0,0,563,559,1,0,0,0,564,111,1,0,0,0,565,
		566,5,13,0,0,566,113,1,0,0,0,567,568,5,9,0,0,568,115,1,0,0,0,569,570,5,
		19,0,0,570,571,5,9,0,0,571,117,1,0,0,0,572,573,5,91,0,0,573,574,5,93,0,
		0,574,578,5,95,0,0,575,577,5,93,0,0,576,575,1,0,0,0,577,580,1,0,0,0,578,
		576,1,0,0,0,578,579,1,0,0,0,579,119,1,0,0,0,580,578,1,0,0,0,61,122,124,
		138,141,151,158,170,176,188,192,196,201,205,207,217,228,230,235,237,240,
		256,258,263,269,275,283,297,313,318,322,326,336,344,352,360,368,376,384,
		391,400,412,419,426,429,432,440,449,457,467,472,487,492,502,512,517,523,
		530,540,549,563,578
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DankleC
