//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/daniel/Documents/CSharp/Dankle/DankleC/C.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DankleC {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, Auto=2, Break=3, Case=4, Char=5, Const=6, Continue=7, Default=8, 
		Do=9, Double=10, Else=11, Enum=12, Extern=13, Float=14, For=15, Goto=16, 
		If=17, Inline=18, Int=19, Long=20, Register=21, Restrict=22, Return=23, 
		Short=24, Signed=25, Sizeof=26, Static=27, Struct=28, Switch=29, Typedef=30, 
		Union=31, Unsigned=32, Void=33, Volatile=34, While=35, Alignas=36, Alignof=37, 
		Atomic=38, Bool=39, Complex=40, Generic=41, Imaginary=42, Noreturn=43, 
		StaticAssert=44, ThreadLocal=45, LeftParen=46, RightParen=47, LeftBracket=48, 
		RightBracket=49, LeftBrace=50, RightBrace=51, Less=52, LessEqual=53, Greater=54, 
		GreaterEqual=55, LeftShift=56, RightShift=57, Plus=58, PlusPlus=59, Minus=60, 
		MinusMinus=61, Star=62, Div=63, Mod=64, And=65, Or=66, AndAnd=67, OrOr=68, 
		Caret=69, Not=70, Tilde=71, Question=72, Colon=73, Semi=74, Comma=75, 
		Assign=76, StarAssign=77, DivAssign=78, ModAssign=79, PlusAssign=80, MinusAssign=81, 
		LeftShiftAssign=82, RightShiftAssign=83, AndAssign=84, XorAssign=85, OrAssign=86, 
		Equal=87, NotEqual=88, Arrow=89, Dot=90, Ellipsis=91, Hashtag=92, Identifier=93, 
		Constant=94, DigitSequence=95, StringLiteral=96, AsmBlock=97, Whitespace=98, 
		Newline=99, BlockComment=100, LineComment=101;
	public const int
		RULE_root = 0, RULE_function = 1, RULE_parameterList = 2, RULE_parameterDeclaration = 3, 
		RULE_argumentList = 4, RULE_scope = 5, RULE_statement = 6, RULE_semiStatement = 7, 
		RULE_declaration = 8, RULE_declarationSpecifier = 9, RULE_initDeclarator = 10, 
		RULE_arrayInitializer = 11, RULE_declarator = 12, RULE_directDeclarator = 13, 
		RULE_abstractDeclarator = 14, RULE_abstractDirectDeclarator = 15, RULE_structOrUnion = 16, 
		RULE_structDeclaration = 17, RULE_expressionStatement = 18, RULE_ifStatement = 19, 
		RULE_switchStatement = 20, RULE_switchBlock = 21, RULE_whileStatement = 22, 
		RULE_forStatement = 23, RULE_loopControlStatement = 24, RULE_gotoStatement = 25, 
		RULE_labelStatement = 26, RULE_shiftExpression = 27, RULE_relationalExpression = 28, 
		RULE_equalityExpression = 29, RULE_andExpression = 30, RULE_exclusiveOrExpression = 31, 
		RULE_inclusiveOrExpression = 32, RULE_logicalAndExpression = 33, RULE_logicalOrExpression = 34, 
		RULE_conditionalExpression = 35, RULE_assignmentExpression = 36, RULE_returnStatement = 37, 
		RULE_lvalue = 38, RULE_expression = 39, RULE_castExpression = 40, RULE_unaryExpression = 41, 
		RULE_postfixExpression = 42, RULE_partialPostfixExpression = 43, RULE_primaryExpression = 44, 
		RULE_constantExpression = 45, RULE_additiveExpression = 46, RULE_multiplicativeExpression = 47, 
		RULE_variableExpression = 48, RULE_type = 49, RULE_userType = 50, RULE_builtinType = 51, 
		RULE_integerType = 52, RULE_unsignedChar = 53, RULE_signedChar = 54, RULE_unsignedShort = 55, 
		RULE_signedShort = 56, RULE_unsignedInt = 57, RULE_signedInt = 58, RULE_unsignedLong = 59, 
		RULE_signedLong = 60, RULE_unsignedLongLong = 61, RULE_signedLongLong = 62, 
		RULE_float = 63, RULE_double = 64, RULE_longDouble = 65, RULE_lineMarker = 66;
	public static readonly string[] ruleNames = {
		"root", "function", "parameterList", "parameterDeclaration", "argumentList", 
		"scope", "statement", "semiStatement", "declaration", "declarationSpecifier", 
		"initDeclarator", "arrayInitializer", "declarator", "directDeclarator", 
		"abstractDeclarator", "abstractDirectDeclarator", "structOrUnion", "structDeclaration", 
		"expressionStatement", "ifStatement", "switchStatement", "switchBlock", 
		"whileStatement", "forStatement", "loopControlStatement", "gotoStatement", 
		"labelStatement", "shiftExpression", "relationalExpression", "equalityExpression", 
		"andExpression", "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
		"logicalOrExpression", "conditionalExpression", "assignmentExpression", 
		"returnStatement", "lvalue", "expression", "castExpression", "unaryExpression", 
		"postfixExpression", "partialPostfixExpression", "primaryExpression", 
		"constantExpression", "additiveExpression", "multiplicativeExpression", 
		"variableExpression", "type", "userType", "builtinType", "integerType", 
		"unsignedChar", "signedChar", "unsignedShort", "signedShort", "unsignedInt", 
		"signedInt", "unsignedLong", "signedLong", "unsignedLongLong", "signedLongLong", 
		"float", "double", "longDouble", "lineMarker"
	};

	private static readonly string[] _LiteralNames = {
		null, "'line'", "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", 
		"'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", 
		"'for'", "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", 
		"'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", 
		"'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", 
		"'volatile'", "'while'", "'_Alignas'", "'_Alignof'", "'_Atomic'", "'_Bool'", 
		"'_Complex'", "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
		"'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
		"'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", "':'", 
		"';'", "','", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
		"'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'", 
		"'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "Auto", "Break", "Case", "Char", "Const", "Continue", "Default", 
		"Do", "Double", "Else", "Enum", "Extern", "Float", "For", "Goto", "If", 
		"Inline", "Int", "Long", "Register", "Restrict", "Return", "Short", "Signed", 
		"Sizeof", "Static", "Struct", "Switch", "Typedef", "Union", "Unsigned", 
		"Void", "Volatile", "While", "Alignas", "Alignof", "Atomic", "Bool", "Complex", 
		"Generic", "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", "LeftParen", 
		"RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
		"Less", "LessEqual", "Greater", "GreaterEqual", "LeftShift", "RightShift", 
		"Plus", "PlusPlus", "Minus", "MinusMinus", "Star", "Div", "Mod", "And", 
		"Or", "AndAnd", "OrOr", "Caret", "Not", "Tilde", "Question", "Colon", 
		"Semi", "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign", "PlusAssign", 
		"MinusAssign", "LeftShiftAssign", "RightShiftAssign", "AndAssign", "XorAssign", 
		"OrAssign", "Equal", "NotEqual", "Arrow", "Dot", "Ellipsis", "Hashtag", 
		"Identifier", "Constant", "DigitSequence", "StringLiteral", "AsmBlock", 
		"Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "C.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineMarkerContext[] lineMarker() {
			return GetRuleContexts<LineMarkerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineMarkerContext lineMarker(int i) {
			return GetRuleContext<LineMarkerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(CParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(CParser.Semi, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 566316524640L) != 0) || _la==Hashtag || _la==Identifier) {
				{
				State = 139;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 134;
					lineMarker();
					}
					break;
				case 2:
					{
					State = 135;
					function();
					}
					break;
				case 3:
					{
					{
					State = 136;
					declaration();
					{
					State = 137;
					Match(Semi);
					}
					}
					}
					break;
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 144;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier() {
			return GetRuleContext<DeclarationSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CParser.Static, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Static) {
				{
				State = 146;
				Match(Static);
				}
			}

			State = 149;
			declarationSpecifier();
			State = 150;
			declarator();
			State = 151;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext[] parameterDeclaration() {
			return GetRuleContexts<ParameterDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext parameterDeclaration(int i) {
			return GetRuleContext<ParameterDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(CParser.Ellipsis, 0); }
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 4, RULE_parameterList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 566182306912L) != 0) || _la==Identifier) {
				{
				State = 153;
				parameterDeclaration();
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 154;
						Match(Comma);
						State = 155;
						parameterDeclaration();
						}
						} 
					}
					State = 160;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
			}

			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 163;
				Match(Comma);
				State = 164;
				Match(Ellipsis);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier() {
			return GetRuleContext<DeclarationSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_parameterDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			declarationSpecifier();
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 168;
				declarator();
				}
				break;
			case 2:
				{
				State = 169;
				abstractDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 8, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			expression();
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 173;
				Match(Comma);
				State = 174;
				expression();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 10, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(LeftBrace);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8648108154491234024L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2952790625L) != 0)) {
				{
				{
				State = 181;
				statement();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 187;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SemiStatementContext semiStatement() {
			return GetRuleContext<SemiStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelStatementContext labelStatement() {
			return GetRuleContext<LabelStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189;
				semiStatement();
				State = 190;
				Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192;
				scope();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 193;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 194;
				whileStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 195;
				forStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 196;
				switchStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 197;
				labelStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 198;
				Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopControlStatementContext loopControlStatement() {
			return GetRuleContext<LoopControlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public SemiStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semiStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemiStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemiStatementContext semiStatement() {
		SemiStatementContext _localctx = new SemiStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_semiStatement);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				returnStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				loopControlStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203;
				expressionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 204;
				gotoStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 205;
				declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier() {
			return GetRuleContext<DeclarationSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(CParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext[] initDeclarator() {
			return GetRuleContexts<InitDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext initDeclarator(int i) {
			return GetRuleContext<InitDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Static) {
				{
				State = 208;
				Match(Static);
				}
			}

			State = 211;
			declarationSpecifier();
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & 140737488420865L) != 0)) {
				{
				State = 212;
				initDeclarator();
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 213;
					Match(Comma);
					State = 214;
					initDeclarator();
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserTypeContext userType() {
			return GetRuleContext<UserTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinTypeContext builtinType() {
			return GetRuleContext<BuiltinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typedef() { return GetToken(CParser.Typedef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Const() { return GetTokens(CParser.Const); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const(int i) {
			return GetToken(CParser.Const, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Extern() { return GetTokens(CParser.Extern); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern(int i) {
			return GetToken(CParser.Extern, i);
		}
		public DeclarationSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifierContext declarationSpecifier() {
		DeclarationSpecifierContext _localctx = new DeclarationSpecifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_declarationSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Typedef) {
				{
				State = 222;
				Match(Typedef);
				}
			}

			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Const || _la==Extern) {
				{
				{
				State = 225;
				_la = TokenStream.LA(1);
				if ( !(_la==Const || _la==Extern) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Struct:
			case Union:
			case Identifier:
				{
				State = 231;
				userType();
				}
				break;
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Bool:
				{
				State = 232;
				builtinType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public InitDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorContext initDeclarator() {
		InitDeclaratorContext _localctx = new InitDeclaratorContext(Context, State);
		EnterRule(_localctx, 20, RULE_initDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			declarator();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 236;
				Match(Assign);
				State = 239;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Sizeof:
				case LeftParen:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case And:
				case Not:
				case Tilde:
				case Identifier:
				case Constant:
				case StringLiteral:
					{
					State = 237;
					expression();
					}
					break;
				case LeftBrace:
					{
					State = 238;
					arrayInitializer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 22, RULE_arrayInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(LeftBrace);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 244;
				expression();
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 245;
					Match(Comma);
					State = 246;
					expression();
					}
					}
					State = 251;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8646981653362638848L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2952790113L) != 0) );
			State = 256;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(CParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(CParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CParser.Const, 0); }
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 24, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star) {
				{
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 258;
					Match(Star);
					}
					}
					State = 261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Star );
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 263;
					Match(Const);
					}
				}

				}
			}

			State = 268;
			directDeclarator(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DirectDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectDeclaratorContext directDeclarator() {
		return directDeclarator(0);
	}

	private DirectDeclaratorContext directDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DirectDeclaratorContext _localctx = new DirectDeclaratorContext(Context, _parentState);
		DirectDeclaratorContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_directDeclarator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				{
				State = 271;
				Match(Identifier);
				}
				break;
			case LeftParen:
				{
				State = 272;
				Match(LeftParen);
				State = 273;
				declarator();
				State = 274;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 287;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 278;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 279;
						Match(LeftBracket);
						State = 280;
						Match(Constant);
						State = 281;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 282;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 283;
						Match(LeftParen);
						State = 284;
						parameterList();
						State = 285;
						Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDirectDeclaratorContext abstractDirectDeclarator() {
			return GetRuleContext<AbstractDirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(CParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(CParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(CParser.Const, 0); }
		public AbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclaratorContext abstractDeclarator() {
		AbstractDeclaratorContext _localctx = new AbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 28, RULE_abstractDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star) {
				{
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 292;
					Match(Star);
					}
					}
					State = 295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Star );
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 297;
					Match(Const);
					}
				}

				}
			}

			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 302;
				abstractDirectDeclarator(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDirectDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDirectDeclaratorContext abstractDirectDeclarator() {
			return GetRuleContext<AbstractDirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public AbstractDirectDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDirectDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractDirectDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDirectDeclaratorContext abstractDirectDeclarator() {
		return abstractDirectDeclarator(0);
	}

	private AbstractDirectDeclaratorContext abstractDirectDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AbstractDirectDeclaratorContext _localctx = new AbstractDirectDeclaratorContext(Context, _parentState);
		AbstractDirectDeclaratorContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_abstractDirectDeclarator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 306;
			Match(LeftParen);
			State = 307;
			abstractDeclarator();
			State = 308;
			Match(RightParen);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 321;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 319;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						_localctx = new AbstractDirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_abstractDirectDeclarator);
						State = 310;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 311;
						Match(LeftBracket);
						State = 312;
						Match(Constant);
						State = 313;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new AbstractDirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_abstractDirectDeclarator);
						State = 314;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 315;
						Match(LeftParen);
						State = 316;
						parameterList();
						State = 317;
						Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StructOrUnionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(CParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Union() { return GetToken(CParser.Union, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext[] structDeclaration() {
			return GetRuleContexts<StructDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration(int i) {
			return GetRuleContext<StructDeclarationContext>(i);
		}
		public StructOrUnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structOrUnion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructOrUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructOrUnionContext structOrUnion() {
		StructOrUnionContext _localctx = new StructOrUnionContext(Context, State);
		EnterRule(_localctx, 32, RULE_structOrUnion);
		int _la;
		try {
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324;
				_la = TokenStream.LA(1);
				if ( !(_la==Struct || _la==Union) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 325;
					Match(Identifier);
					}
				}

				State = 328;
				Match(LeftBrace);
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 329;
					structDeclaration();
					}
					}
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 566182306912L) != 0) || _la==Identifier );
				State = 334;
				Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 336;
				_la = TokenStream.LA(1);
				if ( !(_la==Struct || _la==Union) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 337;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier() {
			return GetRuleContext<DeclarationSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext[] declarator() {
			return GetRuleContexts<DeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator(int i) {
			return GetRuleContext<DeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CParser.Comma, i);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_structDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			declarationSpecifier();
			State = 341;
			declarator();
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 342;
				Match(Comma);
				State = 343;
				declarator();
				}
				}
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 349;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(If);
			State = 354;
			Match(LeftParen);
			State = 355;
			expression();
			State = 356;
			Match(RightParen);
			State = 357;
			statement();
			State = 360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 358;
				Match(Else);
				State = 359;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(CParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(CParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(CParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext[] switchBlock() {
			return GetRuleContexts<SwitchBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext switchBlock(int i) {
			return GetRuleContext<SwitchBlockContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(Switch);
			State = 363;
			Match(LeftParen);
			State = 364;
			expression();
			State = 365;
			Match(RightParen);
			State = 366;
			Match(LeftBrace);
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Case || _la==Default) {
				{
				{
				State = 367;
				switchBlock();
				}
				}
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 373;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(CParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(CParser.Default, 0); }
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_switchBlock);
		int _la;
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				State = 375;
				Match(Case);
				State = 376;
				Match(Constant);
				State = 377;
				Match(Colon);
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8648108154491234024L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2952790625L) != 0)) {
					{
					{
					State = 378;
					statement();
					}
					}
					State = 383;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384;
				Match(Default);
				State = 385;
				Match(Colon);
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8648108154491234024L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2952790625L) != 0)) {
					{
					{
					State = 386;
					statement();
					}
					}
					State = 391;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(CParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(CParser.Semi, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_whileStatement);
		try {
			State = 408;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case While:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394;
				Match(While);
				State = 395;
				Match(LeftParen);
				State = 396;
				expression();
				State = 397;
				Match(RightParen);
				State = 398;
				statement();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 400;
				Match(Do);
				State = 401;
				statement();
				State = 402;
				Match(While);
				State = 403;
				Match(LeftParen);
				State = 404;
				expression();
				State = 405;
				Match(RightParen);
				State = 406;
				Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public SemiStatementContext stmt1;
		public ExpressionStatementContext stmt3;
		public StatementContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(CParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(CParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(CParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiStatementContext semiStatement() {
			return GetRuleContext<SemiStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(For);
			State = 411;
			Match(LeftParen);
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8646982219687617768L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2952790113L) != 0)) {
				{
				State = 412;
				_localctx.stmt1 = semiStatement();
				}
			}

			State = 415;
			Match(Semi);
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8646981653362638848L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2952790113L) != 0)) {
				{
				State = 416;
				expression();
				}
			}

			State = 419;
			Match(Semi);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8646981653362638848L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2952790113L) != 0)) {
				{
				State = 420;
				_localctx.stmt3 = expressionStatement();
				}
			}

			State = 423;
			Match(RightParen);
			State = 424;
			_localctx.body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopControlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(CParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(CParser.Break, 0); }
		public LoopControlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopControlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopControlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopControlStatementContext loopControlStatement() {
		LoopControlStatementContext _localctx = new LoopControlStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_loopControlStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			_la = TokenStream.LA(1);
			if ( !(_la==Break || _la==Continue) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(CParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			Match(Goto);
			State = 429;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		public LabelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelStatementContext labelStatement() {
		LabelStatementContext _localctx = new LabelStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_labelStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(Identifier);
			State = 432;
			Match(Colon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftShift() { return GetTokens(CParser.LeftShift); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShift(int i) {
			return GetToken(CParser.LeftShift, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightShift() { return GetTokens(CParser.RightShift); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShift(int i) {
			return GetToken(CParser.RightShift, i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_shiftExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			additiveExpression();
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LeftShift || _la==RightShift) {
				{
				{
				State = 435;
				_la = TokenStream.LA(1);
				if ( !(_la==LeftShift || _la==RightShift) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 436;
				additiveExpression();
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(CParser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(CParser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessEqual() { return GetTokens(CParser.LessEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual(int i) {
			return GetToken(CParser.LessEqual, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(CParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(CParser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterEqual() { return GetTokens(CParser.GreaterEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual(int i) {
			return GetToken(CParser.GreaterEqual, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			shiftExpression();
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 67553994410557440L) != 0)) {
				{
				{
				State = 443;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 67553994410557440L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 444;
				shiftExpression();
				}
				}
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equal() { return GetTokens(CParser.Equal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal(int i) {
			return GetToken(CParser.Equal, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NotEqual() { return GetTokens(CParser.NotEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual(int i) {
			return GetToken(CParser.NotEqual, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			relationalExpression();
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Equal || _la==NotEqual) {
				{
				{
				State = 451;
				_la = TokenStream.LA(1);
				if ( !(_la==Equal || _la==NotEqual) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 452;
				relationalExpression();
				}
				}
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(CParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(CParser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_andExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			equalityExpression();
			State = 463;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 459;
					Match(And);
					State = 460;
					equalityExpression();
					}
					} 
				}
				State = 465;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Caret() { return GetTokens(CParser.Caret); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret(int i) {
			return GetToken(CParser.Caret, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_exclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			andExpression();
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Caret) {
				{
				{
				State = 467;
				Match(Caret);
				State = 468;
				andExpression();
				}
				}
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(CParser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(CParser.Or, i);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusiveOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_inclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			exclusiveOrExpression();
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Or) {
				{
				{
				State = 475;
				Match(Or);
				State = 476;
				exclusiveOrExpression();
				}
				}
				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext[] inclusiveOrExpression() {
			return GetRuleContexts<InclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression(int i) {
			return GetRuleContext<InclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndAnd() { return GetTokens(CParser.AndAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd(int i) {
			return GetToken(CParser.AndAnd, i);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_logicalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			inclusiveOrExpression();
			State = 487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AndAnd) {
				{
				{
				State = 483;
				Match(AndAnd);
				State = 484;
				inclusiveOrExpression();
				}
				}
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext[] logicalAndExpression() {
			return GetRuleContexts<LogicalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression(int i) {
			return GetRuleContext<LogicalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOr() { return GetTokens(CParser.OrOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr(int i) {
			return GetToken(CParser.OrOr, i);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_logicalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			logicalAndExpression();
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OrOr) {
				{
				{
				State = 491;
				Match(OrOr);
				State = 492;
				logicalAndExpression();
				}
				}
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(CParser.Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(CParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_conditionalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			logicalOrExpression();
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question) {
				{
				State = 499;
				Match(Question);
				State = 500;
				expression();
				State = 501;
				Match(Colon);
				State = 502;
				conditionalExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(CParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(CParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(CParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StarAssign() { return GetToken(CParser.StarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivAssign() { return GetToken(CParser.DivAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModAssign() { return GetToken(CParser.ModAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftAssign() { return GetToken(CParser.LeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftAssign() { return GetToken(CParser.RightShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrAssign() { return GetToken(CParser.OrAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XorAssign() { return GetToken(CParser.XorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAssign() { return GetToken(CParser.AndAssign, 0); }
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_assignmentExpression);
		int _la;
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 506;
				conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 507;
				unaryExpression();
				State = 508;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & 2047L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 509;
				assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(Return);
			State = 515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8646981653362638848L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2952790113L) != 0)) {
				{
				State = 514;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLvalue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		LvalueContext _localctx = new LvalueContext(Context, State);
		EnterRule(_localctx, 76, RULE_lvalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_castExpression);
		try {
			State = 527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 521;
				Match(LeftParen);
				State = 522;
				type();
				State = 523;
				Match(RightParen);
				State = 524;
				castExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 526;
				unaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(CParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(CParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(CParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(CParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(CParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sizeof() { return GetToken(CParser.Sizeof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_unaryExpression);
		int _la;
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case Identifier:
			case Constant:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529;
				postfixExpression();
				}
				break;
			case Minus:
			case Star:
			case And:
			case Not:
			case Tilde:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 3109L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 531;
				castExpression();
				}
				break;
			case PlusPlus:
			case MinusMinus:
				EnterOuterAlt(_localctx, 3);
				{
				State = 532;
				_la = TokenStream.LA(1);
				if ( !(_la==PlusPlus || _la==MinusMinus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 533;
				unaryExpression();
				}
				break;
			case Sizeof:
				EnterOuterAlt(_localctx, 4);
				{
				State = 534;
				Match(Sizeof);
				State = 540;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					{
					State = 535;
					Match(LeftParen);
					State = 536;
					type();
					State = 537;
					Match(RightParen);
					}
					}
					break;
				case 2:
					{
					State = 539;
					unaryExpression();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartialPostfixExpressionContext[] partialPostfixExpression() {
			return GetRuleContexts<PartialPostfixExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartialPostfixExpressionContext partialPostfixExpression(int i) {
			return GetRuleContext<PartialPostfixExpressionContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_postfixExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			primaryExpression();
			State = 548;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 545;
					partialPostfixExpression();
					}
					} 
				}
				State = 550;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartialPostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(CParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(CParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(CParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(CParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(CParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(CParser.RightBracket, 0); }
		public PartialPostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partialPostfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartialPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartialPostfixExpressionContext partialPostfixExpression() {
		PartialPostfixExpressionContext _localctx = new PartialPostfixExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_partialPostfixExpression);
		int _la;
		try {
			State = 564;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PlusPlus:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551;
				Match(PlusPlus);
				}
				break;
			case MinusMinus:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552;
				Match(MinusMinus);
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 553;
				Match(LeftParen);
				State = 555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8646981653362638848L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 2952790113L) != 0)) {
					{
					State = 554;
					argumentList();
					}
				}

				State = 557;
				Match(RightParen);
				}
				break;
			case Arrow:
			case Dot:
				EnterOuterAlt(_localctx, 4);
				{
				State = 558;
				_la = TokenStream.LA(1);
				if ( !(_la==Arrow || _la==Dot) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 559;
				Match(Identifier);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 5);
				{
				State = 560;
				Match(LeftBracket);
				State = 561;
				expression();
				State = 562;
				Match(RightBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableExpressionContext variableExpression() {
			return GetRuleContext<VariableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(CParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(CParser.RightParen, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_primaryExpression);
		try {
			State = 572;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Constant:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566;
				constantExpression();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 567;
				variableExpression();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 568;
				Match(LeftParen);
				State = 569;
				expression();
				State = 570;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CParser.StringLiteral, 0); }
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_constantExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			_la = TokenStream.LA(1);
			if ( !(_la==Constant || _la==StringLiteral) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(CParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(CParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(CParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(CParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_additiveExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			multiplicativeExpression();
			State = 581;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 577;
					_la = TokenStream.LA(1);
					if ( !(_la==Plus || _la==Minus) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 578;
					multiplicativeExpression();
					}
					} 
				}
				State = 583;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(CParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(CParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Div() { return GetTokens(CParser.Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div(int i) {
			return GetToken(CParser.Div, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mod() { return GetTokens(CParser.Mod); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod(int i) {
			return GetToken(CParser.Mod, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_multiplicativeExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			castExpression();
			State = 589;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 585;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & 7L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 586;
					castExpression();
					}
					} 
				}
				State = 591;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		public VariableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableExpressionContext variableExpression() {
		VariableExpressionContext _localctx = new VariableExpressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_variableExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier() {
			return GetRuleContext<DeclarationSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			declarationSpecifier();
			State = 595;
			abstractDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructOrUnionContext structOrUnion() {
			return GetRuleContext<StructOrUnionContext>(0);
		}
		public UserTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserTypeContext userType() {
		UserTypeContext _localctx = new UserTypeContext(Context, State);
		EnterRule(_localctx, 100, RULE_userType);
		try {
			State = 599;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 597;
				Match(Identifier);
				}
				break;
			case Struct:
			case Union:
				EnterOuterAlt(_localctx, 2);
				{
				State = 598;
				structOrUnion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(CParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(CParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public BuiltinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinTypeContext builtinType() {
		BuiltinTypeContext _localctx = new BuiltinTypeContext(Context, State);
		EnterRule(_localctx, 102, RULE_builtinType);
		try {
			State = 604;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 601;
				Match(Void);
				}
				break;
			case Bool:
				EnterOuterAlt(_localctx, 2);
				{
				State = 602;
				Match(Bool);
				}
				break;
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
				EnterOuterAlt(_localctx, 3);
				{
				State = 603;
				integerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedCharContext unsignedChar() {
			return GetRuleContext<UnsignedCharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedCharContext signedChar() {
			return GetRuleContext<SignedCharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedShortContext unsignedShort() {
			return GetRuleContext<UnsignedShortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedShortContext signedShort() {
			return GetRuleContext<SignedShortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedLongContext unsignedLong() {
			return GetRuleContext<UnsignedLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLongContext signedLong() {
			return GetRuleContext<SignedLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedLongLongContext unsignedLongLong() {
			return GetRuleContext<UnsignedLongLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLongLongContext signedLongLong() {
			return GetRuleContext<SignedLongLongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoubleContext @double() {
			return GetRuleContext<DoubleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LongDoubleContext longDouble() {
			return GetRuleContext<LongDoubleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedIntContext unsignedInt() {
			return GetRuleContext<UnsignedIntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedIntContext signedInt() {
			return GetRuleContext<SignedIntContext>(0);
		}
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(Context, State);
		EnterRule(_localctx, 104, RULE_integerType);
		try {
			State = 619;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 606;
				unsignedChar();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 607;
				signedChar();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 608;
				unsignedShort();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 609;
				signedShort();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 610;
				unsignedLong();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 611;
				signedLong();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 612;
				unsignedLongLong();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 613;
				signedLongLong();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 614;
				@float();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 615;
				@double();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 616;
				longDouble();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 617;
				unsignedInt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 618;
				signedInt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedCharContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		public UnsignedCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedChar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedCharContext unsignedChar() {
		UnsignedCharContext _localctx = new UnsignedCharContext(Context, State);
		EnterRule(_localctx, 106, RULE_unsignedChar);
		try {
			State = 624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Char:
				EnterOuterAlt(_localctx, 1);
				{
				State = 621;
				Match(Char);
				}
				break;
			case Unsigned:
				EnterOuterAlt(_localctx, 2);
				{
				State = 622;
				Match(Unsigned);
				State = 623;
				Match(Char);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedCharContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(CParser.Char, 0); }
		public SignedCharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedChar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedCharContext signedChar() {
		SignedCharContext _localctx = new SignedCharContext(Context, State);
		EnterRule(_localctx, 108, RULE_signedChar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			Match(Signed);
			State = 627;
			Match(Char);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedShortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedShortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedShort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedShort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedShortContext unsignedShort() {
		UnsignedShortContext _localctx = new UnsignedShortContext(Context, State);
		EnterRule(_localctx, 110, RULE_unsignedShort);
		try {
			State = 634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 629;
				Match(Unsigned);
				State = 630;
				Match(Short);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 631;
				Match(Unsigned);
				State = 632;
				Match(Short);
				State = 633;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedShortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(CParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedShortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedShort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedShort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedShortContext signedShort() {
		SignedShortContext _localctx = new SignedShortContext(Context, State);
		EnterRule(_localctx, 112, RULE_signedShort);
		try {
			State = 644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 636;
				Match(Short);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 637;
				Match(Short);
				State = 638;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 639;
				Match(Signed);
				State = 640;
				Match(Short);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 641;
				Match(Signed);
				State = 642;
				Match(Short);
				State = 643;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedIntContext unsignedInt() {
		UnsignedIntContext _localctx = new UnsignedIntContext(Context, State);
		EnterRule(_localctx, 114, RULE_unsignedInt);
		try {
			State = 649;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 646;
				Match(Unsigned);
				State = 647;
				Match(Int);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 648;
				Match(Unsigned);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedIntContext signedInt() {
		SignedIntContext _localctx = new SignedIntContext(Context, State);
		EnterRule(_localctx, 116, RULE_signedInt);
		try {
			State = 655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 651;
				Match(Int);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 652;
				Match(Signed);
				State = 653;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 654;
				Match(Signed);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedLongContext unsignedLong() {
		UnsignedLongContext _localctx = new UnsignedLongContext(Context, State);
		EnterRule(_localctx, 118, RULE_unsignedLong);
		try {
			State = 662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 657;
				Match(Unsigned);
				State = 658;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 659;
				Match(Unsigned);
				State = 660;
				Match(Long);
				State = 661;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedLongContext signedLong() {
		SignedLongContext _localctx = new SignedLongContext(Context, State);
		EnterRule(_localctx, 120, RULE_signedLong);
		try {
			State = 672;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 664;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 665;
				Match(Long);
				State = 666;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 667;
				Match(Signed);
				State = 668;
				Match(Long);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 669;
				Match(Signed);
				State = 670;
				Match(Long);
				State = 671;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedLongLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(CParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Long() { return GetTokens(CParser.Long); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long(int i) {
			return GetToken(CParser.Long, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		public UnsignedLongLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedLongLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedLongLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedLongLongContext unsignedLongLong() {
		UnsignedLongLongContext _localctx = new UnsignedLongLongContext(Context, State);
		EnterRule(_localctx, 122, RULE_unsignedLongLong);
		try {
			State = 681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 674;
				Match(Unsigned);
				State = 675;
				Match(Long);
				State = 676;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 677;
				Match(Unsigned);
				State = 678;
				Match(Long);
				State = 679;
				Match(Long);
				State = 680;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLongLongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Long() { return GetTokens(CParser.Long); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long(int i) {
			return GetToken(CParser.Long, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(CParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(CParser.Signed, 0); }
		public SignedLongLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLongLong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedLongLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedLongLongContext signedLongLong() {
		SignedLongLongContext _localctx = new SignedLongLongContext(Context, State);
		EnterRule(_localctx, 124, RULE_signedLongLong);
		try {
			State = 695;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 683;
				Match(Long);
				State = 684;
				Match(Long);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 685;
				Match(Long);
				State = 686;
				Match(Long);
				State = 687;
				Match(Int);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 688;
				Match(Signed);
				State = 689;
				Match(Long);
				State = 690;
				Match(Long);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 691;
				Match(Signed);
				State = 692;
				Match(Long);
				State = 693;
				Match(Long);
				State = 694;
				Match(Int);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(CParser.Float, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 126, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			Match(Float);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CParser.Double, 0); }
		public DoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleContext @double() {
		DoubleContext _localctx = new DoubleContext(Context, State);
		EnterRule(_localctx, 128, RULE_double);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			Match(Double);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LongDoubleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(CParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(CParser.Double, 0); }
		public LongDoubleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_longDouble; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongDouble(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LongDoubleContext longDouble() {
		LongDoubleContext _localctx = new LongDoubleContext(Context, State);
		EnterRule(_localctx, 130, RULE_longDouble);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			Match(Long);
			State = 702;
			Match(Double);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineMarkerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(CParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(CParser.StringLiteral, 0); }
		public LineMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineMarker; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICVisitor<TResult> typedVisitor = visitor as ICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineMarker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineMarkerContext lineMarker() {
		LineMarkerContext _localctx = new LineMarkerContext(Context, State);
		EnterRule(_localctx, 132, RULE_lineMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			Match(Hashtag);
			State = 705;
			Match(T__0);
			State = 706;
			Match(Constant);
			State = 707;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return directDeclarator_sempred((DirectDeclaratorContext)_localctx, predIndex);
		case 15: return abstractDirectDeclarator_sempred((AbstractDirectDeclaratorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool directDeclarator_sempred(DirectDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool abstractDirectDeclarator_sempred(AbstractDirectDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,101,710,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,1,0,1,0,1,0,5,0,140,8,0,10,0,12,
		0,143,9,0,1,0,1,0,1,1,3,1,148,8,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,5,2,157,
		8,2,10,2,12,2,160,9,2,3,2,162,8,2,1,2,1,2,3,2,166,8,2,1,3,1,3,1,3,3,3,
		171,8,3,1,4,1,4,1,4,5,4,176,8,4,10,4,12,4,179,9,4,1,5,1,5,5,5,183,8,5,
		10,5,12,5,186,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,
		200,8,6,1,7,1,7,1,7,1,7,1,7,3,7,207,8,7,1,8,3,8,210,8,8,1,8,1,8,1,8,1,
		8,5,8,216,8,8,10,8,12,8,219,9,8,3,8,221,8,8,1,9,3,9,224,8,9,1,9,5,9,227,
		8,9,10,9,12,9,230,9,9,1,9,1,9,3,9,234,8,9,1,10,1,10,1,10,1,10,3,10,240,
		8,10,3,10,242,8,10,1,11,1,11,1,11,1,11,5,11,248,8,11,10,11,12,11,251,9,
		11,4,11,253,8,11,11,11,12,11,254,1,11,1,11,1,12,4,12,260,8,12,11,12,12,
		12,261,1,12,3,12,265,8,12,3,12,267,8,12,1,12,1,12,1,13,1,13,1,13,1,13,
		1,13,1,13,3,13,277,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,
		13,288,8,13,10,13,12,13,291,9,13,1,14,4,14,294,8,14,11,14,12,14,295,1,
		14,3,14,299,8,14,3,14,301,8,14,1,14,3,14,304,8,14,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,320,8,15,10,15,
		12,15,323,9,15,1,16,1,16,3,16,327,8,16,1,16,1,16,4,16,331,8,16,11,16,12,
		16,332,1,16,1,16,1,16,1,16,3,16,339,8,16,1,17,1,17,1,17,1,17,5,17,345,
		8,17,10,17,12,17,348,9,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,3,19,361,8,19,1,20,1,20,1,20,1,20,1,20,1,20,5,20,369,8,20,10,
		20,12,20,372,9,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,380,8,21,10,21,12,
		21,383,9,21,1,21,1,21,1,21,5,21,388,8,21,10,21,12,21,391,9,21,3,21,393,
		8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,3,22,409,8,22,1,23,1,23,1,23,3,23,414,8,23,1,23,1,23,3,23,418,8,23,
		1,23,1,23,3,23,422,8,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,
		26,1,26,1,27,1,27,1,27,5,27,438,8,27,10,27,12,27,441,9,27,1,28,1,28,1,
		28,5,28,446,8,28,10,28,12,28,449,9,28,1,29,1,29,1,29,5,29,454,8,29,10,
		29,12,29,457,9,29,1,30,1,30,1,30,5,30,462,8,30,10,30,12,30,465,9,30,1,
		31,1,31,1,31,5,31,470,8,31,10,31,12,31,473,9,31,1,32,1,32,1,32,5,32,478,
		8,32,10,32,12,32,481,9,32,1,33,1,33,1,33,5,33,486,8,33,10,33,12,33,489,
		9,33,1,34,1,34,1,34,5,34,494,8,34,10,34,12,34,497,9,34,1,35,1,35,1,35,
		1,35,1,35,1,35,3,35,505,8,35,1,36,1,36,1,36,1,36,1,36,3,36,512,8,36,1,
		37,1,37,3,37,516,8,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,
		3,40,528,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,
		41,541,8,41,3,41,543,8,41,1,42,1,42,5,42,547,8,42,10,42,12,42,550,9,42,
		1,43,1,43,1,43,1,43,3,43,556,8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,
		43,565,8,43,1,44,1,44,1,44,1,44,1,44,1,44,3,44,573,8,44,1,45,1,45,1,46,
		1,46,1,46,5,46,580,8,46,10,46,12,46,583,9,46,1,47,1,47,1,47,5,47,588,8,
		47,10,47,12,47,591,9,47,1,48,1,48,1,49,1,49,1,49,1,50,1,50,3,50,600,8,
		50,1,51,1,51,1,51,3,51,605,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,3,52,620,8,52,1,53,1,53,1,53,3,53,625,8,53,1,
		54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,3,55,635,8,55,1,56,1,56,1,56,1,56,
		1,56,1,56,1,56,1,56,3,56,645,8,56,1,57,1,57,1,57,3,57,650,8,57,1,58,1,
		58,1,58,1,58,3,58,656,8,58,1,59,1,59,1,59,1,59,1,59,3,59,663,8,59,1,60,
		1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,673,8,60,1,61,1,61,1,61,1,61,1,
		61,1,61,1,61,3,61,682,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
		1,62,1,62,1,62,3,62,696,8,62,1,63,1,63,1,64,1,64,1,65,1,65,1,65,1,66,1,
		66,1,66,1,66,1,66,1,66,0,2,26,30,67,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
		116,118,120,122,124,126,128,130,132,0,13,2,0,6,6,13,13,2,0,28,28,31,31,
		2,0,3,3,7,7,1,0,56,57,1,0,52,55,1,0,87,88,1,0,76,86,4,0,60,60,62,62,65,
		65,70,71,2,0,59,59,61,61,1,0,89,90,2,0,94,94,96,96,2,0,58,58,60,60,1,0,
		62,64,755,0,141,1,0,0,0,2,147,1,0,0,0,4,161,1,0,0,0,6,167,1,0,0,0,8,172,
		1,0,0,0,10,180,1,0,0,0,12,199,1,0,0,0,14,206,1,0,0,0,16,209,1,0,0,0,18,
		223,1,0,0,0,20,235,1,0,0,0,22,243,1,0,0,0,24,266,1,0,0,0,26,276,1,0,0,
		0,28,300,1,0,0,0,30,305,1,0,0,0,32,338,1,0,0,0,34,340,1,0,0,0,36,351,1,
		0,0,0,38,353,1,0,0,0,40,362,1,0,0,0,42,392,1,0,0,0,44,408,1,0,0,0,46,410,
		1,0,0,0,48,426,1,0,0,0,50,428,1,0,0,0,52,431,1,0,0,0,54,434,1,0,0,0,56,
		442,1,0,0,0,58,450,1,0,0,0,60,458,1,0,0,0,62,466,1,0,0,0,64,474,1,0,0,
		0,66,482,1,0,0,0,68,490,1,0,0,0,70,498,1,0,0,0,72,511,1,0,0,0,74,513,1,
		0,0,0,76,517,1,0,0,0,78,519,1,0,0,0,80,527,1,0,0,0,82,542,1,0,0,0,84,544,
		1,0,0,0,86,564,1,0,0,0,88,572,1,0,0,0,90,574,1,0,0,0,92,576,1,0,0,0,94,
		584,1,0,0,0,96,592,1,0,0,0,98,594,1,0,0,0,100,599,1,0,0,0,102,604,1,0,
		0,0,104,619,1,0,0,0,106,624,1,0,0,0,108,626,1,0,0,0,110,634,1,0,0,0,112,
		644,1,0,0,0,114,649,1,0,0,0,116,655,1,0,0,0,118,662,1,0,0,0,120,672,1,
		0,0,0,122,681,1,0,0,0,124,695,1,0,0,0,126,697,1,0,0,0,128,699,1,0,0,0,
		130,701,1,0,0,0,132,704,1,0,0,0,134,140,3,132,66,0,135,140,3,2,1,0,136,
		137,3,16,8,0,137,138,5,74,0,0,138,140,1,0,0,0,139,134,1,0,0,0,139,135,
		1,0,0,0,139,136,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,
		0,142,144,1,0,0,0,143,141,1,0,0,0,144,145,5,0,0,1,145,1,1,0,0,0,146,148,
		5,27,0,0,147,146,1,0,0,0,147,148,1,0,0,0,148,149,1,0,0,0,149,150,3,18,
		9,0,150,151,3,24,12,0,151,152,3,10,5,0,152,3,1,0,0,0,153,158,3,6,3,0,154,
		155,5,75,0,0,155,157,3,6,3,0,156,154,1,0,0,0,157,160,1,0,0,0,158,156,1,
		0,0,0,158,159,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,161,153,1,0,0,0,
		161,162,1,0,0,0,162,165,1,0,0,0,163,164,5,75,0,0,164,166,5,91,0,0,165,
		163,1,0,0,0,165,166,1,0,0,0,166,5,1,0,0,0,167,170,3,18,9,0,168,171,3,24,
		12,0,169,171,3,28,14,0,170,168,1,0,0,0,170,169,1,0,0,0,171,7,1,0,0,0,172,
		177,3,78,39,0,173,174,5,75,0,0,174,176,3,78,39,0,175,173,1,0,0,0,176,179,
		1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,9,1,0,0,0,179,177,1,0,0,0,
		180,184,5,50,0,0,181,183,3,12,6,0,182,181,1,0,0,0,183,186,1,0,0,0,184,
		182,1,0,0,0,184,185,1,0,0,0,185,187,1,0,0,0,186,184,1,0,0,0,187,188,5,
		51,0,0,188,11,1,0,0,0,189,190,3,14,7,0,190,191,5,74,0,0,191,200,1,0,0,
		0,192,200,3,10,5,0,193,200,3,38,19,0,194,200,3,44,22,0,195,200,3,46,23,
		0,196,200,3,40,20,0,197,200,3,52,26,0,198,200,5,74,0,0,199,189,1,0,0,0,
		199,192,1,0,0,0,199,193,1,0,0,0,199,194,1,0,0,0,199,195,1,0,0,0,199,196,
		1,0,0,0,199,197,1,0,0,0,199,198,1,0,0,0,200,13,1,0,0,0,201,207,3,74,37,
		0,202,207,3,48,24,0,203,207,3,36,18,0,204,207,3,50,25,0,205,207,3,16,8,
		0,206,201,1,0,0,0,206,202,1,0,0,0,206,203,1,0,0,0,206,204,1,0,0,0,206,
		205,1,0,0,0,207,15,1,0,0,0,208,210,5,27,0,0,209,208,1,0,0,0,209,210,1,
		0,0,0,210,211,1,0,0,0,211,220,3,18,9,0,212,217,3,20,10,0,213,214,5,75,
		0,0,214,216,3,20,10,0,215,213,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,
		217,218,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,220,212,1,0,0,0,220,221,
		1,0,0,0,221,17,1,0,0,0,222,224,5,30,0,0,223,222,1,0,0,0,223,224,1,0,0,
		0,224,228,1,0,0,0,225,227,7,0,0,0,226,225,1,0,0,0,227,230,1,0,0,0,228,
		226,1,0,0,0,228,229,1,0,0,0,229,233,1,0,0,0,230,228,1,0,0,0,231,234,3,
		100,50,0,232,234,3,102,51,0,233,231,1,0,0,0,233,232,1,0,0,0,234,19,1,0,
		0,0,235,241,3,24,12,0,236,239,5,76,0,0,237,240,3,78,39,0,238,240,3,22,
		11,0,239,237,1,0,0,0,239,238,1,0,0,0,240,242,1,0,0,0,241,236,1,0,0,0,241,
		242,1,0,0,0,242,21,1,0,0,0,243,252,5,50,0,0,244,249,3,78,39,0,245,246,
		5,75,0,0,246,248,3,78,39,0,247,245,1,0,0,0,248,251,1,0,0,0,249,247,1,0,
		0,0,249,250,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,252,244,1,0,0,0,253,
		254,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,5,
		51,0,0,257,23,1,0,0,0,258,260,5,62,0,0,259,258,1,0,0,0,260,261,1,0,0,0,
		261,259,1,0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,263,265,5,6,0,0,264,263,
		1,0,0,0,264,265,1,0,0,0,265,267,1,0,0,0,266,259,1,0,0,0,266,267,1,0,0,
		0,267,268,1,0,0,0,268,269,3,26,13,0,269,25,1,0,0,0,270,271,6,13,-1,0,271,
		277,5,93,0,0,272,273,5,46,0,0,273,274,3,24,12,0,274,275,5,47,0,0,275,277,
		1,0,0,0,276,270,1,0,0,0,276,272,1,0,0,0,277,289,1,0,0,0,278,279,10,2,0,
		0,279,280,5,48,0,0,280,281,5,94,0,0,281,288,5,49,0,0,282,283,10,1,0,0,
		283,284,5,46,0,0,284,285,3,4,2,0,285,286,5,47,0,0,286,288,1,0,0,0,287,
		278,1,0,0,0,287,282,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,
		0,0,0,290,27,1,0,0,0,291,289,1,0,0,0,292,294,5,62,0,0,293,292,1,0,0,0,
		294,295,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,299,
		5,6,0,0,298,297,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,293,1,0,0,
		0,300,301,1,0,0,0,301,303,1,0,0,0,302,304,3,30,15,0,303,302,1,0,0,0,303,
		304,1,0,0,0,304,29,1,0,0,0,305,306,6,15,-1,0,306,307,5,46,0,0,307,308,
		3,28,14,0,308,309,5,47,0,0,309,321,1,0,0,0,310,311,10,2,0,0,311,312,5,
		48,0,0,312,313,5,94,0,0,313,320,5,49,0,0,314,315,10,1,0,0,315,316,5,46,
		0,0,316,317,3,4,2,0,317,318,5,47,0,0,318,320,1,0,0,0,319,310,1,0,0,0,319,
		314,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,31,1,0,
		0,0,323,321,1,0,0,0,324,326,7,1,0,0,325,327,5,93,0,0,326,325,1,0,0,0,326,
		327,1,0,0,0,327,328,1,0,0,0,328,330,5,50,0,0,329,331,3,34,17,0,330,329,
		1,0,0,0,331,332,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,
		0,334,335,5,51,0,0,335,339,1,0,0,0,336,337,7,1,0,0,337,339,5,93,0,0,338,
		324,1,0,0,0,338,336,1,0,0,0,339,33,1,0,0,0,340,341,3,18,9,0,341,346,3,
		24,12,0,342,343,5,75,0,0,343,345,3,24,12,0,344,342,1,0,0,0,345,348,1,0,
		0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,349,1,0,0,0,348,346,1,0,0,0,349,
		350,5,74,0,0,350,35,1,0,0,0,351,352,3,78,39,0,352,37,1,0,0,0,353,354,5,
		17,0,0,354,355,5,46,0,0,355,356,3,78,39,0,356,357,5,47,0,0,357,360,3,12,
		6,0,358,359,5,11,0,0,359,361,3,12,6,0,360,358,1,0,0,0,360,361,1,0,0,0,
		361,39,1,0,0,0,362,363,5,29,0,0,363,364,5,46,0,0,364,365,3,78,39,0,365,
		366,5,47,0,0,366,370,5,50,0,0,367,369,3,42,21,0,368,367,1,0,0,0,369,372,
		1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,370,1,0,0,
		0,373,374,5,51,0,0,374,41,1,0,0,0,375,376,5,4,0,0,376,377,5,94,0,0,377,
		381,5,73,0,0,378,380,3,12,6,0,379,378,1,0,0,0,380,383,1,0,0,0,381,379,
		1,0,0,0,381,382,1,0,0,0,382,393,1,0,0,0,383,381,1,0,0,0,384,385,5,8,0,
		0,385,389,5,73,0,0,386,388,3,12,6,0,387,386,1,0,0,0,388,391,1,0,0,0,389,
		387,1,0,0,0,389,390,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,392,375,1,
		0,0,0,392,384,1,0,0,0,393,43,1,0,0,0,394,395,5,35,0,0,395,396,5,46,0,0,
		396,397,3,78,39,0,397,398,5,47,0,0,398,399,3,12,6,0,399,409,1,0,0,0,400,
		401,5,9,0,0,401,402,3,12,6,0,402,403,5,35,0,0,403,404,5,46,0,0,404,405,
		3,78,39,0,405,406,5,47,0,0,406,407,5,74,0,0,407,409,1,0,0,0,408,394,1,
		0,0,0,408,400,1,0,0,0,409,45,1,0,0,0,410,411,5,15,0,0,411,413,5,46,0,0,
		412,414,3,14,7,0,413,412,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,417,
		5,74,0,0,416,418,3,78,39,0,417,416,1,0,0,0,417,418,1,0,0,0,418,419,1,0,
		0,0,419,421,5,74,0,0,420,422,3,36,18,0,421,420,1,0,0,0,421,422,1,0,0,0,
		422,423,1,0,0,0,423,424,5,47,0,0,424,425,3,12,6,0,425,47,1,0,0,0,426,427,
		7,2,0,0,427,49,1,0,0,0,428,429,5,16,0,0,429,430,5,93,0,0,430,51,1,0,0,
		0,431,432,5,93,0,0,432,433,5,73,0,0,433,53,1,0,0,0,434,439,3,92,46,0,435,
		436,7,3,0,0,436,438,3,92,46,0,437,435,1,0,0,0,438,441,1,0,0,0,439,437,
		1,0,0,0,439,440,1,0,0,0,440,55,1,0,0,0,441,439,1,0,0,0,442,447,3,54,27,
		0,443,444,7,4,0,0,444,446,3,54,27,0,445,443,1,0,0,0,446,449,1,0,0,0,447,
		445,1,0,0,0,447,448,1,0,0,0,448,57,1,0,0,0,449,447,1,0,0,0,450,455,3,56,
		28,0,451,452,7,5,0,0,452,454,3,56,28,0,453,451,1,0,0,0,454,457,1,0,0,0,
		455,453,1,0,0,0,455,456,1,0,0,0,456,59,1,0,0,0,457,455,1,0,0,0,458,463,
		3,58,29,0,459,460,5,65,0,0,460,462,3,58,29,0,461,459,1,0,0,0,462,465,1,
		0,0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,61,1,0,0,0,465,463,1,0,0,0,466,
		471,3,60,30,0,467,468,5,69,0,0,468,470,3,60,30,0,469,467,1,0,0,0,470,473,
		1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,63,1,0,0,0,473,471,1,0,0,0,
		474,479,3,62,31,0,475,476,5,66,0,0,476,478,3,62,31,0,477,475,1,0,0,0,478,
		481,1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,65,1,0,0,0,481,479,1,0,
		0,0,482,487,3,64,32,0,483,484,5,67,0,0,484,486,3,64,32,0,485,483,1,0,0,
		0,486,489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,67,1,0,0,0,489,487,
		1,0,0,0,490,495,3,66,33,0,491,492,5,68,0,0,492,494,3,66,33,0,493,491,1,
		0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,69,1,0,0,0,497,
		495,1,0,0,0,498,504,3,68,34,0,499,500,5,72,0,0,500,501,3,78,39,0,501,502,
		5,73,0,0,502,503,3,70,35,0,503,505,1,0,0,0,504,499,1,0,0,0,504,505,1,0,
		0,0,505,71,1,0,0,0,506,512,3,70,35,0,507,508,3,82,41,0,508,509,7,6,0,0,
		509,510,3,72,36,0,510,512,1,0,0,0,511,506,1,0,0,0,511,507,1,0,0,0,512,
		73,1,0,0,0,513,515,5,23,0,0,514,516,3,78,39,0,515,514,1,0,0,0,515,516,
		1,0,0,0,516,75,1,0,0,0,517,518,3,78,39,0,518,77,1,0,0,0,519,520,3,72,36,
		0,520,79,1,0,0,0,521,522,5,46,0,0,522,523,3,98,49,0,523,524,5,47,0,0,524,
		525,3,80,40,0,525,528,1,0,0,0,526,528,3,82,41,0,527,521,1,0,0,0,527,526,
		1,0,0,0,528,81,1,0,0,0,529,543,3,84,42,0,530,531,7,7,0,0,531,543,3,80,
		40,0,532,533,7,8,0,0,533,543,3,82,41,0,534,540,5,26,0,0,535,536,5,46,0,
		0,536,537,3,98,49,0,537,538,5,47,0,0,538,541,1,0,0,0,539,541,3,82,41,0,
		540,535,1,0,0,0,540,539,1,0,0,0,541,543,1,0,0,0,542,529,1,0,0,0,542,530,
		1,0,0,0,542,532,1,0,0,0,542,534,1,0,0,0,543,83,1,0,0,0,544,548,3,88,44,
		0,545,547,3,86,43,0,546,545,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,548,
		549,1,0,0,0,549,85,1,0,0,0,550,548,1,0,0,0,551,565,5,59,0,0,552,565,5,
		61,0,0,553,555,5,46,0,0,554,556,3,8,4,0,555,554,1,0,0,0,555,556,1,0,0,
		0,556,557,1,0,0,0,557,565,5,47,0,0,558,559,7,9,0,0,559,565,5,93,0,0,560,
		561,5,48,0,0,561,562,3,78,39,0,562,563,5,49,0,0,563,565,1,0,0,0,564,551,
		1,0,0,0,564,552,1,0,0,0,564,553,1,0,0,0,564,558,1,0,0,0,564,560,1,0,0,
		0,565,87,1,0,0,0,566,573,3,90,45,0,567,573,3,96,48,0,568,569,5,46,0,0,
		569,570,3,78,39,0,570,571,5,47,0,0,571,573,1,0,0,0,572,566,1,0,0,0,572,
		567,1,0,0,0,572,568,1,0,0,0,573,89,1,0,0,0,574,575,7,10,0,0,575,91,1,0,
		0,0,576,581,3,94,47,0,577,578,7,11,0,0,578,580,3,94,47,0,579,577,1,0,0,
		0,580,583,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,93,1,0,0,0,583,581,
		1,0,0,0,584,589,3,80,40,0,585,586,7,12,0,0,586,588,3,80,40,0,587,585,1,
		0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,95,1,0,0,0,591,
		589,1,0,0,0,592,593,5,93,0,0,593,97,1,0,0,0,594,595,3,18,9,0,595,596,3,
		28,14,0,596,99,1,0,0,0,597,600,5,93,0,0,598,600,3,32,16,0,599,597,1,0,
		0,0,599,598,1,0,0,0,600,101,1,0,0,0,601,605,5,33,0,0,602,605,5,39,0,0,
		603,605,3,104,52,0,604,601,1,0,0,0,604,602,1,0,0,0,604,603,1,0,0,0,605,
		103,1,0,0,0,606,620,3,106,53,0,607,620,3,108,54,0,608,620,3,110,55,0,609,
		620,3,112,56,0,610,620,3,118,59,0,611,620,3,120,60,0,612,620,3,122,61,
		0,613,620,3,124,62,0,614,620,3,126,63,0,615,620,3,128,64,0,616,620,3,130,
		65,0,617,620,3,114,57,0,618,620,3,116,58,0,619,606,1,0,0,0,619,607,1,0,
		0,0,619,608,1,0,0,0,619,609,1,0,0,0,619,610,1,0,0,0,619,611,1,0,0,0,619,
		612,1,0,0,0,619,613,1,0,0,0,619,614,1,0,0,0,619,615,1,0,0,0,619,616,1,
		0,0,0,619,617,1,0,0,0,619,618,1,0,0,0,620,105,1,0,0,0,621,625,5,5,0,0,
		622,623,5,32,0,0,623,625,5,5,0,0,624,621,1,0,0,0,624,622,1,0,0,0,625,107,
		1,0,0,0,626,627,5,25,0,0,627,628,5,5,0,0,628,109,1,0,0,0,629,630,5,32,
		0,0,630,635,5,24,0,0,631,632,5,32,0,0,632,633,5,24,0,0,633,635,5,19,0,
		0,634,629,1,0,0,0,634,631,1,0,0,0,635,111,1,0,0,0,636,645,5,24,0,0,637,
		638,5,24,0,0,638,645,5,19,0,0,639,640,5,25,0,0,640,645,5,24,0,0,641,642,
		5,25,0,0,642,643,5,24,0,0,643,645,5,19,0,0,644,636,1,0,0,0,644,637,1,0,
		0,0,644,639,1,0,0,0,644,641,1,0,0,0,645,113,1,0,0,0,646,647,5,32,0,0,647,
		650,5,19,0,0,648,650,5,32,0,0,649,646,1,0,0,0,649,648,1,0,0,0,650,115,
		1,0,0,0,651,656,5,19,0,0,652,653,5,25,0,0,653,656,5,19,0,0,654,656,5,25,
		0,0,655,651,1,0,0,0,655,652,1,0,0,0,655,654,1,0,0,0,656,117,1,0,0,0,657,
		658,5,32,0,0,658,663,5,20,0,0,659,660,5,32,0,0,660,661,5,20,0,0,661,663,
		5,19,0,0,662,657,1,0,0,0,662,659,1,0,0,0,663,119,1,0,0,0,664,673,5,20,
		0,0,665,666,5,20,0,0,666,673,5,19,0,0,667,668,5,25,0,0,668,673,5,20,0,
		0,669,670,5,25,0,0,670,671,5,20,0,0,671,673,5,19,0,0,672,664,1,0,0,0,672,
		665,1,0,0,0,672,667,1,0,0,0,672,669,1,0,0,0,673,121,1,0,0,0,674,675,5,
		32,0,0,675,676,5,20,0,0,676,682,5,20,0,0,677,678,5,32,0,0,678,679,5,20,
		0,0,679,680,5,20,0,0,680,682,5,19,0,0,681,674,1,0,0,0,681,677,1,0,0,0,
		682,123,1,0,0,0,683,684,5,20,0,0,684,696,5,20,0,0,685,686,5,20,0,0,686,
		687,5,20,0,0,687,696,5,19,0,0,688,689,5,25,0,0,689,690,5,20,0,0,690,696,
		5,20,0,0,691,692,5,25,0,0,692,693,5,20,0,0,693,694,5,20,0,0,694,696,5,
		19,0,0,695,683,1,0,0,0,695,685,1,0,0,0,695,688,1,0,0,0,695,691,1,0,0,0,
		696,125,1,0,0,0,697,698,5,14,0,0,698,127,1,0,0,0,699,700,5,10,0,0,700,
		129,1,0,0,0,701,702,5,20,0,0,702,703,5,10,0,0,703,131,1,0,0,0,704,705,
		5,92,0,0,705,706,5,1,0,0,706,707,5,94,0,0,707,708,5,96,0,0,708,133,1,0,
		0,0,78,139,141,147,158,161,165,170,177,184,199,206,209,217,220,223,228,
		233,239,241,249,254,261,264,266,276,287,289,295,298,300,303,319,321,326,
		332,338,346,360,370,381,389,392,408,413,417,421,439,447,455,463,471,479,
		487,495,504,511,515,527,540,542,548,555,564,572,581,589,599,604,619,624,
		634,644,649,655,662,672,681,695
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DankleC
